/**
 * <%= name %> Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	Bool,
	Color4,
	F32,
	F64,
	Fixed32,
	Fixed4,
	IP,
	ParticleSystem,
	Port,
	Quaternion,
	S16,
	S32,
	S8,
	Text,
	Type,
	U16,
	U32,
	U64,
	U8,
	UUID,
	Variable1,
	Variable2,
	Vector3,
	Vector3D,
	Vector4,
} from "../types"
import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"

<% if (blocks.length > 0) { -%>
export interface <%= name %>Data {
<% blocks.forEach(block => { -%>
  <%= block.name %><%= block.name === 'agentData' && !shouldMakeAgentDataOptional(block) ? '' : '?' %>: {
<% block.fields.forEach(field => { -%>
    <%= field.name %><%= field.optional ? '?' : '' %>: <%= getTypeScriptType(field.type) %>
<% }) -%>
  }<%= block.variable ? '[]' : '' %>
<% }) -%>
}
<% } else { -%>
export type <%= name %>Data = Record<string, never>
<% } -%>

export const <%= camelCaseName %>Metadata = {
	id: <%= id %>,
	name: "<%= name %>",
<% if (frequency) { -%>
	frequency: <%= frequency %>,
<% } -%>
<% if (trusted) { -%>
	trusted: true,
<% } -%>
<% if (compression) { -%>
	compression: true,
<% } -%>
<% if (blocks.length > 0) { -%>
	blocks: [
<% blocks.forEach((block, index) => { -%>
		{
			name: "<%= block.name %>",
			parameters: [
<% block.fields.forEach((field, fieldIndex) => { -%>
				["<%= field.name %>", <%= field.type %>],
<% }) -%>
			],
<% if (block.variable) { -%>
			multiple: true,
<% } -%>
<% if (block.size) { -%>
			size: <%= block.size %>,
<% } -%>
		},
<% }) -%>
	]
<% } -%>
} satisfies PacketMetadata

export const <%= camelCaseName %> = createPacketSender<<%= name %>Data>(
	<%= camelCaseName %>Metadata
)

export const create<%= name %>Delegate =
	createPacketDelegate<<%= name %>Data>(<%= camelCaseName %>Metadata)
