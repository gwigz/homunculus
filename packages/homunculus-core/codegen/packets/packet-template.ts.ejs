/**
 * <%= packetName %> Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "../types"
import { Packet } from "./packet"

<% if (blocks.length > 0) { -%>
export interface <%= packetName %>Data {
<% blocks.forEach(block => { -%>
  <%= block.name %><%= block.name === 'agentData' && !shouldMakeAgentDataOptional(block) ? '' : '?' %>: {
<% block.fields.forEach(field => { -%>
    <%= field.name %><%= field.optional ? '?' : '' %>: <%= getTypeScriptType(field.type) %>
<% }) -%>
  }<%= block.variable ? '[]' : '' %>
<% }) -%>
}
<% } else { -%>
export type <%= packetName %>Data = Record<string, never>
<% } -%>

export class <%= packetName %> extends Packet<<%= packetName %>Data> {
	public static override id = <%= packetId %>
	public static override frequency = <%= frequency %>
	public static override trusted = <%= trusted %>
	public static override compression = <%= compression %>
	<% if (blocks.length > 0) { %>
	public static override format = new Map([
<% blocks.forEach((block, index) => { -%>
		[
			"<%= block.name %>",
			{
<% if (!block.variable) { -%>
				quantity: 1,
<% } -%>
				parameters: new Map<string, Types.Type>([
<% block.fields.forEach((field, fieldIndex) => { -%>
					["<%= field.name %>", <%= 'Types.' + field.type %>],
<% }) -%>
				]),
			},
		],
<% }) -%>
	])
	<% } -%>
}
