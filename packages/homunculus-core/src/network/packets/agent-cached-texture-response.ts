/**
 * AgentCachedTextureResponse Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import { S32, U8, UUID, Variable1 } from "../types"

export interface AgentCachedTextureResponseData {
	agentData: {
		agentId?: string
		sessionId?: string
		serialNum: number
	}
	wearableData?: {
		textureId: string
		textureIndex: number
		hostName: string | Buffer
	}[]
}

export const agentCachedTextureResponseMetadata = {
	id: 385,
	name: "AgentCachedTextureResponse",
	frequency: 2,
	trusted: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
				["serialNum", S32],
			],
		},
		{
			name: "wearableData",
			parameters: [
				["textureId", UUID],
				["textureIndex", U8],
				["hostName", Variable1],
			],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const agentCachedTextureResponse =
	createPacketSender<AgentCachedTextureResponseData>(
		agentCachedTextureResponseMetadata,
	)

export const createAgentCachedTextureResponseDelegate =
	createPacketDelegate<AgentCachedTextureResponseData>(
		agentCachedTextureResponseMetadata,
	)
