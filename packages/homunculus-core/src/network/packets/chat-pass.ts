/**
 * ChatPass Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import { F32, S32, U8, UUID, Variable1, Variable2, Vector3 } from "../types"
import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "./packet"

export interface ChatPassData {
	chatData?: {
		channel: number
		position: Vector3
		id: string
		ownerId: string
		name: string | Buffer
		sourceType: number
		type: number
		radius: number
		simAccess: number
		message: string | Buffer
	}
}

export const chatPassMetadata = {
	id: 239,
	name: "ChatPass",
	frequency: 2,
	trusted: true,
	compression: true,
	blocks: [
		{
			name: "chatData",
			parameters: [
				["channel", S32],
				["position", Vector3],
				["id", UUID],
				["ownerId", UUID],
				["name", Variable1],
				["sourceType", U8],
				["type", U8],
				["radius", F32],
				["simAccess", U8],
				["message", Variable2],
			],
		},
	],
} satisfies PacketMetadata

export const chatPass = createPacketSender<ChatPassData>(chatPassMetadata)

export const createChatPassDelegate =
	createPacketDelegate<ChatPassData>(chatPassMetadata)
