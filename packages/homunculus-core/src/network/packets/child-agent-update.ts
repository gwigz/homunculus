/**
 * ChildAgentUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import {
	Bool,
	F32,
	Quaternion,
	U8,
	U32,
	U64,
	UUID,
	Variable1,
	Variable2,
	Vector3,
} from "../types"

export interface ChildAgentUpdateData {
	agentData: {
		regionHandle: number | bigint
		viewerCircuitCode: number
		agentId?: string
		sessionId?: string
		agentPos: Vector3
		agentVel: Vector3
		center: Vector3
		size: Vector3
		atAxis: Vector3
		leftAxis: Vector3
		upAxis: Vector3
		changedGrid: boolean
		far: number
		aspect: number
		throttles: string | Buffer
		locomotionState: number
		headRotation: Quaternion
		bodyRotation: Quaternion
		controlFlags: number
		energyLevel: number
		godLevel?: number
		alwaysRun: boolean
		preyAgent: string
		agentAccess: number
		agentTextures: string | Buffer
		activeGroupId: string
	}
	groupData?: {
		groupId: string
		groupPowers: number | bigint
		acceptNotices: boolean
	}[]
	animationData?: {
		animation: string
		objectId: string
	}[]
	granterBlock?: {
		granterId: string
	}[]
	nvPairData?: {
		nvPairs: string | Buffer
	}[]
	visualParam?: {
		paramValue: number
	}[]
	agentAccess?: {
		agentLegacyAccess: number
		agentMaxAccess: number
	}[]
	agentInfo?: {
		flags: number
	}[]
}

export const childAgentUpdateMetadata = {
	id: 25,
	name: "ChildAgentUpdate",
	trusted: true,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["regionHandle", U64],
				["viewerCircuitCode", U32],
				["agentId", UUID],
				["sessionId", UUID],
				["agentPos", Vector3],
				["agentVel", Vector3],
				["center", Vector3],
				["size", Vector3],
				["atAxis", Vector3],
				["leftAxis", Vector3],
				["upAxis", Vector3],
				["changedGrid", Bool],
				["far", F32],
				["aspect", F32],
				["throttles", Variable1],
				["locomotionState", U32],
				["headRotation", Quaternion],
				["bodyRotation", Quaternion],
				["controlFlags", U32],
				["energyLevel", F32],
				["godLevel", U8],
				["alwaysRun", Bool],
				["preyAgent", UUID],
				["agentAccess", U8],
				["agentTextures", Variable2],
				["activeGroupId", UUID],
			],
		},
		{
			name: "groupData",
			parameters: [
				["groupId", UUID],
				["groupPowers", U64],
				["acceptNotices", Bool],
			],
			multiple: true,
		},
		{
			name: "animationData",
			parameters: [
				["animation", UUID],
				["objectId", UUID],
			],
			multiple: true,
		},
		{
			name: "granterBlock",
			parameters: [["granterId", UUID]],
			multiple: true,
		},
		{
			name: "nvPairData",
			parameters: [["nvPairs", Variable2]],
			multiple: true,
		},
		{
			name: "visualParam",
			parameters: [["paramValue", U8]],
			multiple: true,
		},
		{
			name: "agentAccess",
			parameters: [
				["agentLegacyAccess", U8],
				["agentMaxAccess", U8],
			],
			multiple: true,
		},
		{
			name: "agentInfo",
			parameters: [["flags", U32]],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const childAgentUpdate = createPacketSender<ChildAgentUpdateData>(
	childAgentUpdateMetadata,
)

export const createChildAgentUpdateDelegate =
	createPacketDelegate<ChildAgentUpdateData>(childAgentUpdateMetadata)
