/**
 * ChildAgentUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "../types"
import { Packet } from "./packet"

export interface ChildAgentUpdateData {
	agentData: {
		regionHandle: number | bigint
		viewerCircuitCode: number
		agentId?: string
		sessionId?: string
		agentPos: Types.Vector3
		agentVel: Types.Vector3
		center: Types.Vector3
		size: Types.Vector3
		atAxis: Types.Vector3
		leftAxis: Types.Vector3
		upAxis: Types.Vector3
		changedGrid: boolean
		far: number
		aspect: number
		throttles: string | Buffer
		locomotionState: number
		headRotation: Types.Quaternion
		bodyRotation: Types.Quaternion
		controlFlags: number
		energyLevel: number
		godLevel?: number
		alwaysRun: boolean
		preyAgent: string
		agentAccess: number
		agentTextures: string | Buffer
		activeGroupId: string
	}
	groupData?: {
		groupId: string
		groupPowers: number | bigint
		acceptNotices: boolean
	}[]
	animationData?: {
		animation: string
		objectId: string
	}[]
	granterBlock?: {
		granterId: string
	}[]
	nVPairData?: {
		nVPairs: string | Buffer
	}[]
	visualParam?: {
		paramValue: number
	}[]
	agentAccess?: {
		agentLegacyAccess: number
		agentMaxAccess: number
	}[]
	agentInfo?: {
		flags: number
	}[]
}

export class ChildAgentUpdate extends Packet<ChildAgentUpdateData> {
	public static override id = 25
	public static override frequency = 2
	public static override trusted = true
	public static override compression = true

	public static override format = new Map([
		[
			"agentData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["regionHandle", Types.U64],
					["viewerCircuitCode", Types.U32],
					["agentId", Types.UUID],
					["sessionId", Types.UUID],
					["agentPos", Types.Vector3],
					["agentVel", Types.Vector3],
					["center", Types.Vector3],
					["size", Types.Vector3],
					["atAxis", Types.Vector3],
					["leftAxis", Types.Vector3],
					["upAxis", Types.Vector3],
					["changedGrid", Types.Bool],
					["far", Types.F32],
					["aspect", Types.F32],
					["throttles", Types.Variable1],
					["locomotionState", Types.U32],
					["headRotation", Types.Quaternion],
					["bodyRotation", Types.Quaternion],
					["controlFlags", Types.U32],
					["energyLevel", Types.F32],
					["godLevel", Types.U8],
					["alwaysRun", Types.Bool],
					["preyAgent", Types.UUID],
					["agentAccess", Types.U8],
					["agentTextures", Types.Variable2],
					["activeGroupId", Types.UUID],
				]),
			},
		],
		[
			"groupData",
			{
				parameters: new Map<string, Types.Type>([
					["groupId", Types.UUID],
					["groupPowers", Types.U64],
					["acceptNotices", Types.Bool],
				]),
			},
		],
		[
			"animationData",
			{
				parameters: new Map<string, Types.Type>([
					["animation", Types.UUID],
					["objectId", Types.UUID],
				]),
			},
		],
		[
			"granterBlock",
			{
				parameters: new Map<string, Types.Type>([["granterId", Types.UUID]]),
			},
		],
		[
			"nVPairData",
			{
				parameters: new Map<string, Types.Type>([["nVPairs", Types.Variable2]]),
			},
		],
		[
			"visualParam",
			{
				parameters: new Map<string, Types.Type>([["paramValue", Types.U8]]),
			},
		],
		[
			"agentAccess",
			{
				parameters: new Map<string, Types.Type>([
					["agentLegacyAccess", Types.U8],
					["agentMaxAccess", Types.U8],
				]),
			},
		],
		[
			"agentInfo",
			{
				parameters: new Map<string, Types.Type>([["flags", Types.U32]]),
			},
		],
	])
}
