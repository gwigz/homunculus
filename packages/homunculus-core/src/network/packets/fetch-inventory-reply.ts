/**
 * FetchInventoryReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "../types"
import { Packet } from "./packet"

export interface FetchInventoryReplyData {
	agentData?: {
		agentId?: string | Buffer
	}
	inventoryData?: {
		itemId: string | Buffer
		folderId: string | Buffer
		creatorId: string | Buffer
		ownerId: string | Buffer
		groupId: string | Buffer
		baseMask: number
		ownerMask: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
		groupOwned: boolean
		assetId: string | Buffer
		type: number
		invType: number
		flags: number
		saleType: number
		salePrice: number
		name: string | Buffer
		description: string | Buffer
		creationDate: number
		crc: number
	}[]
}

export class FetchInventoryReply extends Packet<FetchInventoryReplyData> {
	public static override id = 280
	public static override frequency = 0
	public static override trusted = true
	public static override compression = true

	public static override format = new Map([
		[
			"agentData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([["agentId", Types.UUID]]),
			},
		],
		[
			"inventoryData",
			{
				parameters: new Map<string, Types.Type>([
					["itemId", Types.UUID],
					["folderId", Types.UUID],
					["creatorId", Types.UUID],
					["ownerId", Types.UUID],
					["groupId", Types.UUID],
					["baseMask", Types.U32],
					["ownerMask", Types.U32],
					["groupMask", Types.U32],
					["everyoneMask", Types.U32],
					["nextOwnerMask", Types.U32],
					["groupOwned", Types.Bool],
					["assetId", Types.UUID],
					["type", Types.S8],
					["invType", Types.S8],
					["flags", Types.U32],
					["saleType", Types.U8],
					["salePrice", Types.S32],
					["name", Types.Variable1],
					["description", Types.Variable1],
					["creationDate", Types.S32],
					["crc", Types.U32],
				]),
			},
		],
	])
}
