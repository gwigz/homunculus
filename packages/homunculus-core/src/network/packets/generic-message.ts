/**
 * GenericMessage Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import { UUID, Variable1 } from "../types"

export interface GenericMessageData {
	agentData: {
		agentId?: string
		sessionId?: string
		transactionId: string
	}
	methodData?: {
		method: string | Buffer
		invoice: string
	}
	paramList?: {
		parameter: string | Buffer
	}[]
}

export const genericMessageMetadata = {
	id: 261,
	name: "GenericMessage",
	frequency: 2,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
				["transactionId", UUID],
			],
		},
		{
			name: "methodData",
			parameters: [
				["method", Variable1],
				["invoice", UUID],
			],
		},
		{
			name: "paramList",
			parameters: [["parameter", Variable1]],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const genericMessage = createPacketSender<GenericMessageData>(
	genericMessageMetadata,
)

export const createGenericMessageDelegate =
	createPacketDelegate<GenericMessageData>(genericMessageMetadata)
