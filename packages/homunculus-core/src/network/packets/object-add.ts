/**
 * ObjectAdd Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import { Quaternion, S8, U8, U16, U32, UUID, Vector3 } from "../types"

export interface ObjectAddData {
	agentData: {
		agentId?: string
		sessionId?: string
		groupId: string
	}
	objectData?: {
		pCode: number
		material: number
		addFlags: number
		pathCurve: number
		profileCurve: number
		pathBegin: number
		pathEnd: number
		pathScaleX: number
		pathScaleY: number
		pathShearX: number
		pathShearY: number
		pathTwist: number
		pathTwistBegin: number
		pathRadiusOffset: number
		pathTaperX: number
		pathTaperY: number
		pathRevolutions: number
		pathSkew: number
		profileBegin: number
		profileEnd: number
		profileHollow: number
		bypassRaycast: number
		rayStart: Vector3
		rayEnd: Vector3
		rayTargetId: string
		rayEndIsIntersection: number
		scale: Vector3
		rotation: Quaternion
		state: number
	}
}

export const objectAddMetadata = {
	id: 1,
	name: "ObjectAdd",
	frequency: 1,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
				["groupId", UUID],
			],
		},
		{
			name: "objectData",
			parameters: [
				["pCode", U8],
				["material", U8],
				["addFlags", U32],
				["pathCurve", U8],
				["profileCurve", U8],
				["pathBegin", U16],
				["pathEnd", U16],
				["pathScaleX", U8],
				["pathScaleY", U8],
				["pathShearX", U8],
				["pathShearY", U8],
				["pathTwist", S8],
				["pathTwistBegin", S8],
				["pathRadiusOffset", S8],
				["pathTaperX", S8],
				["pathTaperY", S8],
				["pathRevolutions", U8],
				["pathSkew", S8],
				["profileBegin", U16],
				["profileEnd", U16],
				["profileHollow", U16],
				["bypassRaycast", U8],
				["rayStart", Vector3],
				["rayEnd", Vector3],
				["rayTargetId", UUID],
				["rayEndIsIntersection", U8],
				["scale", Vector3],
				["rotation", Quaternion],
				["state", U8],
			],
		},
	],
} satisfies PacketMetadata

export const objectAdd = createPacketSender<ObjectAddData>(objectAddMetadata)

export const createObjectAddDelegate =
	createPacketDelegate<ObjectAddData>(objectAddMetadata)
