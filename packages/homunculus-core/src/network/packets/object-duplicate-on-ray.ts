/**
 * ObjectDuplicateOnRay Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import { Bool, U32, UUID, Vector3 } from "../types"

export interface ObjectDuplicateOnRayData {
	agentData: {
		agentId?: string
		sessionId?: string
		groupId: string
		rayStart: Vector3
		rayEnd: Vector3
		bypassRaycast: boolean
		rayEndIsIntersection: boolean
		copyCenters: boolean
		copyRotates: boolean
		rayTargetId: string
		duplicateFlags: number
	}
	objectData?: {
		objectLocalId: number
	}[]
}

export const objectDuplicateOnRayMetadata = {
	id: 91,
	name: "ObjectDuplicateOnRay",
	frequency: 2,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
				["groupId", UUID],
				["rayStart", Vector3],
				["rayEnd", Vector3],
				["bypassRaycast", Bool],
				["rayEndIsIntersection", Bool],
				["copyCenters", Bool],
				["copyRotates", Bool],
				["rayTargetId", UUID],
				["duplicateFlags", U32],
			],
		},
		{
			name: "objectData",
			parameters: [["objectLocalId", U32]],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const objectDuplicateOnRay =
	createPacketSender<ObjectDuplicateOnRayData>(objectDuplicateOnRayMetadata)

export const createObjectDuplicateOnRayDelegate =
	createPacketDelegate<ObjectDuplicateOnRayData>(objectDuplicateOnRayMetadata)
