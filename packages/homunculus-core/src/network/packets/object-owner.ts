/**
 * ObjectOwner Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import { Bool, U32, UUID } from "../types"
import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "./packet"

export interface ObjectOwnerData {
	agentData?: {
		agentId?: string
		sessionId?: string
	}
	headerData?: {
		override: boolean
		ownerId: string
		groupId: string
	}
	objectData?: {
		objectLocalId: number
	}[]
}

export const objectOwnerMetadata = {
	id: 100,
	name: "ObjectOwner",
	frequency: 2,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
			],
		},
		{
			name: "headerData",
			parameters: [
				["override", Bool],
				["ownerId", UUID],
				["groupId", UUID],
			],
		},
		{
			name: "objectData",
			parameters: [["objectLocalId", U32]],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const objectOwner =
	createPacketSender<ObjectOwnerData>(objectOwnerMetadata)

export const createObjectOwnerDelegate =
	createPacketDelegate<ObjectOwnerData>(objectOwnerMetadata)
