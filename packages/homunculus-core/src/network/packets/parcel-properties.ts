/**
 * ParcelProperties Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "~/network/types"
import { Packet } from "./packet"

export interface ParcelPropertiesData {
	parcelData?: {
		requestResult: number
		sequenceId: number
		snapSelection: boolean
		selfCount: number
		otherCount: number
		publicCount: number
		localId: number
		ownerId: string
		isGroupOwned: boolean
		auctionId: number
		claimDate: number
		claimPrice: number
		rentPrice: number
		aABBMin: Types.Vector3
		aABBMax: Types.Vector3
		bitmap: string | Buffer
		area: number
		status: number
		simWideMaxPrims: number
		simWideTotalPrims: number
		maxPrims: number
		totalPrims: number
		ownerPrims: number
		groupPrims: number
		otherPrims: number
		selectedPrims: number
		parcelPrimBonus: number
		otherCleanTime: number
		parcelFlags: number
		salePrice: number
		name: string | Buffer
		desc: string | Buffer
		musicUrl: string | Buffer
		mediaUrl: string | Buffer
		mediaId: string
		mediaAutoScale: number
		groupId: string
		passPrice: number
		passHours: number
		category: number
		authBuyerId: string
		snapshotId: string
		userLocation: Types.Vector3
		userLookAt: Types.Vector3
		landingType: number
		regionPushOverride: boolean
		regionDenyAnonymous: boolean
		regionDenyIdentified: boolean
		regionDenyTransacted: boolean
	}
	ageVerificationBlock?: {
		regionDenyAgeUnverified: boolean
	}
	regionAllowAccessBlock?: {
		regionAllowAccessOverride: boolean
	}
	parcelEnvironmentBlock?: {
		parcelEnvironmentVersion: number
		regionAllowEnvironmentOverride: boolean
	}
}

export class ParcelProperties extends Packet<ParcelPropertiesData> {
	public static override id = 23
	public static override frequency = 2
	public static override trusted = true
	public static override compression = true

	public static override format = new Map([
		[
			"parcelData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["requestResult", Types.S32],
					["sequenceId", Types.S32],
					["snapSelection", Types.Bool],
					["selfCount", Types.S32],
					["otherCount", Types.S32],
					["publicCount", Types.S32],
					["localId", Types.S32],
					["ownerId", Types.UUID],
					["isGroupOwned", Types.Bool],
					["auctionId", Types.U32],
					["claimDate", Types.S32],
					["claimPrice", Types.S32],
					["rentPrice", Types.S32],
					["aABBMin", Types.Vector3],
					["aABBMax", Types.Vector3],
					["bitmap", Types.Variable2],
					["area", Types.S32],
					["status", Types.U8],
					["simWideMaxPrims", Types.S32],
					["simWideTotalPrims", Types.S32],
					["maxPrims", Types.S32],
					["totalPrims", Types.S32],
					["ownerPrims", Types.S32],
					["groupPrims", Types.S32],
					["otherPrims", Types.S32],
					["selectedPrims", Types.S32],
					["parcelPrimBonus", Types.F32],
					["otherCleanTime", Types.S32],
					["parcelFlags", Types.U32],
					["salePrice", Types.S32],
					["name", Types.Variable1],
					["desc", Types.Variable1],
					["musicUrl", Types.Variable1],
					["mediaUrl", Types.Variable1],
					["mediaId", Types.UUID],
					["mediaAutoScale", Types.U8],
					["groupId", Types.UUID],
					["passPrice", Types.S32],
					["passHours", Types.F32],
					["category", Types.U8],
					["authBuyerId", Types.UUID],
					["snapshotId", Types.UUID],
					["userLocation", Types.Vector3],
					["userLookAt", Types.Vector3],
					["landingType", Types.U8],
					["regionPushOverride", Types.Bool],
					["regionDenyAnonymous", Types.Bool],
					["regionDenyIdentified", Types.Bool],
					["regionDenyTransacted", Types.Bool],
				]),
			},
		],
		[
			"ageVerificationBlock",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["regionDenyAgeUnverified", Types.Bool],
				]),
			},
		],
		[
			"regionAllowAccessBlock",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["regionAllowAccessOverride", Types.Bool],
				]),
			},
		],
		[
			"parcelEnvironmentBlock",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["parcelEnvironmentVersion", Types.S32],
					["regionAllowEnvironmentOverride", Types.Bool],
				]),
			},
		],
	])
}
