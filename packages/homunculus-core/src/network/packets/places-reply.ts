/**
 * PlacesReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "../types"
import { Packet } from "./packet"

export interface PlacesReplyData {
	agentData: {
		agentId?: string | Buffer
		queryId: string | Buffer
	}
	transactionData?: {
		transactionId: string | Buffer
	}
	queryData?: {
		ownerId: string | Buffer
		name: string | Buffer
		desc: string | Buffer
		actualArea: number
		billableArea: number
		flags: number
		globalX: number
		globalY: number
		globalZ: number
		simName: string | Buffer
		snapshotId: string | Buffer
		dwell: number
		price: number
	}[]
}

export class PlacesReply extends Packet<PlacesReplyData> {
	public static override id = 30
	public static override frequency = 0
	public static override trusted = true
	public static override compression = true

	public static override format = new Map([
		[
			"agentData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["agentId", Types.UUID],
					["queryId", Types.UUID],
				]),
			},
		],
		[
			"transactionData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["transactionId", Types.UUID],
				]),
			},
		],
		[
			"queryData",
			{
				parameters: new Map<string, Types.Type>([
					["ownerId", Types.UUID],
					["name", Types.Variable1],
					["desc", Types.Variable1],
					["actualArea", Types.S32],
					["billableArea", Types.S32],
					["flags", Types.U8],
					["globalX", Types.F32],
					["globalY", Types.F32],
					["globalZ", Types.F32],
					["simName", Types.Variable1],
					["snapshotId", Types.UUID],
					["dwell", Types.F32],
					["price", Types.S32],
				]),
			},
		],
	])
}
