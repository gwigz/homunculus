/**
 * RegionHandshake Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "../types"
import { Packet } from "./packet"

export interface RegionHandshakeData {
	regionInfo?: {
		regionFlags: number
		simAccess: number
		simName: string | Buffer
		simOwner: string | Buffer
		isEstateManager: boolean
		waterHeight: number
		billableFactor: number
		cacheId: string | Buffer
		terrainBase0: string | Buffer
		terrainBase1: string | Buffer
		terrainBase2: string | Buffer
		terrainBase3: string | Buffer
		terrainDetail0: string | Buffer
		terrainDetail1: string | Buffer
		terrainDetail2: string | Buffer
		terrainDetail3: string | Buffer
		terrainStartHeight00: number
		terrainStartHeight01: number
		terrainStartHeight10: number
		terrainStartHeight11: number
		terrainHeightRange00: number
		terrainHeightRange01: number
		terrainHeightRange10: number
		terrainHeightRange11: number
	}
	regionInfo2?: {
		regionId: string | Buffer
	}
	regionInfo3?: {
		cPUClassId: number
		cPURatio: number
		coloName: string | Buffer
		productSku: string | Buffer
		productName: string | Buffer
	}
	regionInfo4?: {
		regionFlagsExtended: number | bigint
		regionProtocols: number | bigint
	}[]
}

export class RegionHandshake extends Packet<RegionHandshakeData> {
	public static override id = 148
	public static override frequency = 0
	public static override trusted = true
	public static override compression = true

	public static override format = new Map([
		[
			"regionInfo",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["regionFlags", Types.U32],
					["simAccess", Types.U8],
					["simName", Types.Variable1],
					["simOwner", Types.UUID],
					["isEstateManager", Types.Bool],
					["waterHeight", Types.F32],
					["billableFactor", Types.F32],
					["cacheId", Types.UUID],
					["terrainBase0", Types.UUID],
					["terrainBase1", Types.UUID],
					["terrainBase2", Types.UUID],
					["terrainBase3", Types.UUID],
					["terrainDetail0", Types.UUID],
					["terrainDetail1", Types.UUID],
					["terrainDetail2", Types.UUID],
					["terrainDetail3", Types.UUID],
					["terrainStartHeight00", Types.F32],
					["terrainStartHeight01", Types.F32],
					["terrainStartHeight10", Types.F32],
					["terrainStartHeight11", Types.F32],
					["terrainHeightRange00", Types.F32],
					["terrainHeightRange01", Types.F32],
					["terrainHeightRange10", Types.F32],
					["terrainHeightRange11", Types.F32],
				]),
			},
		],
		[
			"regionInfo2",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([["regionId", Types.UUID]]),
			},
		],
		[
			"regionInfo3",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["cPUClassId", Types.S32],
					["cPURatio", Types.S32],
					["coloName", Types.Variable1],
					["productSku", Types.Variable1],
					["productName", Types.Variable1],
				]),
			},
		],
		[
			"regionInfo4",
			{
				parameters: new Map<string, Types.Type>([
					["regionFlagsExtended", Types.U64],
					["regionProtocols", Types.U64],
				]),
			},
		],
	])
}
