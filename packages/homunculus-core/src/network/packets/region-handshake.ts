/**
 * RegionHandshake Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import { Bool, F32, S32, U8, U32, U64, UUID, Variable1 } from "../types"
import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "./packet"

export interface RegionHandshakeData {
	regionInfo?: {
		regionFlags: number
		simAccess: number
		simName: string | Buffer
		simOwner: string
		isEstateManager: boolean
		waterHeight: number
		billableFactor: number
		cacheId: string
		terrainBase0: string
		terrainBase1: string
		terrainBase2: string
		terrainBase3: string
		terrainDetail0: string
		terrainDetail1: string
		terrainDetail2: string
		terrainDetail3: string
		terrainStartHeight00: number
		terrainStartHeight01: number
		terrainStartHeight10: number
		terrainStartHeight11: number
		terrainHeightRange00: number
		terrainHeightRange01: number
		terrainHeightRange10: number
		terrainHeightRange11: number
	}
	regionInfo2?: {
		regionId: string
	}
	regionInfo3?: {
		cPUClassId: number
		cPURatio: number
		coloName: string | Buffer
		productSku: string | Buffer
		productName: string | Buffer
	}
	regionInfo4?: {
		regionFlagsExtended: number | bigint
		regionProtocols: number | bigint
	}[]
}

export const regionHandshakeMetadata = {
	id: 148,
	name: "RegionHandshake",
	frequency: 2,
	trusted: true,
	compression: true,
	blocks: [
		{
			name: "regionInfo",
			parameters: [
				["regionFlags", U32],
				["simAccess", U8],
				["simName", Variable1],
				["simOwner", UUID],
				["isEstateManager", Bool],
				["waterHeight", F32],
				["billableFactor", F32],
				["cacheId", UUID],
				["terrainBase0", UUID],
				["terrainBase1", UUID],
				["terrainBase2", UUID],
				["terrainBase3", UUID],
				["terrainDetail0", UUID],
				["terrainDetail1", UUID],
				["terrainDetail2", UUID],
				["terrainDetail3", UUID],
				["terrainStartHeight00", F32],
				["terrainStartHeight01", F32],
				["terrainStartHeight10", F32],
				["terrainStartHeight11", F32],
				["terrainHeightRange00", F32],
				["terrainHeightRange01", F32],
				["terrainHeightRange10", F32],
				["terrainHeightRange11", F32],
			],
		},
		{
			name: "regionInfo2",
			parameters: [["regionId", UUID]],
		},
		{
			name: "regionInfo3",
			parameters: [
				["cPUClassId", S32],
				["cPURatio", S32],
				["coloName", Variable1],
				["productSku", Variable1],
				["productName", Variable1],
			],
		},
		{
			name: "regionInfo4",
			parameters: [
				["regionFlagsExtended", U64],
				["regionProtocols", U64],
			],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const regionHandshake = createPacketSender<RegionHandshakeData>(
	regionHandshakeMetadata,
)

export const createRegionHandshakeDelegate =
	createPacketDelegate<RegionHandshakeData>(regionHandshakeMetadata)
