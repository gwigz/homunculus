/**
 * RegionInfo Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "~/network/types"
import { Packet } from "./packet"

export interface RegionInfoData {
	agentData?: {
		agentId?: string
		sessionId?: string
	}
	regionInfo?: {
		simName: string | Buffer
		estateId: number
		parentEstateId: number
		regionFlags: number
		simAccess: number
		maxAgents: number
		billableFactor: number
		objectBonusFactor: number
		waterHeight: number
		terrainRaiseLimit: number
		terrainLowerLimit: number
		pricePerMeter: number
		redirectGridX: number
		redirectGridY: number
		useEstateSun: boolean
		sunHour: number
	}
	regionInfo2?: {
		productSku: string | Buffer
		productName: string | Buffer
		maxAgents32: number
		hardMaxAgents: number
		hardMaxObjects: number
	}
	regionInfo3?: {
		regionFlagsExtended: number | bigint
	}[]
	regionInfo5?: {
		chatWhisperRange: number
		chatNormalRange: number
		chatShoutRange: number
		chatWhisperOffset: number
		chatNormalOffset: number
		chatShoutOffset: number
		chatFlags: number
	}[]
}

export class RegionInfo extends Packet<RegionInfoData> {
	public static override id = 142
	public static override frequency = 0
	public static override trusted = false
	public static override compression = true

	public static override format = new Map([
		[
			"agentData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["agentId", Types.UUID],
					["sessionId", Types.UUID],
				]),
			},
		],
		[
			"regionInfo",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["simName", Types.Variable1],
					["estateId", Types.U32],
					["parentEstateId", Types.U32],
					["regionFlags", Types.U32],
					["simAccess", Types.U8],
					["maxAgents", Types.U8],
					["billableFactor", Types.F32],
					["objectBonusFactor", Types.F32],
					["waterHeight", Types.F32],
					["terrainRaiseLimit", Types.F32],
					["terrainLowerLimit", Types.F32],
					["pricePerMeter", Types.S32],
					["redirectGridX", Types.S32],
					["redirectGridY", Types.S32],
					["useEstateSun", Types.Bool],
					["sunHour", Types.F32],
				]),
			},
		],
		[
			"regionInfo2",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["productSku", Types.Variable1],
					["productName", Types.Variable1],
					["maxAgents32", Types.U32],
					["hardMaxAgents", Types.U32],
					["hardMaxObjects", Types.U32],
				]),
			},
		],
		[
			"regionInfo3",
			{
				parameters: new Map<string, Types.Type>([
					["regionFlagsExtended", Types.U64],
				]),
			},
		],
		[
			"regionInfo5",
			{
				parameters: new Map<string, Types.Type>([
					["chatWhisperRange", Types.F32],
					["chatNormalRange", Types.F32],
					["chatShoutRange", Types.F32],
					["chatWhisperOffset", Types.F32],
					["chatNormalOffset", Types.F32],
					["chatShoutOffset", Types.F32],
					["chatFlags", Types.U32],
				]),
			},
		],
	])
}
