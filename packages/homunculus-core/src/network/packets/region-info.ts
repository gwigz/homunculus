/**
 * RegionInfo Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import { Bool, F32, S32, U8, U32, U64, UUID, Variable1 } from "../types"
import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "./packet"

export interface RegionInfoData {
	agentData?: {
		agentId?: string
		sessionId?: string
	}
	regionInfo?: {
		simName: string | Buffer
		estateId: number
		parentEstateId: number
		regionFlags: number
		simAccess: number
		maxAgents: number
		billableFactor: number
		objectBonusFactor: number
		waterHeight: number
		terrainRaiseLimit: number
		terrainLowerLimit: number
		pricePerMeter: number
		redirectGridX: number
		redirectGridY: number
		useEstateSun: boolean
		sunHour: number
	}
	regionInfo2?: {
		productSku: string | Buffer
		productName: string | Buffer
		maxAgents32: number
		hardMaxAgents: number
		hardMaxObjects: number
	}
	regionInfo3?: {
		regionFlagsExtended: number | bigint
	}[]
	regionInfo5?: {
		chatWhisperRange: number
		chatNormalRange: number
		chatShoutRange: number
		chatWhisperOffset: number
		chatNormalOffset: number
		chatShoutOffset: number
		chatFlags: number
	}[]
}

export const regionInfoMetadata = {
	id: 142,
	name: "RegionInfo",
	frequency: 2,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
			],
		},
		{
			name: "regionInfo",
			parameters: [
				["simName", Variable1],
				["estateId", U32],
				["parentEstateId", U32],
				["regionFlags", U32],
				["simAccess", U8],
				["maxAgents", U8],
				["billableFactor", F32],
				["objectBonusFactor", F32],
				["waterHeight", F32],
				["terrainRaiseLimit", F32],
				["terrainLowerLimit", F32],
				["pricePerMeter", S32],
				["redirectGridX", S32],
				["redirectGridY", S32],
				["useEstateSun", Bool],
				["sunHour", F32],
			],
		},
		{
			name: "regionInfo2",
			parameters: [
				["productSku", Variable1],
				["productName", Variable1],
				["maxAgents32", U32],
				["hardMaxAgents", U32],
				["hardMaxObjects", U32],
			],
		},
		{
			name: "regionInfo3",
			parameters: [["regionFlagsExtended", U64]],
			multiple: true,
		},
		{
			name: "regionInfo5",
			parameters: [
				["chatWhisperRange", F32],
				["chatNormalRange", F32],
				["chatShoutRange", F32],
				["chatWhisperOffset", F32],
				["chatNormalOffset", F32],
				["chatShoutOffset", F32],
				["chatFlags", U32],
			],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const regionInfo = createPacketSender<RegionInfoData>(regionInfoMetadata)

export const createRegionInfoDelegate =
	createPacketDelegate<RegionInfoData>(regionInfoMetadata)
