/**
 * RegionPresenceResponse Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import { F64, IP, Port, U64, UUID, Variable1 } from "../types"

export interface RegionPresenceResponseData {
	regionData?: {
		regionId: string
		regionHandle: number | bigint
		internalRegionIp: IP
		externalRegionIp: IP
		regionPort: Port
		validUntil: number
		message: string | Buffer
	}[]
}

export const regionPresenceResponseMetadata = {
	id: 16,
	name: "RegionPresenceResponse",
	frequency: 2,
	trusted: true,
	compression: true,
	blocks: [
		{
			name: "regionData",
			parameters: [
				["regionId", UUID],
				["regionHandle", U64],
				["internalRegionIp", IP],
				["externalRegionIp", IP],
				["regionPort", Port],
				["validUntil", F64],
				["message", Variable1],
			],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const regionPresenceResponse =
	createPacketSender<RegionPresenceResponseData>(regionPresenceResponseMetadata)

export const createRegionPresenceResponseDelegate =
	createPacketDelegate<RegionPresenceResponseData>(
		regionPresenceResponseMetadata,
	)
