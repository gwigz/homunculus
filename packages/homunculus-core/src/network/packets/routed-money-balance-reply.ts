/**
 * RoutedMoneyBalanceReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as Types from "~/network/types"
import { Packet } from "./packet"

export interface RoutedMoneyBalanceReplyData {
	targetBlock?: {
		targetIp: Types.IP
		targetPort: Types.Port
	}
	moneyData?: {
		agentId: string
		transactionId: string
		transactionSuccess: boolean
		moneyBalance: number
		squareMetersCredit: number
		squareMetersCommitted: number
		description: string | Buffer
	}
	transactionInfo?: {
		transactionType: number
		sourceId: string
		isSourceGroup: boolean
		destId: string
		isDestGroup: boolean
		amount: number
		itemDescription: string | Buffer
	}
}

export class RoutedMoneyBalanceReply extends Packet<RoutedMoneyBalanceReplyData> {
	public static override id = 315
	public static override frequency = 0
	public static override trusted = true
	public static override compression = true

	public static override format = new Map([
		[
			"targetBlock",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["targetIp", Types.IP],
					["targetPort", Types.Port],
				]),
			},
		],
		[
			"moneyData",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["agentId", Types.UUID],
					["transactionId", Types.UUID],
					["transactionSuccess", Types.Bool],
					["moneyBalance", Types.S32],
					["squareMetersCredit", Types.S32],
					["squareMetersCommitted", Types.S32],
					["description", Types.Variable1],
				]),
			},
		],
		[
			"transactionInfo",
			{
				quantity: 1,
				parameters: new Map<string, Types.Type>([
					["transactionType", Types.S32],
					["sourceId", Types.UUID],
					["isSourceGroup", Types.Bool],
					["destId", Types.UUID],
					["isDestGroup", Types.Bool],
					["amount", Types.S32],
					["itemDescription", Types.Variable1],
				]),
			},
		],
	])
}
