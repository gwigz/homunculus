/**
 * SimulatorPresentAtLocation Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import { Bool, IP, Port, U8, U32, UUID, Variable1, Vector3 } from "../types"
import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "./packet"

export interface SimulatorPresentAtLocationData {
	simulatorPublicHostBlock?: {
		port: Port
		simulatorIp: IP
		gridX: number
		gridY: number
	}
	neighborBlock?: {
		ip: IP
		port: Port
	}[]
	simulatorBlock?: {
		simName: string | Buffer
		simAccess: number
		regionFlags: number
		regionId: string
		estateId: number
		parentEstateId: number
	}
	telehubBlock?: {
		hasTelehub: boolean
		telehubPos: Vector3
	}[]
}

export const simulatorPresentAtLocationMetadata = {
	id: 11,
	name: "SimulatorPresentAtLocation",
	frequency: 2,
	trusted: true,
	blocks: [
		{
			name: "simulatorPublicHostBlock",
			parameters: [
				["port", Port],
				["simulatorIp", IP],
				["gridX", U32],
				["gridY", U32],
			],
		},
		{
			name: "neighborBlock",
			parameters: [
				["ip", IP],
				["port", Port],
			],
			multiple: true,
			size: 4,
		},
		{
			name: "simulatorBlock",
			parameters: [
				["simName", Variable1],
				["simAccess", U8],
				["regionFlags", U32],
				["regionId", UUID],
				["estateId", U32],
				["parentEstateId", U32],
			],
		},
		{
			name: "telehubBlock",
			parameters: [
				["hasTelehub", Bool],
				["telehubPos", Vector3],
			],
			multiple: true,
		},
	],
} satisfies PacketMetadata

export const simulatorPresentAtLocation =
	createPacketSender<SimulatorPresentAtLocationData>(
		simulatorPresentAtLocationMetadata,
	)

export const createSimulatorPresentAtLocationDelegate =
	createPacketDelegate<SimulatorPresentAtLocationData>(
		simulatorPresentAtLocationMetadata,
	)
