/**
 * UpdateAttachment Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import {
	createPacketDelegate,
	createPacketSender,
	type PacketMetadata,
} from "../packet"
import { Bool, S8, S32, U8, U32, UUID, Variable1 } from "../types"

export interface UpdateAttachmentData {
	agentData?: {
		agentId?: string
		sessionId?: string
	}
	attachmentBlock?: {
		attachmentPoint: number
	}
	operationData?: {
		addItem: boolean
		useExistingAsset: boolean
	}
	inventoryData?: {
		itemId: string
		folderId: string
		creatorId: string
		ownerId: string
		groupId: string
		baseMask: number
		ownerMask: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
		groupOwned: boolean
		assetId: string
		type: number
		invType: number
		flags: number
		saleType: number
		salePrice: number
		name: string | Buffer
		description: string | Buffer
		creationDate: number
		crc: number
	}
}

export const updateAttachmentMetadata = {
	id: 331,
	name: "UpdateAttachment",
	frequency: 2,
	trusted: true,
	compression: true,
	blocks: [
		{
			name: "agentData",
			parameters: [
				["agentId", UUID],
				["sessionId", UUID],
			],
		},
		{
			name: "attachmentBlock",
			parameters: [["attachmentPoint", U8]],
		},
		{
			name: "operationData",
			parameters: [
				["addItem", Bool],
				["useExistingAsset", Bool],
			],
		},
		{
			name: "inventoryData",
			parameters: [
				["itemId", UUID],
				["folderId", UUID],
				["creatorId", UUID],
				["ownerId", UUID],
				["groupId", UUID],
				["baseMask", U32],
				["ownerMask", U32],
				["groupMask", U32],
				["everyoneMask", U32],
				["nextOwnerMask", U32],
				["groupOwned", Bool],
				["assetId", UUID],
				["type", S8],
				["invType", S8],
				["flags", U32],
				["saleType", U8],
				["salePrice", S32],
				["name", Variable1],
				["description", Variable1],
				["creationDate", S32],
				["crc", U32],
			],
		},
	],
} satisfies PacketMetadata

export const updateAttachment = createPacketSender<UpdateAttachmentData>(
	updateAttachmentMetadata,
)

export const createUpdateAttachmentDelegate =
	createPacketDelegate<UpdateAttachmentData>(updateAttachmentMetadata)
