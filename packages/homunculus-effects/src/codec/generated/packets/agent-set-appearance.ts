/**
 * AgentSetAppearance Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AgentSetAppearanceData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		serialNum: number
		size: Types.Vector3
	}
	wearableData: {
		cacheId: Types.UUID
		textureIndex: number
	}[]
	objectData: {
		textureEntry: Buffer
	}
	visualParam: {
		paramValue: number
	}[]
}

export const id = 84
export const name = "AgentSetAppearance"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.U32.size() + // serialNum
	Primitives.Vector3.size() // size

// base byte size for one "wearableData" entry (fixed-length parameters only)
const WEARABLE_DATA_BASE_SIZE =
	Primitives.UUID.size() + // cacheId
	Primitives.U8.size() // textureIndex

// base byte size for one "visualParam" entry (fixed-length parameters only)
const VISUAL_PARAM_BASE_SIZE = Primitives.U8.size() // paramValue

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + OBJECT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AgentSetAppearanceData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += WEARABLE_DATA_BASE_SIZE * (data.wearableData?.length ?? 0)

	size += Primitives.Variable2.size(data.objectData.textureEntry)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += VISUAL_PARAM_BASE_SIZE * (data.visualParam?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.serialNum, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.size, buffer, offset)

	// WearableData
	offset = Primitives.U8.encode(data.wearableData?.length ?? 0, buffer, offset)

	for (const item of data.wearableData ?? []) {
		offset = Primitives.UUID.encode(item.cacheId, buffer, offset)
		offset = Primitives.U8.encode(item.textureIndex, buffer, offset)
	}

	// ObjectData
	offset = Primitives.Variable2.encode(data.objectData.textureEntry, buffer, offset)

	// VisualParam
	offset = Primitives.U8.encode(data.visualParam?.length ?? 0, buffer, offset)

	for (const item of data.visualParam ?? []) {
		offset = Primitives.U8.encode(item.paramValue, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): AgentSetAppearanceData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			serialNum: Primitives.U32.decode(buffer, state),
			size: Primitives.Vector3.decode(buffer, state),
		},
		wearableData: (() => {
			const items: AgentSetAppearanceData["wearableData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					cacheId: Primitives.UUID.decode(buffer, state),
					textureIndex: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
		objectData: {
			textureEntry: Primitives.Variable2.decode(buffer, state),
		},
		visualParam: (() => {
			const items: AgentSetAppearanceData["visualParam"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					paramValue: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
