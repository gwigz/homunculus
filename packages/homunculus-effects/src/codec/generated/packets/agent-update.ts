/**
 * AgentUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AgentUpdateData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		bodyRotation: Types.Quaternion
		headRotation: Types.Quaternion
		state: number
		cameraCenter: Types.Vector3
		cameraAtAxis: Types.Vector3
		cameraLeftAxis: Types.Vector3
		cameraUpAxis: Types.Vector3
		far: number
		controlFlags: number
		flags?: number
	}
}

export const id = 4
export const name = "AgentUpdate"
export const frequency = 0
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.Quaternion.size() + // bodyRotation
	Primitives.Quaternion.size() + // headRotation
	Primitives.U8.size() + // state
	Primitives.Vector3.size() + // cameraCenter
	Primitives.Vector3.size() + // cameraAtAxis
	Primitives.Vector3.size() + // cameraLeftAxis
	Primitives.Vector3.size() + // cameraUpAxis
	Primitives.F32.size() + // far
	Primitives.U32.size() + // controlFlags
	Primitives.U8.size() // flags

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AgentUpdateData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.Quaternion.encode(data.agentData.bodyRotation, buffer, offset)
	offset = Primitives.Quaternion.encode(data.agentData.headRotation, buffer, offset)
	offset = Primitives.U8.encode(data.agentData.state, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.cameraCenter, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.cameraAtAxis, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.cameraLeftAxis, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.cameraUpAxis, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.far, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.controlFlags, buffer, offset)
	offset = Primitives.U8.encode(data.agentData.flags, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): AgentUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			bodyRotation: Primitives.Quaternion.decode(buffer, state),
			headRotation: Primitives.Quaternion.decode(buffer, state),
			state: Primitives.U8.decode(buffer, state),
			cameraCenter: Primitives.Vector3.decode(buffer, state),
			cameraAtAxis: Primitives.Vector3.decode(buffer, state),
			cameraLeftAxis: Primitives.Vector3.decode(buffer, state),
			cameraUpAxis: Primitives.Vector3.decode(buffer, state),
			far: Primitives.F32.decode(buffer, state),
			controlFlags: Primitives.U32.decode(buffer, state),
			flags: Primitives.U8.decode(buffer, state),
		},
	}
}
