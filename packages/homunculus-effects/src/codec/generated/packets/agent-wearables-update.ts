/**
 * AgentWearablesUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AgentWearablesUpdateData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		serialNum: number
	}
	wearableData: {
		itemId: Types.UUID
		assetId: Types.UUID
		wearableType: number
	}[]
}

export const id = 382
export const name = "AgentWearablesUpdate"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.U32.size() // serialNum

// base byte size for one "wearableData" entry (fixed-length parameters only)
const WEARABLE_DATA_BASE_SIZE =
	Primitives.UUID.size() + // itemId
	Primitives.UUID.size() + // assetId
	Primitives.U8.size() // wearableType

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AgentWearablesUpdateData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += WEARABLE_DATA_BASE_SIZE * (data.wearableData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.serialNum, buffer, offset)

	// WearableData
	offset = Primitives.U8.encode(data.wearableData?.length ?? 0, buffer, offset)

	for (const item of data.wearableData ?? []) {
		offset = Primitives.UUID.encode(item.itemId, buffer, offset)
		offset = Primitives.UUID.encode(item.assetId, buffer, offset)
		offset = Primitives.U8.encode(item.wearableType, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): AgentWearablesUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			serialNum: Primitives.U32.decode(buffer, state),
		},
		wearableData: (() => {
			const items: AgentWearablesUpdateData["wearableData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					itemId: Primitives.UUID.decode(buffer, state),
					assetId: Primitives.UUID.decode(buffer, state),
					wearableType: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
