/**
 * AssetUploadRequest Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AssetUploadRequestData {
	assetBlock: {
		transactionId: Types.UUID
		type: number
		tempfile: boolean
		storeLocal: boolean
		assetData: Buffer
	}
}

export const id = 333
export const name = "AssetUploadRequest"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "assetBlock" entry (fixed-length parameters only)
const ASSET_BLOCK_BASE_SIZE =
	Primitives.UUID.size() + // transactionId
	Primitives.S8.size() + // type
	Primitives.Boolean.size() + // tempfile
	Primitives.Boolean.size() // storeLocal

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + ASSET_BLOCK_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AssetUploadRequestData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.assetBlock.assetData)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AssetBlock
	offset = Primitives.UUID.encode(data.assetBlock.transactionId, buffer, offset)
	offset = Primitives.S8.encode(data.assetBlock.type, buffer, offset)
	offset = Primitives.Boolean.encode(data.assetBlock.tempfile, buffer, offset)
	offset = Primitives.Boolean.encode(data.assetBlock.storeLocal, buffer, offset)
	offset = Primitives.Variable2.encode(data.assetBlock.assetData, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): AssetUploadRequestData {
	const state = { offset: HEADER_SIZE }

	return {
		assetBlock: {
			transactionId: Primitives.UUID.decode(buffer, state),
			type: Primitives.S8.decode(buffer, state),
			tempfile: Primitives.Boolean.decode(buffer, state),
			storeLocal: Primitives.Boolean.decode(buffer, state),
			assetData: Primitives.Variable2.decode(buffer, state),
		},
	}
}
