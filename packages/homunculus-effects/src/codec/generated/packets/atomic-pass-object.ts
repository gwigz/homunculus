/**
 * AtomicPassObject Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AtomicPassObjectData {
	taskData: {
		taskId: Types.UUID
		attachmentNeedsSave: boolean
	}
}

export const id = 28
export const name = "AtomicPassObject"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "taskData" entry (fixed-length parameters only)
const TASK_DATA_BASE_SIZE =
	Primitives.UUID.size() + // taskId
	Primitives.Boolean.size() // attachmentNeedsSave

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TASK_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AtomicPassObjectData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TaskData
	offset = Primitives.UUID.encode(data.taskData.taskId, buffer, offset)
	offset = Primitives.Boolean.encode(data.taskData.attachmentNeedsSave, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): AtomicPassObjectData {
	const state = { offset: HEADER_SIZE }

	return {
		taskData: {
			taskId: Primitives.UUID.decode(buffer, state),
			attachmentNeedsSave: Primitives.Boolean.decode(buffer, state),
		},
	}
}
