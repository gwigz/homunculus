/**
 * AvatarAppearance Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AvatarAppearanceData {
	sender: {
		id: Types.UUID
		isTrial: boolean
	}
	objectData: {
		textureEntry: Buffer
	}
	visualParam: {
		paramValue: number
	}[]
	appearanceData: {
		appearanceVersion: number
		cofVersion: number
		flags: number
	}[]
	appearanceHover: {
		hoverHeight: Types.Vector3
	}[]
	attachmentBlock: {
		id: Types.UUID
		attachmentPoint: number
	}[]
}

export const id = 158
export const name = "AvatarAppearance"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "sender" entry (fixed-length parameters only)
const SENDER_BASE_SIZE =
	Primitives.UUID.size() + // id
	Primitives.Boolean.size() // isTrial

// base byte size for one "visualParam" entry (fixed-length parameters only)
const VISUAL_PARAM_BASE_SIZE = Primitives.U8.size() // paramValue

// base byte size for one "appearanceData" entry (fixed-length parameters only)
const APPEARANCE_DATA_BASE_SIZE =
	Primitives.U8.size() + // appearanceVersion
	Primitives.S32.size() + // cofVersion
	Primitives.U32.size() // flags

// base byte size for one "appearanceHover" entry (fixed-length parameters only)
const APPEARANCE_HOVER_BASE_SIZE = Primitives.Vector3.size() // hoverHeight

// base byte size for one "attachmentBlock" entry (fixed-length parameters only)
const ATTACHMENT_BLOCK_BASE_SIZE =
	Primitives.UUID.size() + // id
	Primitives.U8.size() // attachmentPoint

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SENDER_BASE_SIZE + OBJECT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AvatarAppearanceData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.objectData.textureEntry)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += VISUAL_PARAM_BASE_SIZE * (data.visualParam?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += APPEARANCE_DATA_BASE_SIZE * (data.appearanceData?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += APPEARANCE_HOVER_BASE_SIZE * (data.appearanceHover?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += ATTACHMENT_BLOCK_BASE_SIZE * (data.attachmentBlock?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Sender
	offset = Primitives.UUID.encode(data.sender.id, buffer, offset)
	offset = Primitives.Boolean.encode(data.sender.isTrial, buffer, offset)

	// ObjectData
	offset = Primitives.Variable2.encode(data.objectData.textureEntry, buffer, offset)

	// VisualParam
	offset = Primitives.U8.encode(data.visualParam?.length ?? 0, buffer, offset)

	for (const item of data.visualParam ?? []) {
		offset = Primitives.U8.encode(item.paramValue, buffer, offset)
	}

	// AppearanceData
	offset = Primitives.U8.encode(data.appearanceData?.length ?? 0, buffer, offset)

	for (const item of data.appearanceData ?? []) {
		offset = Primitives.U8.encode(item.appearanceVersion, buffer, offset)
		offset = Primitives.S32.encode(item.cofVersion, buffer, offset)
		offset = Primitives.U32.encode(item.flags, buffer, offset)
	}

	// AppearanceHover
	offset = Primitives.U8.encode(data.appearanceHover?.length ?? 0, buffer, offset)

	for (const item of data.appearanceHover ?? []) {
		offset = Primitives.Vector3.encode(item.hoverHeight, buffer, offset)
	}

	// AttachmentBlock
	offset = Primitives.U8.encode(data.attachmentBlock?.length ?? 0, buffer, offset)

	for (const item of data.attachmentBlock ?? []) {
		offset = Primitives.UUID.encode(item.id, buffer, offset)
		offset = Primitives.U8.encode(item.attachmentPoint, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): AvatarAppearanceData {
	const state = { offset: HEADER_SIZE }

	return {
		sender: {
			id: Primitives.UUID.decode(buffer, state),
			isTrial: Primitives.Boolean.decode(buffer, state),
		},
		objectData: {
			textureEntry: Primitives.Variable2.decode(buffer, state),
		},
		visualParam: (() => {
			const items: AvatarAppearanceData["visualParam"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					paramValue: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
		appearanceData: (() => {
			const items: AvatarAppearanceData["appearanceData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					appearanceVersion: Primitives.U8.decode(buffer, state),
					cofVersion: Primitives.S32.decode(buffer, state),
					flags: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
		appearanceHover: (() => {
			const items: AvatarAppearanceData["appearanceHover"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					hoverHeight: Primitives.Vector3.decode(buffer, state),
				})
			}

			return items
		})(),
		attachmentBlock: (() => {
			const items: AvatarAppearanceData["attachmentBlock"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					id: Primitives.UUID.decode(buffer, state),
					attachmentPoint: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
