/**
 * AvatarNotesUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AvatarNotesUpdateData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	data: {
		targetId: Types.UUID
		notes: Buffer
	}
}

export const id = 177
export const name = "AvatarNotesUpdate"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE = Primitives.UUID.size() // targetId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AvatarNotesUpdateData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.data.notes)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// Data
	offset = Primitives.UUID.encode(data.data.targetId, buffer, offset)
	offset = Primitives.Variable2.encode(data.data.notes, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): AvatarNotesUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		data: {
			targetId: Primitives.UUID.decode(buffer, state),
			notes: Primitives.Variable2.decode(buffer, state),
		},
	}
}
