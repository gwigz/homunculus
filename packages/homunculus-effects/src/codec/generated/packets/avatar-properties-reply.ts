/**
 * AvatarPropertiesReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AvatarPropertiesReplyData {
	agentData: {
		agentId?: Types.UUID
		avatarId: Types.UUID
	}
	propertiesData: {
		imageId: Types.UUID
		flImageId: Types.UUID
		partnerId: Types.UUID
		aboutText: Buffer
		flAboutText: Buffer
		bornOn: Buffer
		profileUrl: Buffer
		charterMember: Buffer
		flags: number
	}
}

export const id = 171
export const name = "AvatarPropertiesReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // avatarId

// base byte size for one "propertiesData" entry (fixed-length parameters only)
const PROPERTIES_DATA_BASE_SIZE =
	Primitives.UUID.size() + // imageId
	Primitives.UUID.size() + // flImageId
	Primitives.UUID.size() + // partnerId
	Primitives.U32.size() // flags

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + PROPERTIES_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AvatarPropertiesReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.propertiesData.aboutText)
	size += Primitives.Variable1.size(data.propertiesData.flAboutText)
	size += Primitives.Variable1.size(data.propertiesData.bornOn)
	size += Primitives.Variable1.size(data.propertiesData.profileUrl)
	size += Primitives.Variable1.size(data.propertiesData.charterMember)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.avatarId, buffer, offset)

	// PropertiesData
	offset = Primitives.UUID.encode(data.propertiesData.imageId, buffer, offset)
	offset = Primitives.UUID.encode(data.propertiesData.flImageId, buffer, offset)
	offset = Primitives.UUID.encode(data.propertiesData.partnerId, buffer, offset)
	offset = Primitives.Variable2.encode(data.propertiesData.aboutText, buffer, offset)
	offset = Primitives.Variable1.encode(data.propertiesData.flAboutText, buffer, offset)
	offset = Primitives.Variable1.encode(data.propertiesData.bornOn, buffer, offset)
	offset = Primitives.Variable1.encode(data.propertiesData.profileUrl, buffer, offset)
	offset = Primitives.Variable1.encode(data.propertiesData.charterMember, buffer, offset)
	offset = Primitives.U32.encode(data.propertiesData.flags, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): AvatarPropertiesReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			avatarId: Primitives.UUID.decode(buffer, state),
		},
		propertiesData: {
			imageId: Primitives.UUID.decode(buffer, state),
			flImageId: Primitives.UUID.decode(buffer, state),
			partnerId: Primitives.UUID.decode(buffer, state),
			aboutText: Primitives.Variable2.decode(buffer, state),
			flAboutText: Primitives.Variable1.decode(buffer, state),
			bornOn: Primitives.Variable1.decode(buffer, state),
			profileUrl: Primitives.Variable1.decode(buffer, state),
			charterMember: Primitives.Variable1.decode(buffer, state),
			flags: Primitives.U32.decode(buffer, state),
		},
	}
}
