/**
 * AvatarSitResponse Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface AvatarSitResponseData {
	sitObject: {
		id: Types.UUID
	}
	sitTransform: {
		autoPilot: boolean
		sitPosition: Types.Vector3
		sitRotation: Types.Quaternion
		cameraEyeOffset: Types.Vector3
		cameraAtOffset: Types.Vector3
		forceMouselook: boolean
	}
}

export const id = 21
export const name = "AvatarSitResponse"
export const frequency = 0
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "sitObject" entry (fixed-length parameters only)
const SIT_OBJECT_BASE_SIZE = Primitives.UUID.size() // id

// base byte size for one "sitTransform" entry (fixed-length parameters only)
const SIT_TRANSFORM_BASE_SIZE =
	Primitives.Boolean.size() + // autoPilot
	Primitives.Vector3.size() + // sitPosition
	Primitives.Quaternion.size() + // sitRotation
	Primitives.Vector3.size() + // cameraEyeOffset
	Primitives.Vector3.size() + // cameraAtOffset
	Primitives.Boolean.size() // forceMouselook

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SIT_OBJECT_BASE_SIZE + SIT_TRANSFORM_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<AvatarSitResponseData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// SitObject
	offset = Primitives.UUID.encode(data.sitObject.id, buffer, offset)

	// SitTransform
	offset = Primitives.Boolean.encode(data.sitTransform.autoPilot, buffer, offset)
	offset = Primitives.Vector3.encode(data.sitTransform.sitPosition, buffer, offset)
	offset = Primitives.Quaternion.encode(data.sitTransform.sitRotation, buffer, offset)
	offset = Primitives.Vector3.encode(data.sitTransform.cameraEyeOffset, buffer, offset)
	offset = Primitives.Vector3.encode(data.sitTransform.cameraAtOffset, buffer, offset)
	offset = Primitives.Boolean.encode(data.sitTransform.forceMouselook, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): AvatarSitResponseData {
	const state = { offset: HEADER_SIZE }

	return {
		sitObject: {
			id: Primitives.UUID.decode(buffer, state),
		},
		sitTransform: {
			autoPilot: Primitives.Boolean.decode(buffer, state),
			sitPosition: Primitives.Vector3.decode(buffer, state),
			sitRotation: Primitives.Quaternion.decode(buffer, state),
			cameraEyeOffset: Primitives.Vector3.decode(buffer, state),
			cameraAtOffset: Primitives.Vector3.decode(buffer, state),
			forceMouselook: Primitives.Boolean.decode(buffer, state),
		},
	}
}
