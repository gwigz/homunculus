/**
 * CameraConstraint Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface CameraConstraintData {
	cameraCollidePlane: {
		plane: Types.Vector4
	}
}

export const id = 22
export const name = "CameraConstraint"
export const frequency = 0
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "cameraCollidePlane" entry (fixed-length parameters only)
const CAMERA_COLLIDE_PLANE_BASE_SIZE = Primitives.Vector4.size() // plane

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + CAMERA_COLLIDE_PLANE_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<CameraConstraintData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// CameraCollidePlane
	offset = Primitives.Vector4.encode(data.cameraCollidePlane.plane, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): CameraConstraintData {
	const state = { offset: HEADER_SIZE }

	return {
		cameraCollidePlane: {
			plane: Primitives.Vector4.decode(buffer, state),
		},
	}
}
