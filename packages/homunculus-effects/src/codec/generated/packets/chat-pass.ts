/**
 * ChatPass Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ChatPassData {
	chatData: {
		channel: number
		position: Types.Vector3
		id: Types.UUID
		ownerId: Types.UUID
		name: Buffer
		sourceType: number
		type: number
		radius: number
		simAccess: number
		message: Buffer
	}
}

export const id = 239
export const name = "ChatPass"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "chatData" entry (fixed-length parameters only)
const CHAT_DATA_BASE_SIZE =
	Primitives.S32.size() + // channel
	Primitives.Vector3.size() + // position
	Primitives.UUID.size() + // id
	Primitives.UUID.size() + // ownerId
	Primitives.U8.size() + // sourceType
	Primitives.U8.size() + // type
	Primitives.F32.size() + // radius
	Primitives.U8.size() // simAccess

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + CHAT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ChatPassData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.chatData.name)
	size += Primitives.Variable2.size(data.chatData.message)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ChatData
	offset = Primitives.S32.encode(data.chatData.channel, buffer, offset)
	offset = Primitives.Vector3.encode(data.chatData.position, buffer, offset)
	offset = Primitives.UUID.encode(data.chatData.id, buffer, offset)
	offset = Primitives.UUID.encode(data.chatData.ownerId, buffer, offset)
	offset = Primitives.Variable1.encode(data.chatData.name, buffer, offset)
	offset = Primitives.U8.encode(data.chatData.sourceType, buffer, offset)
	offset = Primitives.U8.encode(data.chatData.type, buffer, offset)
	offset = Primitives.F32.encode(data.chatData.radius, buffer, offset)
	offset = Primitives.U8.encode(data.chatData.simAccess, buffer, offset)
	offset = Primitives.Variable2.encode(data.chatData.message, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ChatPassData {
	const state = { offset: HEADER_SIZE }

	return {
		chatData: {
			channel: Primitives.S32.decode(buffer, state),
			position: Primitives.Vector3.decode(buffer, state),
			id: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			sourceType: Primitives.U8.decode(buffer, state),
			type: Primitives.U8.decode(buffer, state),
			radius: Primitives.F32.decode(buffer, state),
			simAccess: Primitives.U8.decode(buffer, state),
			message: Primitives.Variable2.decode(buffer, state),
		},
	}
}
