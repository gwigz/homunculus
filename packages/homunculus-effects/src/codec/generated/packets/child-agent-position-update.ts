/**
 * ChildAgentPositionUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ChildAgentPositionUpdateData {
	agentData: {
		regionHandle: number | bigint
		viewerCircuitCode: number
		agentId?: Types.UUID
		sessionId?: Types.UUID
		agentPos: Types.Vector3
		agentVel: Types.Vector3
		center: Types.Vector3
		size: Types.Vector3
		atAxis: Types.Vector3
		leftAxis: Types.Vector3
		upAxis: Types.Vector3
		changedGrid: boolean
	}
}

export const id = 27
export const name = "ChildAgentPositionUpdate"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.U64.size() + // regionHandle
	Primitives.U32.size() + // viewerCircuitCode
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.Vector3.size() + // agentPos
	Primitives.Vector3.size() + // agentVel
	Primitives.Vector3.size() + // center
	Primitives.Vector3.size() + // size
	Primitives.Vector3.size() + // atAxis
	Primitives.Vector3.size() + // leftAxis
	Primitives.Vector3.size() + // upAxis
	Primitives.Boolean.size() // changedGrid

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ChildAgentPositionUpdateData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.U64.encode(data.agentData.regionHandle, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.viewerCircuitCode, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.agentPos, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.agentVel, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.center, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.size, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.atAxis, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.leftAxis, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.upAxis, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.changedGrid, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ChildAgentPositionUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			regionHandle: Primitives.U64.decode(buffer, state),
			viewerCircuitCode: Primitives.U32.decode(buffer, state),
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			agentPos: Primitives.Vector3.decode(buffer, state),
			agentVel: Primitives.Vector3.decode(buffer, state),
			center: Primitives.Vector3.decode(buffer, state),
			size: Primitives.Vector3.decode(buffer, state),
			atAxis: Primitives.Vector3.decode(buffer, state),
			leftAxis: Primitives.Vector3.decode(buffer, state),
			upAxis: Primitives.Vector3.decode(buffer, state),
			changedGrid: Primitives.Boolean.decode(buffer, state),
		},
	}
}
