/**
 * ChildAgentUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ChildAgentUpdateData {
	agentData: {
		regionHandle: number | bigint
		viewerCircuitCode: number
		agentId?: Types.UUID
		sessionId?: Types.UUID
		agentPos: Types.Vector3
		agentVel: Types.Vector3
		center: Types.Vector3
		size: Types.Vector3
		atAxis: Types.Vector3
		leftAxis: Types.Vector3
		upAxis: Types.Vector3
		changedGrid: boolean
		far: number
		aspect: number
		throttles: Buffer
		locomotionState: number
		headRotation: Types.Quaternion
		bodyRotation: Types.Quaternion
		controlFlags: number
		energyLevel: number
		godLevel?: number
		alwaysRun: boolean
		preyAgent: Types.UUID
		agentAccess: number
		agentTextures: Buffer
		activeGroupId: Types.UUID
	}
	groupData: {
		groupId: Types.UUID
		groupPowers: number | bigint
		acceptNotices: boolean
	}[]
	animationData: {
		animation: Types.UUID
		objectId: Types.UUID
	}[]
	granterBlock: {
		granterId: Types.UUID
	}[]
	nvPairData: {
		nvPairs: Buffer
	}[]
	visualParam: {
		paramValue: number
	}[]
	agentAccess: {
		agentLegacyAccess: number
		agentMaxAccess: number
	}[]
	agentInfo: {
		flags: number
	}[]
}

export const id = 25
export const name = "ChildAgentUpdate"
export const frequency = 0
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.U64.size() + // regionHandle
	Primitives.U32.size() + // viewerCircuitCode
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.Vector3.size() + // agentPos
	Primitives.Vector3.size() + // agentVel
	Primitives.Vector3.size() + // center
	Primitives.Vector3.size() + // size
	Primitives.Vector3.size() + // atAxis
	Primitives.Vector3.size() + // leftAxis
	Primitives.Vector3.size() + // upAxis
	Primitives.Boolean.size() + // changedGrid
	Primitives.F32.size() + // far
	Primitives.F32.size() + // aspect
	Primitives.U32.size() + // locomotionState
	Primitives.Quaternion.size() + // headRotation
	Primitives.Quaternion.size() + // bodyRotation
	Primitives.U32.size() + // controlFlags
	Primitives.F32.size() + // energyLevel
	Primitives.U8.size() + // godLevel
	Primitives.Boolean.size() + // alwaysRun
	Primitives.UUID.size() + // preyAgent
	Primitives.U8.size() + // agentAccess
	Primitives.UUID.size() // activeGroupId

// base byte size for one "groupData" entry (fixed-length parameters only)
const GROUP_DATA_BASE_SIZE =
	Primitives.UUID.size() + // groupId
	Primitives.U64.size() + // groupPowers
	Primitives.Boolean.size() // acceptNotices

// base byte size for one "animationData" entry (fixed-length parameters only)
const ANIMATION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // animation
	Primitives.UUID.size() // objectId

// base byte size for one "granterBlock" entry (fixed-length parameters only)
const GRANTER_BLOCK_BASE_SIZE = Primitives.UUID.size() // granterId

// base byte size for one "visualParam" entry (fixed-length parameters only)
const VISUAL_PARAM_BASE_SIZE = Primitives.U8.size() // paramValue

// base byte size for one "agentAccess" entry (fixed-length parameters only)
const AGENT_ACCESS_BASE_SIZE =
	Primitives.U8.size() + // agentLegacyAccess
	Primitives.U8.size() // agentMaxAccess

// base byte size for one "agentInfo" entry (fixed-length parameters only)
const AGENT_INFO_BASE_SIZE = Primitives.U32.size() // flags

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ChildAgentUpdateData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.agentData.throttles)
	size += Primitives.Variable2.size(data.agentData.agentTextures)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += GROUP_DATA_BASE_SIZE * (data.groupData?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += ANIMATION_DATA_BASE_SIZE * (data.animationData?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += GRANTER_BLOCK_BASE_SIZE * (data.granterBlock?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	for (const item of data.nvPairData ?? []) {
		size += Primitives.Variable2.size(item.nvPairs)
	}

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += VISUAL_PARAM_BASE_SIZE * (data.visualParam?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += AGENT_ACCESS_BASE_SIZE * (data.agentAccess?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += AGENT_INFO_BASE_SIZE * (data.agentInfo?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.U64.encode(data.agentData.regionHandle, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.viewerCircuitCode, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.agentPos, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.agentVel, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.center, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.size, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.atAxis, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.leftAxis, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.upAxis, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.changedGrid, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.far, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.aspect, buffer, offset)
	offset = Primitives.Variable1.encode(data.agentData.throttles, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.locomotionState, buffer, offset)
	offset = Primitives.Quaternion.encode(data.agentData.headRotation, buffer, offset)
	offset = Primitives.Quaternion.encode(data.agentData.bodyRotation, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.controlFlags, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.energyLevel, buffer, offset)
	offset = Primitives.U8.encode(data.agentData.godLevel, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.alwaysRun, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.preyAgent, buffer, offset)
	offset = Primitives.U8.encode(data.agentData.agentAccess, buffer, offset)
	offset = Primitives.Variable2.encode(data.agentData.agentTextures, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.activeGroupId, buffer, offset)

	// GroupData
	offset = Primitives.U8.encode(data.groupData?.length ?? 0, buffer, offset)

	for (const item of data.groupData ?? []) {
		offset = Primitives.UUID.encode(item.groupId, buffer, offset)
		offset = Primitives.U64.encode(item.groupPowers, buffer, offset)
		offset = Primitives.Boolean.encode(item.acceptNotices, buffer, offset)
	}

	// AnimationData
	offset = Primitives.U8.encode(data.animationData?.length ?? 0, buffer, offset)

	for (const item of data.animationData ?? []) {
		offset = Primitives.UUID.encode(item.animation, buffer, offset)
		offset = Primitives.UUID.encode(item.objectId, buffer, offset)
	}

	// GranterBlock
	offset = Primitives.U8.encode(data.granterBlock?.length ?? 0, buffer, offset)

	for (const item of data.granterBlock ?? []) {
		offset = Primitives.UUID.encode(item.granterId, buffer, offset)
	}

	// NvPairData
	offset = Primitives.U8.encode(data.nvPairData?.length ?? 0, buffer, offset)

	for (const item of data.nvPairData ?? []) {
		offset = Primitives.Variable2.encode(item.nvPairs, buffer, offset)
	}

	// VisualParam
	offset = Primitives.U8.encode(data.visualParam?.length ?? 0, buffer, offset)

	for (const item of data.visualParam ?? []) {
		offset = Primitives.U8.encode(item.paramValue, buffer, offset)
	}

	// AgentAccess
	offset = Primitives.U8.encode(data.agentAccess?.length ?? 0, buffer, offset)

	for (const item of data.agentAccess ?? []) {
		offset = Primitives.U8.encode(item.agentLegacyAccess, buffer, offset)
		offset = Primitives.U8.encode(item.agentMaxAccess, buffer, offset)
	}

	// AgentInfo
	offset = Primitives.U8.encode(data.agentInfo?.length ?? 0, buffer, offset)

	for (const item of data.agentInfo ?? []) {
		offset = Primitives.U32.encode(item.flags, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ChildAgentUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			regionHandle: Primitives.U64.decode(buffer, state),
			viewerCircuitCode: Primitives.U32.decode(buffer, state),
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			agentPos: Primitives.Vector3.decode(buffer, state),
			agentVel: Primitives.Vector3.decode(buffer, state),
			center: Primitives.Vector3.decode(buffer, state),
			size: Primitives.Vector3.decode(buffer, state),
			atAxis: Primitives.Vector3.decode(buffer, state),
			leftAxis: Primitives.Vector3.decode(buffer, state),
			upAxis: Primitives.Vector3.decode(buffer, state),
			changedGrid: Primitives.Boolean.decode(buffer, state),
			far: Primitives.F32.decode(buffer, state),
			aspect: Primitives.F32.decode(buffer, state),
			throttles: Primitives.Variable1.decode(buffer, state),
			locomotionState: Primitives.U32.decode(buffer, state),
			headRotation: Primitives.Quaternion.decode(buffer, state),
			bodyRotation: Primitives.Quaternion.decode(buffer, state),
			controlFlags: Primitives.U32.decode(buffer, state),
			energyLevel: Primitives.F32.decode(buffer, state),
			godLevel: Primitives.U8.decode(buffer, state),
			alwaysRun: Primitives.Boolean.decode(buffer, state),
			preyAgent: Primitives.UUID.decode(buffer, state),
			agentAccess: Primitives.U8.decode(buffer, state),
			agentTextures: Primitives.Variable2.decode(buffer, state),
			activeGroupId: Primitives.UUID.decode(buffer, state),
		},
		groupData: (() => {
			const items: ChildAgentUpdateData["groupData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					groupId: Primitives.UUID.decode(buffer, state),
					groupPowers: Primitives.U64.decode(buffer, state),
					acceptNotices: Primitives.Boolean.decode(buffer, state),
				})
			}

			return items
		})(),
		animationData: (() => {
			const items: ChildAgentUpdateData["animationData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					animation: Primitives.UUID.decode(buffer, state),
					objectId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
		granterBlock: (() => {
			const items: ChildAgentUpdateData["granterBlock"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					granterId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
		nvPairData: (() => {
			const items: ChildAgentUpdateData["nvPairData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					nvPairs: Primitives.Variable2.decode(buffer, state),
				})
			}

			return items
		})(),
		visualParam: (() => {
			const items: ChildAgentUpdateData["visualParam"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					paramValue: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
		agentAccess: (() => {
			const items: ChildAgentUpdateData["agentAccess"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					agentLegacyAccess: Primitives.U8.decode(buffer, state),
					agentMaxAccess: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
		agentInfo: (() => {
			const items: ChildAgentUpdateData["agentInfo"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					flags: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
