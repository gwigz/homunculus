/**
 * CoarseLocationUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface CoarseLocationUpdateData {
	location: {
		x: number
		y: number
		z: number
	}[]
	index: {
		you: number
		prey: number
	}
	agentData?: {
		agentId?: Types.UUID
	}[]
}

export const id = 6
export const name = "CoarseLocationUpdate"
export const frequency = 1

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "location" entry (fixed-length parameters only)
const LOCATION_BASE_SIZE =
	Primitives.U8.size() + // x
	Primitives.U8.size() + // y
	Primitives.U8.size() // z

// base byte size for one "index" entry (fixed-length parameters only)
const INDEX_BASE_SIZE =
	Primitives.S16.size() + // you
	Primitives.S16.size() // prey

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + INDEX_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<CoarseLocationUpdateData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += LOCATION_BASE_SIZE * (data.location?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += AGENT_DATA_BASE_SIZE * (data.agentData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Location
	offset = Primitives.U8.encode(data.location?.length ?? 0, buffer, offset)

	for (const item of data.location ?? []) {
		offset = Primitives.U8.encode(item.x, buffer, offset)
		offset = Primitives.U8.encode(item.y, buffer, offset)
		offset = Primitives.U8.encode(item.z, buffer, offset)
	}

	// Index
	offset = Primitives.S16.encode(data.index.you, buffer, offset)
	offset = Primitives.S16.encode(data.index.prey, buffer, offset)

	// AgentData
	offset = Primitives.U8.encode(data.agentData?.length ?? 0, buffer, offset)

	for (const item of data.agentData ?? []) {
		offset = Primitives.UUID.encode(item.agentId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): CoarseLocationUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		location: (() => {
			const items: CoarseLocationUpdateData["location"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					x: Primitives.U8.decode(buffer, state),
					y: Primitives.U8.decode(buffer, state),
					z: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
		index: {
			you: Primitives.S16.decode(buffer, state),
			prey: Primitives.S16.decode(buffer, state),
		},
		agentData: (() => {
			const items: CoarseLocationUpdateData["agentData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					agentId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
