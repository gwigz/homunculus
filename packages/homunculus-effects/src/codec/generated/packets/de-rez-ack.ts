/**
 * DeRezAck Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface DeRezAckData {
	transactionData: {
		transactionId: Types.UUID
		success: boolean
	}
}

export const id = 292
export const name = "DeRezAck"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "transactionData" entry (fixed-length parameters only)
const TRANSACTION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // transactionId
	Primitives.Boolean.size() // success

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TRANSACTION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<DeRezAckData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TransactionData
	offset = Primitives.UUID.encode(data.transactionData.transactionId, buffer, offset)
	offset = Primitives.Boolean.encode(data.transactionData.success, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): DeRezAckData {
	const state = { offset: HEADER_SIZE }

	return {
		transactionData: {
			transactionId: Primitives.UUID.decode(buffer, state),
			success: Primitives.Boolean.decode(buffer, state),
		},
	}
}
