/**
 * DirFindQueryBackend Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface DirFindQueryBackendData {
	agentData?: {
		agentId?: Types.UUID
	}
	queryData: {
		queryId: Types.UUID
		queryText: Buffer
		queryFlags: number
		queryStart: number
		estateId: number
		godlike: boolean
	}
}

export const id = 32
export const name = "DirFindQueryBackend"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "queryData" entry (fixed-length parameters only)
const QUERY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // queryId
	Primitives.U32.size() + // queryFlags
	Primitives.S32.size() + // queryStart
	Primitives.U32.size() + // estateId
	Primitives.Boolean.size() // godlike

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + QUERY_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<DirFindQueryBackendData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.queryData.queryText)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// QueryData
	offset = Primitives.UUID.encode(data.queryData.queryId, buffer, offset)
	offset = Primitives.Variable1.encode(data.queryData.queryText, buffer, offset)
	offset = Primitives.U32.encode(data.queryData.queryFlags, buffer, offset)
	offset = Primitives.S32.encode(data.queryData.queryStart, buffer, offset)
	offset = Primitives.U32.encode(data.queryData.estateId, buffer, offset)
	offset = Primitives.Boolean.encode(data.queryData.godlike, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): DirFindQueryBackendData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		queryData: {
			queryId: Primitives.UUID.decode(buffer, state),
			queryText: Primitives.Variable1.decode(buffer, state),
			queryFlags: Primitives.U32.decode(buffer, state),
			queryStart: Primitives.S32.decode(buffer, state),
			estateId: Primitives.U32.decode(buffer, state),
			godlike: Primitives.Boolean.decode(buffer, state),
		},
	}
}
