/**
 * DirPopularReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface DirPopularReplyData {
	agentData?: {
		agentId?: Types.UUID
	}
	queryData: {
		queryId: Types.UUID
	}
	queryReplies: {
		parcelId: Types.UUID
		name: Buffer
		dwell: number
	}[]
}

export const id = 53
export const name = "DirPopularReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "queryData" entry (fixed-length parameters only)
const QUERY_DATA_BASE_SIZE = Primitives.UUID.size() // queryId

// base byte size for one "queryReplies" entry (fixed-length parameters only)
const QUERY_REPLIES_BASE_SIZE =
	Primitives.UUID.size() + // parcelId
	Primitives.F32.size() // dwell

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + QUERY_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<DirPopularReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += QUERY_REPLIES_BASE_SIZE * (data.queryReplies?.length ?? 0)

	for (const item of data.queryReplies ?? []) {
		size += Primitives.Variable1.size(item.name)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// QueryData
	offset = Primitives.UUID.encode(data.queryData.queryId, buffer, offset)

	// QueryReplies
	offset = Primitives.U8.encode(data.queryReplies?.length ?? 0, buffer, offset)

	for (const item of data.queryReplies ?? []) {
		offset = Primitives.UUID.encode(item.parcelId, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
		offset = Primitives.F32.encode(item.dwell, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): DirPopularReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		queryData: {
			queryId: Primitives.UUID.decode(buffer, state),
		},
		queryReplies: (() => {
			const items: DirPopularReplyData["queryReplies"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					parcelId: Primitives.UUID.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
					dwell: Primitives.F32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
