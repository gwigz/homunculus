/**
 * EconomyData Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface EconomyDataData {
	info: {
		objectCapacity: number
		objectCount: number
		priceEnergyUnit: number
		priceObjectClaim: number
		pricePublicObjectDecay: number
		pricePublicObjectDelete: number
		priceParcelClaim: number
		priceParcelClaimFactor: number
		priceUpload: number
		priceRentLight: number
		teleportMinPrice: number
		teleportPriceExponent: number
		energyEfficiency: number
		priceObjectRent: number
		priceObjectScaleFactor: number
		priceParcelRent: number
		priceGroupCreate: number
	}
}

export const id = 25
export const name = "EconomyData"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "info" entry (fixed-length parameters only)
const INFO_BASE_SIZE =
	Primitives.S32.size() + // objectCapacity
	Primitives.S32.size() + // objectCount
	Primitives.S32.size() + // priceEnergyUnit
	Primitives.S32.size() + // priceObjectClaim
	Primitives.S32.size() + // pricePublicObjectDecay
	Primitives.S32.size() + // pricePublicObjectDelete
	Primitives.S32.size() + // priceParcelClaim
	Primitives.F32.size() + // priceParcelClaimFactor
	Primitives.S32.size() + // priceUpload
	Primitives.S32.size() + // priceRentLight
	Primitives.S32.size() + // teleportMinPrice
	Primitives.F32.size() + // teleportPriceExponent
	Primitives.F32.size() + // energyEfficiency
	Primitives.F32.size() + // priceObjectRent
	Primitives.F32.size() + // priceObjectScaleFactor
	Primitives.S32.size() + // priceParcelRent
	Primitives.S32.size() // priceGroupCreate

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<EconomyDataData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Info
	offset = Primitives.S32.encode(data.info.objectCapacity, buffer, offset)
	offset = Primitives.S32.encode(data.info.objectCount, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceEnergyUnit, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceObjectClaim, buffer, offset)
	offset = Primitives.S32.encode(data.info.pricePublicObjectDecay, buffer, offset)
	offset = Primitives.S32.encode(data.info.pricePublicObjectDelete, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceParcelClaim, buffer, offset)
	offset = Primitives.F32.encode(data.info.priceParcelClaimFactor, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceUpload, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceRentLight, buffer, offset)
	offset = Primitives.S32.encode(data.info.teleportMinPrice, buffer, offset)
	offset = Primitives.F32.encode(data.info.teleportPriceExponent, buffer, offset)
	offset = Primitives.F32.encode(data.info.energyEfficiency, buffer, offset)
	offset = Primitives.F32.encode(data.info.priceObjectRent, buffer, offset)
	offset = Primitives.F32.encode(data.info.priceObjectScaleFactor, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceParcelRent, buffer, offset)
	offset = Primitives.S32.encode(data.info.priceGroupCreate, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): EconomyDataData {
	const state = { offset: HEADER_SIZE }

	return {
		info: {
			objectCapacity: Primitives.S32.decode(buffer, state),
			objectCount: Primitives.S32.decode(buffer, state),
			priceEnergyUnit: Primitives.S32.decode(buffer, state),
			priceObjectClaim: Primitives.S32.decode(buffer, state),
			pricePublicObjectDecay: Primitives.S32.decode(buffer, state),
			pricePublicObjectDelete: Primitives.S32.decode(buffer, state),
			priceParcelClaim: Primitives.S32.decode(buffer, state),
			priceParcelClaimFactor: Primitives.F32.decode(buffer, state),
			priceUpload: Primitives.S32.decode(buffer, state),
			priceRentLight: Primitives.S32.decode(buffer, state),
			teleportMinPrice: Primitives.S32.decode(buffer, state),
			teleportPriceExponent: Primitives.F32.decode(buffer, state),
			energyEfficiency: Primitives.F32.decode(buffer, state),
			priceObjectRent: Primitives.F32.decode(buffer, state),
			priceObjectScaleFactor: Primitives.F32.decode(buffer, state),
			priceParcelRent: Primitives.S32.decode(buffer, state),
			priceGroupCreate: Primitives.S32.decode(buffer, state),
		},
	}
}
