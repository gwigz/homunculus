/**
 * EjectGroupMemberReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface EjectGroupMemberReplyData {
	agentData?: {
		agentId?: Types.UUID
	}
	groupData: {
		groupId: Types.UUID
	}
	ejectData: {
		success: boolean
	}
}

export const id = 346
export const name = "EjectGroupMemberReply"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "groupData" entry (fixed-length parameters only)
const GROUP_DATA_BASE_SIZE = Primitives.UUID.size() // groupId

// base byte size for one "ejectData" entry (fixed-length parameters only)
const EJECT_DATA_BASE_SIZE = Primitives.Boolean.size() // success

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + GROUP_DATA_BASE_SIZE + EJECT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<EjectGroupMemberReplyData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// GroupData
	offset = Primitives.UUID.encode(data.groupData.groupId, buffer, offset)

	// EjectData
	offset = Primitives.Boolean.encode(data.ejectData.success, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): EjectGroupMemberReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		groupData: {
			groupId: Primitives.UUID.decode(buffer, state),
		},
		ejectData: {
			success: Primitives.Boolean.decode(buffer, state),
		},
	}
}
