/**
 * EnableSimulator Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface EnableSimulatorData {
	simulatorInfo: {
		handle: number | bigint
		ip: Types.IP
		port: Types.Port
	}
}

export const id = 151
export const name = "EnableSimulator"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "simulatorInfo" entry (fixed-length parameters only)
const SIMULATOR_INFO_BASE_SIZE =
	Primitives.U64.size() + // handle
	Primitives.IP.size() + // ip
	Primitives.Port.size() // port

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SIMULATOR_INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<EnableSimulatorData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// SimulatorInfo
	offset = Primitives.U64.encode(data.simulatorInfo.handle, buffer, offset)
	offset = Primitives.IP.encode(data.simulatorInfo.ip, buffer, offset)
	offset = Primitives.Port.encode(data.simulatorInfo.port, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): EnableSimulatorData {
	const state = { offset: HEADER_SIZE }

	return {
		simulatorInfo: {
			handle: Primitives.U64.decode(buffer, state),
			ip: Primitives.IP.decode(buffer, state),
			port: Primitives.Port.decode(buffer, state),
		},
	}
}
