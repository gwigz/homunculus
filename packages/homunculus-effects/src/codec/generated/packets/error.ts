/**
 * Error Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ErrorData {
	agentData?: {
		agentId?: Types.UUID
	}
	data: {
		code: number
		token: Buffer
		id: Types.UUID
		system: Buffer
		message: Buffer
		data: Buffer
	}
}

export const id = 423
export const name = "Error"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE =
	Primitives.S32.size() + // code
	Primitives.UUID.size() // id

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ErrorData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.data.token)
	size += Primitives.Variable1.size(data.data.system)
	size += Primitives.Variable2.size(data.data.message)
	size += Primitives.Variable2.size(data.data.data)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// Data
	offset = Primitives.S32.encode(data.data.code, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.token, buffer, offset)
	offset = Primitives.UUID.encode(data.data.id, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.system, buffer, offset)
	offset = Primitives.Variable2.encode(data.data.message, buffer, offset)
	offset = Primitives.Variable2.encode(data.data.data, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ErrorData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		data: {
			code: Primitives.S32.decode(buffer, state),
			token: Primitives.Variable1.decode(buffer, state),
			id: Primitives.UUID.decode(buffer, state),
			system: Primitives.Variable1.decode(buffer, state),
			message: Primitives.Variable2.decode(buffer, state),
			data: Primitives.Variable2.decode(buffer, state),
		},
	}
}
