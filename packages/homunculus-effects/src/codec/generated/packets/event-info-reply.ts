/**
 * EventInfoReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface EventInfoReplyData {
	agentData?: {
		agentId?: Types.UUID
	}
	eventData: {
		eventId: number
		creator: Buffer
		name: Buffer
		category: Buffer
		desc: Buffer
		date: Buffer
		dateUtc: number
		duration: number
		cover: number
		amount: number
		simName: Buffer
		globalPos: Types.Vector3
		eventFlags: number
	}
}

export const id = 180
export const name = "EventInfoReply"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "eventData" entry (fixed-length parameters only)
const EVENT_DATA_BASE_SIZE =
	Primitives.U32.size() + // eventId
	Primitives.U32.size() + // dateUtc
	Primitives.U32.size() + // duration
	Primitives.U32.size() + // cover
	Primitives.U32.size() + // amount
	Primitives.Vector3D.size() + // globalPos
	Primitives.U32.size() // eventFlags

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + EVENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<EventInfoReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.eventData.creator)
	size += Primitives.Variable1.size(data.eventData.name)
	size += Primitives.Variable1.size(data.eventData.category)
	size += Primitives.Variable2.size(data.eventData.desc)
	size += Primitives.Variable1.size(data.eventData.date)
	size += Primitives.Variable1.size(data.eventData.simName)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// EventData
	offset = Primitives.U32.encode(data.eventData.eventId, buffer, offset)
	offset = Primitives.Variable1.encode(data.eventData.creator, buffer, offset)
	offset = Primitives.Variable1.encode(data.eventData.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.eventData.category, buffer, offset)
	offset = Primitives.Variable2.encode(data.eventData.desc, buffer, offset)
	offset = Primitives.Variable1.encode(data.eventData.date, buffer, offset)
	offset = Primitives.U32.encode(data.eventData.dateUtc, buffer, offset)
	offset = Primitives.U32.encode(data.eventData.duration, buffer, offset)
	offset = Primitives.U32.encode(data.eventData.cover, buffer, offset)
	offset = Primitives.U32.encode(data.eventData.amount, buffer, offset)
	offset = Primitives.Variable1.encode(data.eventData.simName, buffer, offset)
	offset = Primitives.Vector3D.encode(data.eventData.globalPos, buffer, offset)
	offset = Primitives.U32.encode(data.eventData.eventFlags, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): EventInfoReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		eventData: {
			eventId: Primitives.U32.decode(buffer, state),
			creator: Primitives.Variable1.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			category: Primitives.Variable1.decode(buffer, state),
			desc: Primitives.Variable2.decode(buffer, state),
			date: Primitives.Variable1.decode(buffer, state),
			dateUtc: Primitives.U32.decode(buffer, state),
			duration: Primitives.U32.decode(buffer, state),
			cover: Primitives.U32.decode(buffer, state),
			amount: Primitives.U32.decode(buffer, state),
			simName: Primitives.Variable1.decode(buffer, state),
			globalPos: Primitives.Vector3D.decode(buffer, state),
			eventFlags: Primitives.U32.decode(buffer, state),
		},
	}
}
