/**
 * FindAgent Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface FindAgentData {
	agentBlock: {
		hunter: Types.UUID
		prey: Types.UUID
		spaceIp: Types.IP
	}
	locationBlock: {
		globalX: number
		globalY: number
	}[]
}

export const id = 256
export const name = "FindAgent"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentBlock" entry (fixed-length parameters only)
const AGENT_BLOCK_BASE_SIZE =
	Primitives.UUID.size() + // hunter
	Primitives.UUID.size() + // prey
	Primitives.IP.size() // spaceIp

// base byte size for one "locationBlock" entry (fixed-length parameters only)
const LOCATION_BLOCK_BASE_SIZE =
	Primitives.F64.size() + // globalX
	Primitives.F64.size() // globalY

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_BLOCK_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<FindAgentData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += LOCATION_BLOCK_BASE_SIZE * (data.locationBlock?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentBlock
	offset = Primitives.UUID.encode(data.agentBlock.hunter, buffer, offset)
	offset = Primitives.UUID.encode(data.agentBlock.prey, buffer, offset)
	offset = Primitives.IP.encode(data.agentBlock.spaceIp, buffer, offset)

	// LocationBlock
	offset = Primitives.U8.encode(data.locationBlock?.length ?? 0, buffer, offset)

	for (const item of data.locationBlock ?? []) {
		offset = Primitives.F64.encode(item.globalX, buffer, offset)
		offset = Primitives.F64.encode(item.globalY, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): FindAgentData {
	const state = { offset: HEADER_SIZE }

	return {
		agentBlock: {
			hunter: Primitives.UUID.decode(buffer, state),
			prey: Primitives.UUID.decode(buffer, state),
			spaceIp: Primitives.IP.decode(buffer, state),
		},
		locationBlock: (() => {
			const items: FindAgentData["locationBlock"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					globalX: Primitives.F64.decode(buffer, state),
					globalY: Primitives.F64.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
