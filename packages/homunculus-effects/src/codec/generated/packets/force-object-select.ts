/**
 * ForceObjectSelect Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface ForceObjectSelectData {
	header: {
		resetList: boolean
	}
	data: {
		localId: number
	}[]
}

export const id = 205
export const name = "ForceObjectSelect"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "header" entry (fixed-length parameters only)
const HEADER_BASE_SIZE = Primitives.Boolean.size() // resetList

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE = Primitives.U32.size() // localId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + HEADER_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ForceObjectSelectData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += DATA_BASE_SIZE * (data.data?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Header
	offset = Primitives.Boolean.encode(data.header.resetList, buffer, offset)

	// Data
	offset = Primitives.U8.encode(data.data?.length ?? 0, buffer, offset)

	for (const item of data.data ?? []) {
		offset = Primitives.U32.encode(item.localId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ForceObjectSelectData {
	const state = { offset: HEADER_SIZE }

	return {
		header: {
			resetList: Primitives.Boolean.decode(buffer, state),
		},
		data: (() => {
			const items: ForceObjectSelectData["data"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					localId: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
