/**
 * GroupAccountSummaryReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface GroupAccountSummaryReplyData {
	agentData: {
		agentId?: Types.UUID
		groupId: Types.UUID
	}
	moneyData: {
		requestId: Types.UUID
		intervalDays: number
		currentInterval: number
		startDate: Buffer
		balance: number
		totalCredits: number
		totalDebits: number
		objectTaxCurrent: number
		lightTaxCurrent: number
		landTaxCurrent: number
		groupTaxCurrent: number
		parcelDirFeeCurrent: number
		objectTaxEstimate: number
		lightTaxEstimate: number
		landTaxEstimate: number
		groupTaxEstimate: number
		parcelDirFeeEstimate: number
		nonExemptMembers: number
		lastTaxDate: Buffer
		taxDate: Buffer
	}
}

export const id = 354
export const name = "GroupAccountSummaryReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // groupId

// base byte size for one "moneyData" entry (fixed-length parameters only)
const MONEY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // requestId
	Primitives.S32.size() + // intervalDays
	Primitives.S32.size() + // currentInterval
	Primitives.S32.size() + // balance
	Primitives.S32.size() + // totalCredits
	Primitives.S32.size() + // totalDebits
	Primitives.S32.size() + // objectTaxCurrent
	Primitives.S32.size() + // lightTaxCurrent
	Primitives.S32.size() + // landTaxCurrent
	Primitives.S32.size() + // groupTaxCurrent
	Primitives.S32.size() + // parcelDirFeeCurrent
	Primitives.S32.size() + // objectTaxEstimate
	Primitives.S32.size() + // lightTaxEstimate
	Primitives.S32.size() + // landTaxEstimate
	Primitives.S32.size() + // groupTaxEstimate
	Primitives.S32.size() + // parcelDirFeeEstimate
	Primitives.S32.size() // nonExemptMembers

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + MONEY_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<GroupAccountSummaryReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.moneyData.startDate)
	size += Primitives.Variable1.size(data.moneyData.lastTaxDate)
	size += Primitives.Variable1.size(data.moneyData.taxDate)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)

	// MoneyData
	offset = Primitives.UUID.encode(data.moneyData.requestId, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.intervalDays, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.currentInterval, buffer, offset)
	offset = Primitives.Variable1.encode(data.moneyData.startDate, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.balance, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.totalCredits, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.totalDebits, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.objectTaxCurrent, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.lightTaxCurrent, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.landTaxCurrent, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.groupTaxCurrent, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.parcelDirFeeCurrent, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.objectTaxEstimate, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.lightTaxEstimate, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.landTaxEstimate, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.groupTaxEstimate, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.parcelDirFeeEstimate, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.nonExemptMembers, buffer, offset)
	offset = Primitives.Variable1.encode(data.moneyData.lastTaxDate, buffer, offset)
	offset = Primitives.Variable1.encode(data.moneyData.taxDate, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): GroupAccountSummaryReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
		},
		moneyData: {
			requestId: Primitives.UUID.decode(buffer, state),
			intervalDays: Primitives.S32.decode(buffer, state),
			currentInterval: Primitives.S32.decode(buffer, state),
			startDate: Primitives.Variable1.decode(buffer, state),
			balance: Primitives.S32.decode(buffer, state),
			totalCredits: Primitives.S32.decode(buffer, state),
			totalDebits: Primitives.S32.decode(buffer, state),
			objectTaxCurrent: Primitives.S32.decode(buffer, state),
			lightTaxCurrent: Primitives.S32.decode(buffer, state),
			landTaxCurrent: Primitives.S32.decode(buffer, state),
			groupTaxCurrent: Primitives.S32.decode(buffer, state),
			parcelDirFeeCurrent: Primitives.S32.decode(buffer, state),
			objectTaxEstimate: Primitives.S32.decode(buffer, state),
			lightTaxEstimate: Primitives.S32.decode(buffer, state),
			landTaxEstimate: Primitives.S32.decode(buffer, state),
			groupTaxEstimate: Primitives.S32.decode(buffer, state),
			parcelDirFeeEstimate: Primitives.S32.decode(buffer, state),
			nonExemptMembers: Primitives.S32.decode(buffer, state),
			lastTaxDate: Primitives.Variable1.decode(buffer, state),
			taxDate: Primitives.Variable1.decode(buffer, state),
		},
	}
}
