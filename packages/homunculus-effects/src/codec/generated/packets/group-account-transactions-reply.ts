/**
 * GroupAccountTransactionsReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface GroupAccountTransactionsReplyData {
	agentData: {
		agentId?: Types.UUID
		groupId: Types.UUID
	}
	moneyData: {
		requestId: Types.UUID
		intervalDays: number
		currentInterval: number
		startDate: Buffer
	}
	historyData: {
		time: Buffer
		user: Buffer
		type: number
		item: Buffer
		amount: number
	}[]
}

export const id = 358
export const name = "GroupAccountTransactionsReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // groupId

// base byte size for one "moneyData" entry (fixed-length parameters only)
const MONEY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // requestId
	Primitives.S32.size() + // intervalDays
	Primitives.S32.size() // currentInterval

// base byte size for one "historyData" entry (fixed-length parameters only)
const HISTORY_DATA_BASE_SIZE =
	Primitives.S32.size() + // type
	Primitives.S32.size() // amount

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + MONEY_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<GroupAccountTransactionsReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.moneyData.startDate)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += HISTORY_DATA_BASE_SIZE * (data.historyData?.length ?? 0)

	for (const item of data.historyData ?? []) {
		size += Primitives.Variable1.size(item.time)
		size += Primitives.Variable1.size(item.user)
		size += Primitives.Variable1.size(item.item)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)

	// MoneyData
	offset = Primitives.UUID.encode(data.moneyData.requestId, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.intervalDays, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.currentInterval, buffer, offset)
	offset = Primitives.Variable1.encode(data.moneyData.startDate, buffer, offset)

	// HistoryData
	offset = Primitives.U8.encode(data.historyData?.length ?? 0, buffer, offset)

	for (const item of data.historyData ?? []) {
		offset = Primitives.Variable1.encode(item.time, buffer, offset)
		offset = Primitives.Variable1.encode(item.user, buffer, offset)
		offset = Primitives.S32.encode(item.type, buffer, offset)
		offset = Primitives.Variable1.encode(item.item, buffer, offset)
		offset = Primitives.S32.encode(item.amount, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): GroupAccountTransactionsReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
		},
		moneyData: {
			requestId: Primitives.UUID.decode(buffer, state),
			intervalDays: Primitives.S32.decode(buffer, state),
			currentInterval: Primitives.S32.decode(buffer, state),
			startDate: Primitives.Variable1.decode(buffer, state),
		},
		historyData: (() => {
			const items: GroupAccountTransactionsReplyData["historyData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					time: Primitives.Variable1.decode(buffer, state),
					user: Primitives.Variable1.decode(buffer, state),
					type: Primitives.S32.decode(buffer, state),
					item: Primitives.Variable1.decode(buffer, state),
					amount: Primitives.S32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
