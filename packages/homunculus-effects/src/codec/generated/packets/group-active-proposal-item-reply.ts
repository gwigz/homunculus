/**
 * GroupActiveProposalItemReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface GroupActiveProposalItemReplyData {
	agentData: {
		agentId?: Types.UUID
		groupId: Types.UUID
	}
	transactionData: {
		transactionId: Types.UUID
		totalNumItems: number
	}
	proposalData: {
		voteId: Types.UUID
		voteInitiator: Types.UUID
		terseDateId: Buffer
		startDateTime: Buffer
		endDateTime: Buffer
		alreadyVoted: boolean
		voteCast: Buffer
		majority: number
		quorum: number
		proposalText: Buffer
	}[]
}

export const id = 360
export const name = "GroupActiveProposalItemReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // groupId

// base byte size for one "transactionData" entry (fixed-length parameters only)
const TRANSACTION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // transactionId
	Primitives.U32.size() // totalNumItems

// base byte size for one "proposalData" entry (fixed-length parameters only)
const PROPOSAL_DATA_BASE_SIZE =
	Primitives.UUID.size() + // voteId
	Primitives.UUID.size() + // voteInitiator
	Primitives.Boolean.size() + // alreadyVoted
	Primitives.F32.size() + // majority
	Primitives.S32.size() // quorum

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + TRANSACTION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<GroupActiveProposalItemReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += PROPOSAL_DATA_BASE_SIZE * (data.proposalData?.length ?? 0)

	for (const item of data.proposalData ?? []) {
		size += Primitives.Variable1.size(item.terseDateId)
		size += Primitives.Variable1.size(item.startDateTime)
		size += Primitives.Variable1.size(item.endDateTime)
		size += Primitives.Variable1.size(item.voteCast)
		size += Primitives.Variable1.size(item.proposalText)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)

	// TransactionData
	offset = Primitives.UUID.encode(data.transactionData.transactionId, buffer, offset)
	offset = Primitives.U32.encode(data.transactionData.totalNumItems, buffer, offset)

	// ProposalData
	offset = Primitives.U8.encode(data.proposalData?.length ?? 0, buffer, offset)

	for (const item of data.proposalData ?? []) {
		offset = Primitives.UUID.encode(item.voteId, buffer, offset)
		offset = Primitives.UUID.encode(item.voteInitiator, buffer, offset)
		offset = Primitives.Variable1.encode(item.terseDateId, buffer, offset)
		offset = Primitives.Variable1.encode(item.startDateTime, buffer, offset)
		offset = Primitives.Variable1.encode(item.endDateTime, buffer, offset)
		offset = Primitives.Boolean.encode(item.alreadyVoted, buffer, offset)
		offset = Primitives.Variable1.encode(item.voteCast, buffer, offset)
		offset = Primitives.F32.encode(item.majority, buffer, offset)
		offset = Primitives.S32.encode(item.quorum, buffer, offset)
		offset = Primitives.Variable1.encode(item.proposalText, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): GroupActiveProposalItemReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
		},
		transactionData: {
			transactionId: Primitives.UUID.decode(buffer, state),
			totalNumItems: Primitives.U32.decode(buffer, state),
		},
		proposalData: (() => {
			const items: GroupActiveProposalItemReplyData["proposalData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					voteId: Primitives.UUID.decode(buffer, state),
					voteInitiator: Primitives.UUID.decode(buffer, state),
					terseDateId: Primitives.Variable1.decode(buffer, state),
					startDateTime: Primitives.Variable1.decode(buffer, state),
					endDateTime: Primitives.Variable1.decode(buffer, state),
					alreadyVoted: Primitives.Boolean.decode(buffer, state),
					voteCast: Primitives.Variable1.decode(buffer, state),
					majority: Primitives.F32.decode(buffer, state),
					quorum: Primitives.S32.decode(buffer, state),
					proposalText: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
