/**
 * GroupProfileReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface GroupProfileReplyData {
	agentData?: {
		agentId?: Types.UUID
	}
	groupData: {
		groupId: Types.UUID
		name: Buffer
		charter: Buffer
		showInList: boolean
		memberTitle: Buffer
		powersMask: number | bigint
		insigniaId: Types.UUID
		founderId: Types.UUID
		membershipFee: number
		openEnrollment: boolean
		money: number
		groupMembershipCount: number
		groupRolesCount: number
		allowPublish: boolean
		maturePublish: boolean
		ownerRole: Types.UUID
	}
}

export const id = 352
export const name = "GroupProfileReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "groupData" entry (fixed-length parameters only)
const GROUP_DATA_BASE_SIZE =
	Primitives.UUID.size() + // groupId
	Primitives.Boolean.size() + // showInList
	Primitives.U64.size() + // powersMask
	Primitives.UUID.size() + // insigniaId
	Primitives.UUID.size() + // founderId
	Primitives.S32.size() + // membershipFee
	Primitives.Boolean.size() + // openEnrollment
	Primitives.S32.size() + // money
	Primitives.S32.size() + // groupMembershipCount
	Primitives.S32.size() + // groupRolesCount
	Primitives.Boolean.size() + // allowPublish
	Primitives.Boolean.size() + // maturePublish
	Primitives.UUID.size() // ownerRole

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + GROUP_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<GroupProfileReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.groupData.name)
	size += Primitives.Variable2.size(data.groupData.charter)
	size += Primitives.Variable1.size(data.groupData.memberTitle)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// GroupData
	offset = Primitives.UUID.encode(data.groupData.groupId, buffer, offset)
	offset = Primitives.Variable1.encode(data.groupData.name, buffer, offset)
	offset = Primitives.Variable2.encode(data.groupData.charter, buffer, offset)
	offset = Primitives.Boolean.encode(data.groupData.showInList, buffer, offset)
	offset = Primitives.Variable1.encode(data.groupData.memberTitle, buffer, offset)
	offset = Primitives.U64.encode(data.groupData.powersMask, buffer, offset)
	offset = Primitives.UUID.encode(data.groupData.insigniaId, buffer, offset)
	offset = Primitives.UUID.encode(data.groupData.founderId, buffer, offset)
	offset = Primitives.S32.encode(data.groupData.membershipFee, buffer, offset)
	offset = Primitives.Boolean.encode(data.groupData.openEnrollment, buffer, offset)
	offset = Primitives.S32.encode(data.groupData.money, buffer, offset)
	offset = Primitives.S32.encode(data.groupData.groupMembershipCount, buffer, offset)
	offset = Primitives.S32.encode(data.groupData.groupRolesCount, buffer, offset)
	offset = Primitives.Boolean.encode(data.groupData.allowPublish, buffer, offset)
	offset = Primitives.Boolean.encode(data.groupData.maturePublish, buffer, offset)
	offset = Primitives.UUID.encode(data.groupData.ownerRole, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): GroupProfileReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		groupData: {
			groupId: Primitives.UUID.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			charter: Primitives.Variable2.decode(buffer, state),
			showInList: Primitives.Boolean.decode(buffer, state),
			memberTitle: Primitives.Variable1.decode(buffer, state),
			powersMask: Primitives.U64.decode(buffer, state),
			insigniaId: Primitives.UUID.decode(buffer, state),
			founderId: Primitives.UUID.decode(buffer, state),
			membershipFee: Primitives.S32.decode(buffer, state),
			openEnrollment: Primitives.Boolean.decode(buffer, state),
			money: Primitives.S32.decode(buffer, state),
			groupMembershipCount: Primitives.S32.decode(buffer, state),
			groupRolesCount: Primitives.S32.decode(buffer, state),
			allowPublish: Primitives.Boolean.decode(buffer, state),
			maturePublish: Primitives.Boolean.decode(buffer, state),
			ownerRole: Primitives.UUID.decode(buffer, state),
		},
	}
}
