/**
 * GroupVoteHistoryItemReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface GroupVoteHistoryItemReplyData {
	agentData: {
		agentId?: Types.UUID
		groupId: Types.UUID
	}
	transactionData: {
		transactionId: Types.UUID
		totalNumItems: number
	}
	historyItemData: {
		voteId: Types.UUID
		terseDateId: Buffer
		startDateTime: Buffer
		endDateTime: Buffer
		voteInitiator: Types.UUID
		voteType: Buffer
		voteResult: Buffer
		majority: number
		quorum: number
		proposalText: Buffer
	}
	voteItem: {
		candidateId: Types.UUID
		voteCast: Buffer
		numVotes: number
	}[]
}

export const id = 362
export const name = "GroupVoteHistoryItemReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // groupId

// base byte size for one "transactionData" entry (fixed-length parameters only)
const TRANSACTION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // transactionId
	Primitives.U32.size() // totalNumItems

// base byte size for one "historyItemData" entry (fixed-length parameters only)
const HISTORY_ITEM_DATA_BASE_SIZE =
	Primitives.UUID.size() + // voteId
	Primitives.UUID.size() + // voteInitiator
	Primitives.F32.size() + // majority
	Primitives.S32.size() // quorum

// base byte size for one "voteItem" entry (fixed-length parameters only)
const VOTE_ITEM_BASE_SIZE =
	Primitives.UUID.size() + // candidateId
	Primitives.S32.size() // numVotes

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + TRANSACTION_DATA_BASE_SIZE + HISTORY_ITEM_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<GroupVoteHistoryItemReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.historyItemData.terseDateId)
	size += Primitives.Variable1.size(data.historyItemData.startDateTime)
	size += Primitives.Variable1.size(data.historyItemData.endDateTime)
	size += Primitives.Variable1.size(data.historyItemData.voteType)
	size += Primitives.Variable1.size(data.historyItemData.voteResult)
	size += Primitives.Variable2.size(data.historyItemData.proposalText)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += VOTE_ITEM_BASE_SIZE * (data.voteItem?.length ?? 0)

	for (const item of data.voteItem ?? []) {
		size += Primitives.Variable1.size(item.voteCast)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)

	// TransactionData
	offset = Primitives.UUID.encode(data.transactionData.transactionId, buffer, offset)
	offset = Primitives.U32.encode(data.transactionData.totalNumItems, buffer, offset)

	// HistoryItemData
	offset = Primitives.UUID.encode(data.historyItemData.voteId, buffer, offset)
	offset = Primitives.Variable1.encode(data.historyItemData.terseDateId, buffer, offset)
	offset = Primitives.Variable1.encode(data.historyItemData.startDateTime, buffer, offset)
	offset = Primitives.Variable1.encode(data.historyItemData.endDateTime, buffer, offset)
	offset = Primitives.UUID.encode(data.historyItemData.voteInitiator, buffer, offset)
	offset = Primitives.Variable1.encode(data.historyItemData.voteType, buffer, offset)
	offset = Primitives.Variable1.encode(data.historyItemData.voteResult, buffer, offset)
	offset = Primitives.F32.encode(data.historyItemData.majority, buffer, offset)
	offset = Primitives.S32.encode(data.historyItemData.quorum, buffer, offset)
	offset = Primitives.Variable2.encode(data.historyItemData.proposalText, buffer, offset)

	// VoteItem
	offset = Primitives.U8.encode(data.voteItem?.length ?? 0, buffer, offset)

	for (const item of data.voteItem ?? []) {
		offset = Primitives.UUID.encode(item.candidateId, buffer, offset)
		offset = Primitives.Variable1.encode(item.voteCast, buffer, offset)
		offset = Primitives.S32.encode(item.numVotes, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): GroupVoteHistoryItemReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
		},
		transactionData: {
			transactionId: Primitives.UUID.decode(buffer, state),
			totalNumItems: Primitives.U32.decode(buffer, state),
		},
		historyItemData: {
			voteId: Primitives.UUID.decode(buffer, state),
			terseDateId: Primitives.Variable1.decode(buffer, state),
			startDateTime: Primitives.Variable1.decode(buffer, state),
			endDateTime: Primitives.Variable1.decode(buffer, state),
			voteInitiator: Primitives.UUID.decode(buffer, state),
			voteType: Primitives.Variable1.decode(buffer, state),
			voteResult: Primitives.Variable1.decode(buffer, state),
			majority: Primitives.F32.decode(buffer, state),
			quorum: Primitives.S32.decode(buffer, state),
			proposalText: Primitives.Variable2.decode(buffer, state),
		},
		voteItem: (() => {
			const items: GroupVoteHistoryItemReplyData["voteItem"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					candidateId: Primitives.UUID.decode(buffer, state),
					voteCast: Primitives.Variable1.decode(buffer, state),
					numVotes: Primitives.S32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
