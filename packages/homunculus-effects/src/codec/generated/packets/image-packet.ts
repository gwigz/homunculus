/**
 * ImagePacket Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ImagePacketData {
	imageId: {
		id: Types.UUID
		packet: number
	}
	imageData: {
		data: Buffer
	}
}

export const id = 10
export const name = "ImagePacket"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "imageId" entry (fixed-length parameters only)
const IMAGE_ID_BASE_SIZE =
	Primitives.UUID.size() + // id
	Primitives.U16.size() // packet

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + IMAGE_ID_BASE_SIZE + IMAGE_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ImagePacketData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.imageData.data)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ImageId
	offset = Primitives.UUID.encode(data.imageId.id, buffer, offset)
	offset = Primitives.U16.encode(data.imageId.packet, buffer, offset)

	// ImageData
	offset = Primitives.Variable2.encode(data.imageData.data, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ImagePacketData {
	const state = { offset: HEADER_SIZE }

	return {
		imageId: {
			id: Primitives.UUID.decode(buffer, state),
			packet: Primitives.U16.decode(buffer, state),
		},
		imageData: {
			data: Primitives.Variable2.decode(buffer, state),
		},
	}
}
