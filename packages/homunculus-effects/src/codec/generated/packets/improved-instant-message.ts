/**
 * ImprovedInstantMessage Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ImprovedInstantMessageData {
	agentData: {
		agentId: Types.UUID
		sessionId: Types.UUID
	}

	messageBlock: {
		fromGroup: boolean
		toAgentId: Types.UUID
		parentEstateId: number
		regionId: Types.UUID
		position: Types.Vector3
		offline: number
		dialog: number
		id: Types.UUID
		timestamp: number
		fromAgentName: Buffer
		message: Buffer
		binaryBucket: Buffer
	}
}

export const id = 254
export const name = "ImprovedInstantMessage"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

const BASE_SIZE =
	// Header
	HEADER_SIZE +
	// AgentData
	Primitives.UUID.size() * 2 + // agentId, sessionId
	// MessageBlock
	Primitives.Boolean.size() + // fromGroup
	Primitives.UUID.size() + // toAgentId
	Primitives.U32.size() + // parentEstateId
	Primitives.UUID.size() + // regionId
	Primitives.Vector3.size() + // position
	Primitives.U8.size() + // offline
	Primitives.U8.size() + // dialog
	Primitives.UUID.size() + // id
	Primitives.U32.size() // timestamp

export function encode(sequence: number, reliable: boolean, data: ImprovedInstantMessageData) {
	const size =
		BASE_SIZE +
		Primitives.Variable1.size(data.messageBlock.fromAgentName) + // fromAgentName
		Primitives.Variable2.size(data.messageBlock.message) + // message
		Primitives.Variable2.size(data.messageBlock.binaryBucket) // binaryBucket

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// MessageBlock
	offset = Primitives.Boolean.encode(data.messageBlock.fromGroup, buffer, offset)
	offset = Primitives.UUID.encode(data.messageBlock.toAgentId, buffer, offset)
	offset = Primitives.U32.encode(data.messageBlock.parentEstateId, buffer, offset)
	offset = Primitives.UUID.encode(data.messageBlock.regionId, buffer, offset)
	offset = Primitives.Vector3.encode(data.messageBlock.position, buffer, offset)
	offset = Primitives.U8.encode(data.messageBlock.offline, buffer, offset)
	offset = Primitives.U8.encode(data.messageBlock.dialog, buffer, offset)
	offset = Primitives.UUID.encode(data.messageBlock.id, buffer, offset)
	offset = Primitives.U32.encode(data.messageBlock.timestamp, buffer, offset)
	offset = Primitives.Variable1.encode(data.messageBlock.fromAgentName, buffer, offset)
	offset = Primitives.Variable2.encode(data.messageBlock.message, buffer, offset)
	offset = Primitives.Variable2.encode(data.messageBlock.binaryBucket, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer) {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		messageBlock: {
			fromGroup: Primitives.Boolean.decode(buffer, state),
			toAgentId: Primitives.UUID.decode(buffer, state),
			parentEstateId: Primitives.U32.decode(buffer, state),
			regionId: Primitives.UUID.decode(buffer, state),
			position: Primitives.Vector3.decode(buffer, state),
			offline: Primitives.U8.decode(buffer, state),
			dialog: Primitives.U8.decode(buffer, state),
			id: Primitives.UUID.decode(buffer, state),
			timestamp: Primitives.U32.decode(buffer, state),
			fromAgentName: Primitives.Variable1.decode(buffer, state),
			message: Primitives.Variable2.decode(buffer, state),
			binaryBucket: Primitives.Variable2.decode(buffer, state),
		},
	}
}
