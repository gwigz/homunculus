/**
 * ImprovedTerseObjectUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface ImprovedTerseObjectUpdateData {
	regionData: {
		regionHandle: number | bigint
		timeDilation: number
	}
	objectData: {
		data: Buffer
		textureEntry: Buffer
	}[]
}

export const id = 15
export const name = "ImprovedTerseObjectUpdate"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "regionData" entry (fixed-length parameters only)
const REGION_DATA_BASE_SIZE =
	Primitives.U64.size() + // regionHandle
	Primitives.U16.size() // timeDilation

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REGION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ImprovedTerseObjectUpdateData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	for (const item of data.objectData ?? []) {
		size += Primitives.Variable1.size(item.data)
		size += Primitives.Variable2.size(item.textureEntry)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// RegionData
	offset = Primitives.U64.encode(data.regionData.regionHandle, buffer, offset)
	offset = Primitives.U16.encode(data.regionData.timeDilation, buffer, offset)

	// ObjectData
	offset = Primitives.U8.encode(data.objectData?.length ?? 0, buffer, offset)

	for (const item of data.objectData ?? []) {
		offset = Primitives.Variable1.encode(item.data, buffer, offset)
		offset = Primitives.Variable2.encode(item.textureEntry, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ImprovedTerseObjectUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		regionData: {
			regionHandle: Primitives.U64.decode(buffer, state),
			timeDilation: Primitives.U16.decode(buffer, state),
		},
		objectData: (() => {
			const items: ImprovedTerseObjectUpdateData["objectData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					data: Primitives.Variable1.decode(buffer, state),
					textureEntry: Primitives.Variable2.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
