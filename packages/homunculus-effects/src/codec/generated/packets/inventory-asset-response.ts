/**
 * InventoryAssetResponse Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface InventoryAssetResponseData {
	queryData: {
		queryId: Types.UUID
		assetId: Types.UUID
		isReadable: boolean
	}
}

export const id = 283
export const name = "InventoryAssetResponse"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "queryData" entry (fixed-length parameters only)
const QUERY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // queryId
	Primitives.UUID.size() + // assetId
	Primitives.Boolean.size() // isReadable

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + QUERY_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<InventoryAssetResponseData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// QueryData
	offset = Primitives.UUID.encode(data.queryData.queryId, buffer, offset)
	offset = Primitives.UUID.encode(data.queryData.assetId, buffer, offset)
	offset = Primitives.Boolean.encode(data.queryData.isReadable, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): InventoryAssetResponseData {
	const state = { offset: HEADER_SIZE }

	return {
		queryData: {
			queryId: Primitives.UUID.decode(buffer, state),
			assetId: Primitives.UUID.decode(buffer, state),
			isReadable: Primitives.Boolean.decode(buffer, state),
		},
	}
}
