/**
 * InventoryDescendents Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface InventoryDescendentsData {
	agentData: {
		agentId?: Types.UUID
		folderId: Types.UUID
		ownerId: Types.UUID
		version: number
		descendents: number
	}
	folderData: {
		folderId: Types.UUID
		parentId: Types.UUID
		type: number
		name: Buffer
	}[]
	itemData: {
		itemId: Types.UUID
		folderId: Types.UUID
		creatorId: Types.UUID
		ownerId: Types.UUID
		groupId: Types.UUID
		baseMask: number
		ownerMask: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
		groupOwned: boolean
		assetId: Types.UUID
		type: number
		invType: number
		flags: number
		saleType: number
		salePrice: number
		name: Buffer
		description: Buffer
		creationDate: number
		crc: number
	}[]
}

export const id = 278
export const name = "InventoryDescendents"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // folderId
	Primitives.UUID.size() + // ownerId
	Primitives.S32.size() + // version
	Primitives.S32.size() // descendents

// base byte size for one "folderData" entry (fixed-length parameters only)
const FOLDER_DATA_BASE_SIZE =
	Primitives.UUID.size() + // folderId
	Primitives.UUID.size() + // parentId
	Primitives.S8.size() // type

// base byte size for one "itemData" entry (fixed-length parameters only)
const ITEM_DATA_BASE_SIZE =
	Primitives.UUID.size() + // itemId
	Primitives.UUID.size() + // folderId
	Primitives.UUID.size() + // creatorId
	Primitives.UUID.size() + // ownerId
	Primitives.UUID.size() + // groupId
	Primitives.U32.size() + // baseMask
	Primitives.U32.size() + // ownerMask
	Primitives.U32.size() + // groupMask
	Primitives.U32.size() + // everyoneMask
	Primitives.U32.size() + // nextOwnerMask
	Primitives.Boolean.size() + // groupOwned
	Primitives.UUID.size() + // assetId
	Primitives.S8.size() + // type
	Primitives.S8.size() + // invType
	Primitives.U32.size() + // flags
	Primitives.U8.size() + // saleType
	Primitives.S32.size() + // salePrice
	Primitives.S32.size() + // creationDate
	Primitives.U32.size() // crc

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<InventoryDescendentsData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += FOLDER_DATA_BASE_SIZE * (data.folderData?.length ?? 0)

	for (const item of data.folderData ?? []) {
		size += Primitives.Variable1.size(item.name)
	}

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += ITEM_DATA_BASE_SIZE * (data.itemData?.length ?? 0)

	for (const item of data.itemData ?? []) {
		size += Primitives.Variable1.size(item.name)
		size += Primitives.Variable1.size(item.description)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.folderId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.ownerId, buffer, offset)
	offset = Primitives.S32.encode(data.agentData.version, buffer, offset)
	offset = Primitives.S32.encode(data.agentData.descendents, buffer, offset)

	// FolderData
	offset = Primitives.U8.encode(data.folderData?.length ?? 0, buffer, offset)

	for (const item of data.folderData ?? []) {
		offset = Primitives.UUID.encode(item.folderId, buffer, offset)
		offset = Primitives.UUID.encode(item.parentId, buffer, offset)
		offset = Primitives.S8.encode(item.type, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
	}

	// ItemData
	offset = Primitives.U8.encode(data.itemData?.length ?? 0, buffer, offset)

	for (const item of data.itemData ?? []) {
		offset = Primitives.UUID.encode(item.itemId, buffer, offset)
		offset = Primitives.UUID.encode(item.folderId, buffer, offset)
		offset = Primitives.UUID.encode(item.creatorId, buffer, offset)
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
		offset = Primitives.UUID.encode(item.groupId, buffer, offset)
		offset = Primitives.U32.encode(item.baseMask, buffer, offset)
		offset = Primitives.U32.encode(item.ownerMask, buffer, offset)
		offset = Primitives.U32.encode(item.groupMask, buffer, offset)
		offset = Primitives.U32.encode(item.everyoneMask, buffer, offset)
		offset = Primitives.U32.encode(item.nextOwnerMask, buffer, offset)
		offset = Primitives.Boolean.encode(item.groupOwned, buffer, offset)
		offset = Primitives.UUID.encode(item.assetId, buffer, offset)
		offset = Primitives.S8.encode(item.type, buffer, offset)
		offset = Primitives.S8.encode(item.invType, buffer, offset)
		offset = Primitives.U32.encode(item.flags, buffer, offset)
		offset = Primitives.U8.encode(item.saleType, buffer, offset)
		offset = Primitives.S32.encode(item.salePrice, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
		offset = Primitives.Variable1.encode(item.description, buffer, offset)
		offset = Primitives.S32.encode(item.creationDate, buffer, offset)
		offset = Primitives.U32.encode(item.crc, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): InventoryDescendentsData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			folderId: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			version: Primitives.S32.decode(buffer, state),
			descendents: Primitives.S32.decode(buffer, state),
		},
		folderData: (() => {
			const items: InventoryDescendentsData["folderData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					folderId: Primitives.UUID.decode(buffer, state),
					parentId: Primitives.UUID.decode(buffer, state),
					type: Primitives.S8.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
		itemData: (() => {
			const items: InventoryDescendentsData["itemData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					itemId: Primitives.UUID.decode(buffer, state),
					folderId: Primitives.UUID.decode(buffer, state),
					creatorId: Primitives.UUID.decode(buffer, state),
					ownerId: Primitives.UUID.decode(buffer, state),
					groupId: Primitives.UUID.decode(buffer, state),
					baseMask: Primitives.U32.decode(buffer, state),
					ownerMask: Primitives.U32.decode(buffer, state),
					groupMask: Primitives.U32.decode(buffer, state),
					everyoneMask: Primitives.U32.decode(buffer, state),
					nextOwnerMask: Primitives.U32.decode(buffer, state),
					groupOwned: Primitives.Boolean.decode(buffer, state),
					assetId: Primitives.UUID.decode(buffer, state),
					type: Primitives.S8.decode(buffer, state),
					invType: Primitives.S8.decode(buffer, state),
					flags: Primitives.U32.decode(buffer, state),
					saleType: Primitives.U8.decode(buffer, state),
					salePrice: Primitives.S32.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
					description: Primitives.Variable1.decode(buffer, state),
					creationDate: Primitives.S32.decode(buffer, state),
					crc: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
