/**
 * KickUser Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface KickUserData {
	targetBlock: {
		targetIp: Types.IP
		targetPort: Types.Port
	}
	userInfo: {
		agentId: Types.UUID
		sessionId: Types.UUID
		reason: Buffer
	}
}

export const id = 163
export const name = "KickUser"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "targetBlock" entry (fixed-length parameters only)
const TARGET_BLOCK_BASE_SIZE =
	Primitives.IP.size() + // targetIp
	Primitives.Port.size() // targetPort

// base byte size for one "userInfo" entry (fixed-length parameters only)
const USER_INFO_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TARGET_BLOCK_BASE_SIZE + USER_INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<KickUserData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.userInfo.reason)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TargetBlock
	offset = Primitives.IP.encode(data.targetBlock.targetIp, buffer, offset)
	offset = Primitives.Port.encode(data.targetBlock.targetPort, buffer, offset)

	// UserInfo
	offset = Primitives.UUID.encode(data.userInfo.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.userInfo.sessionId, buffer, offset)
	offset = Primitives.Variable2.encode(data.userInfo.reason, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): KickUserData {
	const state = { offset: HEADER_SIZE }

	return {
		targetBlock: {
			targetIp: Primitives.IP.decode(buffer, state),
			targetPort: Primitives.Port.decode(buffer, state),
		},
		userInfo: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			reason: Primitives.Variable2.decode(buffer, state),
		},
	}
}
