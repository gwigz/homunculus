/**
 * LandStatReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface LandStatReplyData {
	requestData: {
		reportType: number
		requestFlags: number
		totalObjectCount: number
	}
	reportData: {
		taskLocalId: number
		taskId: Types.UUID
		locationX: number
		locationY: number
		locationZ: number
		score: number
		taskName: Buffer
		ownerName: Buffer
	}[]
}

export const id = 422
export const name = "LandStatReply"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "requestData" entry (fixed-length parameters only)
const REQUEST_DATA_BASE_SIZE =
	Primitives.U32.size() + // reportType
	Primitives.U32.size() + // requestFlags
	Primitives.U32.size() // totalObjectCount

// base byte size for one "reportData" entry (fixed-length parameters only)
const REPORT_DATA_BASE_SIZE =
	Primitives.U32.size() + // taskLocalId
	Primitives.UUID.size() + // taskId
	Primitives.F32.size() + // locationX
	Primitives.F32.size() + // locationY
	Primitives.F32.size() + // locationZ
	Primitives.F32.size() // score

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REQUEST_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<LandStatReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += REPORT_DATA_BASE_SIZE * (data.reportData?.length ?? 0)

	for (const item of data.reportData ?? []) {
		size += Primitives.Variable1.size(item.taskName)
		size += Primitives.Variable1.size(item.ownerName)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// RequestData
	offset = Primitives.U32.encode(data.requestData.reportType, buffer, offset)
	offset = Primitives.U32.encode(data.requestData.requestFlags, buffer, offset)
	offset = Primitives.U32.encode(data.requestData.totalObjectCount, buffer, offset)

	// ReportData
	offset = Primitives.U8.encode(data.reportData?.length ?? 0, buffer, offset)

	for (const item of data.reportData ?? []) {
		offset = Primitives.U32.encode(item.taskLocalId, buffer, offset)
		offset = Primitives.UUID.encode(item.taskId, buffer, offset)
		offset = Primitives.F32.encode(item.locationX, buffer, offset)
		offset = Primitives.F32.encode(item.locationY, buffer, offset)
		offset = Primitives.F32.encode(item.locationZ, buffer, offset)
		offset = Primitives.F32.encode(item.score, buffer, offset)
		offset = Primitives.Variable1.encode(item.taskName, buffer, offset)
		offset = Primitives.Variable1.encode(item.ownerName, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): LandStatReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		requestData: {
			reportType: Primitives.U32.decode(buffer, state),
			requestFlags: Primitives.U32.decode(buffer, state),
			totalObjectCount: Primitives.U32.decode(buffer, state),
		},
		reportData: (() => {
			const items: LandStatReplyData["reportData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					taskLocalId: Primitives.U32.decode(buffer, state),
					taskId: Primitives.UUID.decode(buffer, state),
					locationX: Primitives.F32.decode(buffer, state),
					locationY: Primitives.F32.decode(buffer, state),
					locationZ: Primitives.F32.decode(buffer, state),
					score: Primitives.F32.decode(buffer, state),
					taskName: Primitives.Variable1.decode(buffer, state),
					ownerName: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
