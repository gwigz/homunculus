/**
 * LayerData Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface LayerDataData {
	layerId: {
		type: number
	}
	layerData: {
		data: Buffer
	}
}

export const id = 11
export const name = "LayerData"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "layerId" entry (fixed-length parameters only)
const LAYER_ID_BASE_SIZE = Primitives.U8.size() // type

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + LAYER_ID_BASE_SIZE + LAYER_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<LayerDataData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.layerData.data)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// LayerId
	offset = Primitives.U8.encode(data.layerId.type, buffer, offset)

	// LayerData
	offset = Primitives.Variable2.encode(data.layerData.data, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): LayerDataData {
	const state = { offset: HEADER_SIZE }

	return {
		layerId: {
			type: Primitives.U8.decode(buffer, state),
		},
		layerData: {
			data: Primitives.Variable2.decode(buffer, state),
		},
	}
}
