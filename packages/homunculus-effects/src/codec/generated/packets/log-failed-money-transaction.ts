/**
 * LogFailedMoneyTransaction Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface LogFailedMoneyTransactionData {
	transactionData: {
		transactionId: Types.UUID
		transactionTime: number
		transactionType: number
		sourceId: Types.UUID
		destId: Types.UUID
		flags: number
		amount: number
		simulatorIp: Types.IP
		gridX: number
		gridY: number
		failureType: number
	}
}

export const id = 20
export const name = "LogFailedMoneyTransaction"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "transactionData" entry (fixed-length parameters only)
const TRANSACTION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // transactionId
	Primitives.U32.size() + // transactionTime
	Primitives.S32.size() + // transactionType
	Primitives.UUID.size() + // sourceId
	Primitives.UUID.size() + // destId
	Primitives.U8.size() + // flags
	Primitives.S32.size() + // amount
	Primitives.IP.size() + // simulatorIp
	Primitives.U32.size() + // gridX
	Primitives.U32.size() + // gridY
	Primitives.U8.size() // failureType

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TRANSACTION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<LogFailedMoneyTransactionData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TransactionData
	offset = Primitives.UUID.encode(data.transactionData.transactionId, buffer, offset)
	offset = Primitives.U32.encode(data.transactionData.transactionTime, buffer, offset)
	offset = Primitives.S32.encode(data.transactionData.transactionType, buffer, offset)
	offset = Primitives.UUID.encode(data.transactionData.sourceId, buffer, offset)
	offset = Primitives.UUID.encode(data.transactionData.destId, buffer, offset)
	offset = Primitives.U8.encode(data.transactionData.flags, buffer, offset)
	offset = Primitives.S32.encode(data.transactionData.amount, buffer, offset)
	offset = Primitives.IP.encode(data.transactionData.simulatorIp, buffer, offset)
	offset = Primitives.U32.encode(data.transactionData.gridX, buffer, offset)
	offset = Primitives.U32.encode(data.transactionData.gridY, buffer, offset)
	offset = Primitives.U8.encode(data.transactionData.failureType, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): LogFailedMoneyTransactionData {
	const state = { offset: HEADER_SIZE }

	return {
		transactionData: {
			transactionId: Primitives.UUID.decode(buffer, state),
			transactionTime: Primitives.U32.decode(buffer, state),
			transactionType: Primitives.S32.decode(buffer, state),
			sourceId: Primitives.UUID.decode(buffer, state),
			destId: Primitives.UUID.decode(buffer, state),
			flags: Primitives.U8.decode(buffer, state),
			amount: Primitives.S32.decode(buffer, state),
			simulatorIp: Primitives.IP.decode(buffer, state),
			gridX: Primitives.U32.decode(buffer, state),
			gridY: Primitives.U32.decode(buffer, state),
			failureType: Primitives.U8.decode(buffer, state),
		},
	}
}
