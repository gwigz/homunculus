/**
 * LogParcelChanges Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface LogParcelChangesData {
	agentData?: {
		agentId?: Types.UUID
	}
	regionData: {
		regionHandle: number | bigint
	}
	parcelData: {
		parcelId: Types.UUID
		ownerId: Types.UUID
		isOwnerGroup: boolean
		actualArea: number
		action: number
		transactionId: Types.UUID
	}[]
}

export const id = 224
export const name = "LogParcelChanges"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "regionData" entry (fixed-length parameters only)
const REGION_DATA_BASE_SIZE = Primitives.U64.size() // regionHandle

// base byte size for one "parcelData" entry (fixed-length parameters only)
const PARCEL_DATA_BASE_SIZE =
	Primitives.UUID.size() + // parcelId
	Primitives.UUID.size() + // ownerId
	Primitives.Boolean.size() + // isOwnerGroup
	Primitives.S32.size() + // actualArea
	Primitives.S8.size() + // action
	Primitives.UUID.size() // transactionId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + REGION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<LogParcelChangesData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += PARCEL_DATA_BASE_SIZE * (data.parcelData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// RegionData
	offset = Primitives.U64.encode(data.regionData.regionHandle, buffer, offset)

	// ParcelData
	offset = Primitives.U8.encode(data.parcelData?.length ?? 0, buffer, offset)

	for (const item of data.parcelData ?? []) {
		offset = Primitives.UUID.encode(item.parcelId, buffer, offset)
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
		offset = Primitives.Boolean.encode(item.isOwnerGroup, buffer, offset)
		offset = Primitives.S32.encode(item.actualArea, buffer, offset)
		offset = Primitives.S8.encode(item.action, buffer, offset)
		offset = Primitives.UUID.encode(item.transactionId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): LogParcelChangesData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		regionData: {
			regionHandle: Primitives.U64.decode(buffer, state),
		},
		parcelData: (() => {
			const items: LogParcelChangesData["parcelData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					parcelId: Primitives.UUID.decode(buffer, state),
					ownerId: Primitives.UUID.decode(buffer, state),
					isOwnerGroup: Primitives.Boolean.decode(buffer, state),
					actualArea: Primitives.S32.decode(buffer, state),
					action: Primitives.S8.decode(buffer, state),
					transactionId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
