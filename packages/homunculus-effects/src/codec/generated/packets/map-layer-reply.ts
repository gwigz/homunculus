/**
 * MapLayerReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface MapLayerReplyData {
	agentData?: {
		agentId?: Types.UUID
		flags?: number
	}
	layerData: {
		left: number
		right: number
		top: number
		bottom: number
		imageId: Types.UUID
	}[]
}

export const id = 406
export const name = "MapLayerReply"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.U32.size() // flags

// base byte size for one "layerData" entry (fixed-length parameters only)
const LAYER_DATA_BASE_SIZE =
	Primitives.U32.size() + // left
	Primitives.U32.size() + // right
	Primitives.U32.size() + // top
	Primitives.U32.size() + // bottom
	Primitives.UUID.size() // imageId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<MapLayerReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += LAYER_DATA_BASE_SIZE * (data.layerData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.flags, buffer, offset)

	// LayerData
	offset = Primitives.U8.encode(data.layerData?.length ?? 0, buffer, offset)

	for (const item of data.layerData ?? []) {
		offset = Primitives.U32.encode(item.left, buffer, offset)
		offset = Primitives.U32.encode(item.right, buffer, offset)
		offset = Primitives.U32.encode(item.top, buffer, offset)
		offset = Primitives.U32.encode(item.bottom, buffer, offset)
		offset = Primitives.UUID.encode(item.imageId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): MapLayerReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			flags: Primitives.U32.decode(buffer, state),
		},
		layerData: (() => {
			const items: MapLayerReplyData["layerData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					left: Primitives.U32.decode(buffer, state),
					right: Primitives.U32.decode(buffer, state),
					top: Primitives.U32.decode(buffer, state),
					bottom: Primitives.U32.decode(buffer, state),
					imageId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
