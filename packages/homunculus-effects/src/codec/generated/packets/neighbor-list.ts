/**
 * NeighborList Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface NeighborListData {
	neighborBlock: {
		ip: Types.IP
		port: Types.Port
		publicIp: Types.IP
		publicPort: Types.Port
		regionId: Types.UUID
		name: Buffer
		simAccess: number
	}[]
}

export const id = 3
export const name = "NeighborList"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "neighborBlock" entry (fixed-length parameters only)
const NEIGHBOR_BLOCK_BASE_SIZE =
	Primitives.IP.size() + // ip
	Primitives.Port.size() + // port
	Primitives.IP.size() + // publicIp
	Primitives.Port.size() + // publicPort
	Primitives.UUID.size() + // regionId
	Primitives.U8.size() // simAccess

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<NeighborListData>) {
	let size = BASE_SIZE

	size += NEIGHBOR_BLOCK_BASE_SIZE * 4

	for (const item of data.neighborBlock ?? []) {
		size += Primitives.Variable1.size(item.name)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// NeighborBlock
	for (const item of data.neighborBlock ?? []) {
		offset = Primitives.IP.encode(item.ip, buffer, offset)
		offset = Primitives.Port.encode(item.port, buffer, offset)
		offset = Primitives.IP.encode(item.publicIp, buffer, offset)
		offset = Primitives.Port.encode(item.publicPort, buffer, offset)
		offset = Primitives.UUID.encode(item.regionId, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
		offset = Primitives.U8.encode(item.simAccess, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): NeighborListData {
	const state = { offset: HEADER_SIZE }

	return {
		neighborBlock: (() => {
			const items: NeighborListData["neighborBlock"] = []

			for (let i = 0; i < 4; i++) {
				items.push({
					ip: Primitives.IP.decode(buffer, state),
					port: Primitives.Port.decode(buffer, state),
					publicIp: Primitives.IP.decode(buffer, state),
					publicPort: Primitives.Port.decode(buffer, state),
					regionId: Primitives.UUID.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
					simAccess: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
