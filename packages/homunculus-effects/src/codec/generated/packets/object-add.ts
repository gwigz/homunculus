/**
 * ObjectAdd Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectAddData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		groupId: Types.UUID
	}
	objectData: {
		pCode: number
		material: number
		addFlags: number
		pathCurve: number
		profileCurve: number
		pathBegin: number
		pathEnd: number
		pathScaleX: number
		pathScaleY: number
		pathShearX: number
		pathShearY: number
		pathTwist: number
		pathTwistBegin: number
		pathRadiusOffset: number
		pathTaperX: number
		pathTaperY: number
		pathRevolutions: number
		pathSkew: number
		profileBegin: number
		profileEnd: number
		profileHollow: number
		bypassRaycast: number
		rayStart: Types.Vector3
		rayEnd: Types.Vector3
		rayTargetId: Types.UUID
		rayEndIsIntersection: number
		scale: Types.Vector3
		rotation: Types.Quaternion
		state: number
	}
}

export const id = 1
export const name = "ObjectAdd"
export const frequency = 1
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.UUID.size() // groupId

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE =
	Primitives.U8.size() + // pCode
	Primitives.U8.size() + // material
	Primitives.U32.size() + // addFlags
	Primitives.U8.size() + // pathCurve
	Primitives.U8.size() + // profileCurve
	Primitives.U16.size() + // pathBegin
	Primitives.U16.size() + // pathEnd
	Primitives.U8.size() + // pathScaleX
	Primitives.U8.size() + // pathScaleY
	Primitives.U8.size() + // pathShearX
	Primitives.U8.size() + // pathShearY
	Primitives.S8.size() + // pathTwist
	Primitives.S8.size() + // pathTwistBegin
	Primitives.S8.size() + // pathRadiusOffset
	Primitives.S8.size() + // pathTaperX
	Primitives.S8.size() + // pathTaperY
	Primitives.U8.size() + // pathRevolutions
	Primitives.S8.size() + // pathSkew
	Primitives.U16.size() + // profileBegin
	Primitives.U16.size() + // profileEnd
	Primitives.U16.size() + // profileHollow
	Primitives.U8.size() + // bypassRaycast
	Primitives.Vector3.size() + // rayStart
	Primitives.Vector3.size() + // rayEnd
	Primitives.UUID.size() + // rayTargetId
	Primitives.U8.size() + // rayEndIsIntersection
	Primitives.Vector3.size() + // scale
	Primitives.Quaternion.size() + // rotation
	Primitives.U8.size() // state

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + OBJECT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectAddData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)

	// ObjectData
	offset = Primitives.U8.encode(data.objectData.pCode, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.material, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.addFlags, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.pathCurve, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.profileCurve, buffer, offset)
	offset = Primitives.U16.encode(data.objectData.pathBegin, buffer, offset)
	offset = Primitives.U16.encode(data.objectData.pathEnd, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.pathScaleX, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.pathScaleY, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.pathShearX, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.pathShearY, buffer, offset)
	offset = Primitives.S8.encode(data.objectData.pathTwist, buffer, offset)
	offset = Primitives.S8.encode(data.objectData.pathTwistBegin, buffer, offset)
	offset = Primitives.S8.encode(data.objectData.pathRadiusOffset, buffer, offset)
	offset = Primitives.S8.encode(data.objectData.pathTaperX, buffer, offset)
	offset = Primitives.S8.encode(data.objectData.pathTaperY, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.pathRevolutions, buffer, offset)
	offset = Primitives.S8.encode(data.objectData.pathSkew, buffer, offset)
	offset = Primitives.U16.encode(data.objectData.profileBegin, buffer, offset)
	offset = Primitives.U16.encode(data.objectData.profileEnd, buffer, offset)
	offset = Primitives.U16.encode(data.objectData.profileHollow, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.bypassRaycast, buffer, offset)
	offset = Primitives.Vector3.encode(data.objectData.rayStart, buffer, offset)
	offset = Primitives.Vector3.encode(data.objectData.rayEnd, buffer, offset)
	offset = Primitives.UUID.encode(data.objectData.rayTargetId, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.rayEndIsIntersection, buffer, offset)
	offset = Primitives.Vector3.encode(data.objectData.scale, buffer, offset)
	offset = Primitives.Quaternion.encode(data.objectData.rotation, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.state, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ObjectAddData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
		},
		objectData: {
			pCode: Primitives.U8.decode(buffer, state),
			material: Primitives.U8.decode(buffer, state),
			addFlags: Primitives.U32.decode(buffer, state),
			pathCurve: Primitives.U8.decode(buffer, state),
			profileCurve: Primitives.U8.decode(buffer, state),
			pathBegin: Primitives.U16.decode(buffer, state),
			pathEnd: Primitives.U16.decode(buffer, state),
			pathScaleX: Primitives.U8.decode(buffer, state),
			pathScaleY: Primitives.U8.decode(buffer, state),
			pathShearX: Primitives.U8.decode(buffer, state),
			pathShearY: Primitives.U8.decode(buffer, state),
			pathTwist: Primitives.S8.decode(buffer, state),
			pathTwistBegin: Primitives.S8.decode(buffer, state),
			pathRadiusOffset: Primitives.S8.decode(buffer, state),
			pathTaperX: Primitives.S8.decode(buffer, state),
			pathTaperY: Primitives.S8.decode(buffer, state),
			pathRevolutions: Primitives.U8.decode(buffer, state),
			pathSkew: Primitives.S8.decode(buffer, state),
			profileBegin: Primitives.U16.decode(buffer, state),
			profileEnd: Primitives.U16.decode(buffer, state),
			profileHollow: Primitives.U16.decode(buffer, state),
			bypassRaycast: Primitives.U8.decode(buffer, state),
			rayStart: Primitives.Vector3.decode(buffer, state),
			rayEnd: Primitives.Vector3.decode(buffer, state),
			rayTargetId: Primitives.UUID.decode(buffer, state),
			rayEndIsIntersection: Primitives.U8.decode(buffer, state),
			scale: Primitives.Vector3.decode(buffer, state),
			rotation: Primitives.Quaternion.decode(buffer, state),
			state: Primitives.U8.decode(buffer, state),
		},
	}
}
