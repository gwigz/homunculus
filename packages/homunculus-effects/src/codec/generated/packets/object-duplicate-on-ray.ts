/**
 * ObjectDuplicateOnRay Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectDuplicateOnRayData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		groupId: Types.UUID
		rayStart: Types.Vector3
		rayEnd: Types.Vector3
		bypassRaycast: boolean
		rayEndIsIntersection: boolean
		copyCenters: boolean
		copyRotates: boolean
		rayTargetId: Types.UUID
		duplicateFlags: number
	}
	objectData: {
		objectLocalId: number
	}[]
}

export const id = 91
export const name = "ObjectDuplicateOnRay"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.UUID.size() + // groupId
	Primitives.Vector3.size() + // rayStart
	Primitives.Vector3.size() + // rayEnd
	Primitives.Boolean.size() + // bypassRaycast
	Primitives.Boolean.size() + // rayEndIsIntersection
	Primitives.Boolean.size() + // copyCenters
	Primitives.Boolean.size() + // copyRotates
	Primitives.UUID.size() + // rayTargetId
	Primitives.U32.size() // duplicateFlags

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE = Primitives.U32.size() // objectLocalId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectDuplicateOnRayData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += OBJECT_DATA_BASE_SIZE * (data.objectData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.rayStart, buffer, offset)
	offset = Primitives.Vector3.encode(data.agentData.rayEnd, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.bypassRaycast, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.rayEndIsIntersection, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.copyCenters, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.copyRotates, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.rayTargetId, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.duplicateFlags, buffer, offset)

	// ObjectData
	offset = Primitives.U8.encode(data.objectData?.length ?? 0, buffer, offset)

	for (const item of data.objectData ?? []) {
		offset = Primitives.U32.encode(item.objectLocalId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ObjectDuplicateOnRayData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
			rayStart: Primitives.Vector3.decode(buffer, state),
			rayEnd: Primitives.Vector3.decode(buffer, state),
			bypassRaycast: Primitives.Boolean.decode(buffer, state),
			rayEndIsIntersection: Primitives.Boolean.decode(buffer, state),
			copyCenters: Primitives.Boolean.decode(buffer, state),
			copyRotates: Primitives.Boolean.decode(buffer, state),
			rayTargetId: Primitives.UUID.decode(buffer, state),
			duplicateFlags: Primitives.U32.decode(buffer, state),
		},
		objectData: (() => {
			const items: ObjectDuplicateOnRayData["objectData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					objectLocalId: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
