/**
 * ObjectFlagUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectFlagUpdateData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		objectLocalId: number
		usePhysics: boolean
		isTemporary: boolean
		isPhantom: boolean
		castsShadows: boolean
	}
	extraPhysics: {
		physicsShapeType: number
		density: number
		friction: number
		restitution: number
		gravityMultiplier: number
	}[]
}

export const id = 94
export const name = "ObjectFlagUpdate"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.U32.size() + // objectLocalId
	Primitives.Boolean.size() + // usePhysics
	Primitives.Boolean.size() + // isTemporary
	Primitives.Boolean.size() + // isPhantom
	Primitives.Boolean.size() // castsShadows

// base byte size for one "extraPhysics" entry (fixed-length parameters only)
const EXTRA_PHYSICS_BASE_SIZE =
	Primitives.U8.size() + // physicsShapeType
	Primitives.F32.size() + // density
	Primitives.F32.size() + // friction
	Primitives.F32.size() + // restitution
	Primitives.F32.size() // gravityMultiplier

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectFlagUpdateData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += EXTRA_PHYSICS_BASE_SIZE * (data.extraPhysics?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.objectLocalId, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.usePhysics, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.isTemporary, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.isPhantom, buffer, offset)
	offset = Primitives.Boolean.encode(data.agentData.castsShadows, buffer, offset)

	// ExtraPhysics
	offset = Primitives.U8.encode(data.extraPhysics?.length ?? 0, buffer, offset)

	for (const item of data.extraPhysics ?? []) {
		offset = Primitives.U8.encode(item.physicsShapeType, buffer, offset)
		offset = Primitives.F32.encode(item.density, buffer, offset)
		offset = Primitives.F32.encode(item.friction, buffer, offset)
		offset = Primitives.F32.encode(item.restitution, buffer, offset)
		offset = Primitives.F32.encode(item.gravityMultiplier, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ObjectFlagUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			objectLocalId: Primitives.U32.decode(buffer, state),
			usePhysics: Primitives.Boolean.decode(buffer, state),
			isTemporary: Primitives.Boolean.decode(buffer, state),
			isPhantom: Primitives.Boolean.decode(buffer, state),
			castsShadows: Primitives.Boolean.decode(buffer, state),
		},
		extraPhysics: (() => {
			const items: ObjectFlagUpdateData["extraPhysics"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					physicsShapeType: Primitives.U8.decode(buffer, state),
					density: Primitives.F32.decode(buffer, state),
					friction: Primitives.F32.decode(buffer, state),
					restitution: Primitives.F32.decode(buffer, state),
					gravityMultiplier: Primitives.F32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
