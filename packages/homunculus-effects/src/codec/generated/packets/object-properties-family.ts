/**
 * ObjectPropertiesFamily Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectPropertiesFamilyData {
	objectData: {
		requestFlags: number
		objectId: Types.UUID
		ownerId: Types.UUID
		groupId: Types.UUID
		baseMask: number
		ownerMask: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
		ownershipCost: number
		saleType: number
		salePrice: number
		category: number
		lastOwnerId: Types.UUID
		name: Buffer
		description: Buffer
	}
}

export const id = 10
export const name = "ObjectPropertiesFamily"
export const frequency = 1
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE =
	Primitives.U32.size() + // requestFlags
	Primitives.UUID.size() + // objectId
	Primitives.UUID.size() + // ownerId
	Primitives.UUID.size() + // groupId
	Primitives.U32.size() + // baseMask
	Primitives.U32.size() + // ownerMask
	Primitives.U32.size() + // groupMask
	Primitives.U32.size() + // everyoneMask
	Primitives.U32.size() + // nextOwnerMask
	Primitives.S32.size() + // ownershipCost
	Primitives.U8.size() + // saleType
	Primitives.S32.size() + // salePrice
	Primitives.U32.size() + // category
	Primitives.UUID.size() // lastOwnerId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + OBJECT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectPropertiesFamilyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.objectData.name)
	size += Primitives.Variable1.size(data.objectData.description)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ObjectData
	offset = Primitives.U32.encode(data.objectData.requestFlags, buffer, offset)
	offset = Primitives.UUID.encode(data.objectData.objectId, buffer, offset)
	offset = Primitives.UUID.encode(data.objectData.ownerId, buffer, offset)
	offset = Primitives.UUID.encode(data.objectData.groupId, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.baseMask, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.ownerMask, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.groupMask, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.everyoneMask, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.nextOwnerMask, buffer, offset)
	offset = Primitives.S32.encode(data.objectData.ownershipCost, buffer, offset)
	offset = Primitives.U8.encode(data.objectData.saleType, buffer, offset)
	offset = Primitives.S32.encode(data.objectData.salePrice, buffer, offset)
	offset = Primitives.U32.encode(data.objectData.category, buffer, offset)
	offset = Primitives.UUID.encode(data.objectData.lastOwnerId, buffer, offset)
	offset = Primitives.Variable1.encode(data.objectData.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.objectData.description, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ObjectPropertiesFamilyData {
	const state = { offset: HEADER_SIZE }

	return {
		objectData: {
			requestFlags: Primitives.U32.decode(buffer, state),
			objectId: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
			baseMask: Primitives.U32.decode(buffer, state),
			ownerMask: Primitives.U32.decode(buffer, state),
			groupMask: Primitives.U32.decode(buffer, state),
			everyoneMask: Primitives.U32.decode(buffer, state),
			nextOwnerMask: Primitives.U32.decode(buffer, state),
			ownershipCost: Primitives.S32.decode(buffer, state),
			saleType: Primitives.U8.decode(buffer, state),
			salePrice: Primitives.S32.decode(buffer, state),
			category: Primitives.U32.decode(buffer, state),
			lastOwnerId: Primitives.UUID.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			description: Primitives.Variable1.decode(buffer, state),
		},
	}
}
