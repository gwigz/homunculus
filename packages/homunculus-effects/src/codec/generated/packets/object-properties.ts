/**
 * ObjectProperties Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectPropertiesData {
	objectData: {
		objectId: Types.UUID
		creatorId: Types.UUID
		ownerId: Types.UUID
		groupId: Types.UUID
		creationDate: number | bigint
		baseMask: number
		ownerMask: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
		ownershipCost: number
		saleType: number
		salePrice: number
		aggregatePerms: number
		aggregatePermTextures: number
		aggregatePermTexturesOwner: number
		category: number
		inventorySerial: number
		itemId: Types.UUID
		folderId: Types.UUID
		fromTaskId: Types.UUID
		lastOwnerId: Types.UUID
		name: Buffer
		description: Buffer
		touchName: Buffer
		sitName: Buffer
		textureId: Buffer
	}[]
}

export const id = 9
export const name = "ObjectProperties"
export const frequency = 1
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // objectId
	Primitives.UUID.size() + // creatorId
	Primitives.UUID.size() + // ownerId
	Primitives.UUID.size() + // groupId
	Primitives.U64.size() + // creationDate
	Primitives.U32.size() + // baseMask
	Primitives.U32.size() + // ownerMask
	Primitives.U32.size() + // groupMask
	Primitives.U32.size() + // everyoneMask
	Primitives.U32.size() + // nextOwnerMask
	Primitives.S32.size() + // ownershipCost
	Primitives.U8.size() + // saleType
	Primitives.S32.size() + // salePrice
	Primitives.U8.size() + // aggregatePerms
	Primitives.U8.size() + // aggregatePermTextures
	Primitives.U8.size() + // aggregatePermTexturesOwner
	Primitives.U32.size() + // category
	Primitives.S16.size() + // inventorySerial
	Primitives.UUID.size() + // itemId
	Primitives.UUID.size() + // folderId
	Primitives.UUID.size() + // fromTaskId
	Primitives.UUID.size() // lastOwnerId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectPropertiesData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += OBJECT_DATA_BASE_SIZE * (data.objectData?.length ?? 0)

	for (const item of data.objectData ?? []) {
		size += Primitives.Variable1.size(item.name)
		size += Primitives.Variable1.size(item.description)
		size += Primitives.Variable1.size(item.touchName)
		size += Primitives.Variable1.size(item.sitName)
		size += Primitives.Variable1.size(item.textureId)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ObjectData
	offset = Primitives.U8.encode(data.objectData?.length ?? 0, buffer, offset)

	for (const item of data.objectData ?? []) {
		offset = Primitives.UUID.encode(item.objectId, buffer, offset)
		offset = Primitives.UUID.encode(item.creatorId, buffer, offset)
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
		offset = Primitives.UUID.encode(item.groupId, buffer, offset)
		offset = Primitives.U64.encode(item.creationDate, buffer, offset)
		offset = Primitives.U32.encode(item.baseMask, buffer, offset)
		offset = Primitives.U32.encode(item.ownerMask, buffer, offset)
		offset = Primitives.U32.encode(item.groupMask, buffer, offset)
		offset = Primitives.U32.encode(item.everyoneMask, buffer, offset)
		offset = Primitives.U32.encode(item.nextOwnerMask, buffer, offset)
		offset = Primitives.S32.encode(item.ownershipCost, buffer, offset)
		offset = Primitives.U8.encode(item.saleType, buffer, offset)
		offset = Primitives.S32.encode(item.salePrice, buffer, offset)
		offset = Primitives.U8.encode(item.aggregatePerms, buffer, offset)
		offset = Primitives.U8.encode(item.aggregatePermTextures, buffer, offset)
		offset = Primitives.U8.encode(item.aggregatePermTexturesOwner, buffer, offset)
		offset = Primitives.U32.encode(item.category, buffer, offset)
		offset = Primitives.S16.encode(item.inventorySerial, buffer, offset)
		offset = Primitives.UUID.encode(item.itemId, buffer, offset)
		offset = Primitives.UUID.encode(item.folderId, buffer, offset)
		offset = Primitives.UUID.encode(item.fromTaskId, buffer, offset)
		offset = Primitives.UUID.encode(item.lastOwnerId, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
		offset = Primitives.Variable1.encode(item.description, buffer, offset)
		offset = Primitives.Variable1.encode(item.touchName, buffer, offset)
		offset = Primitives.Variable1.encode(item.sitName, buffer, offset)
		offset = Primitives.Variable1.encode(item.textureId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ObjectPropertiesData {
	const state = { offset: HEADER_SIZE }

	return {
		objectData: (() => {
			const items: ObjectPropertiesData["objectData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					objectId: Primitives.UUID.decode(buffer, state),
					creatorId: Primitives.UUID.decode(buffer, state),
					ownerId: Primitives.UUID.decode(buffer, state),
					groupId: Primitives.UUID.decode(buffer, state),
					creationDate: Primitives.U64.decode(buffer, state),
					baseMask: Primitives.U32.decode(buffer, state),
					ownerMask: Primitives.U32.decode(buffer, state),
					groupMask: Primitives.U32.decode(buffer, state),
					everyoneMask: Primitives.U32.decode(buffer, state),
					nextOwnerMask: Primitives.U32.decode(buffer, state),
					ownershipCost: Primitives.S32.decode(buffer, state),
					saleType: Primitives.U8.decode(buffer, state),
					salePrice: Primitives.S32.decode(buffer, state),
					aggregatePerms: Primitives.U8.decode(buffer, state),
					aggregatePermTextures: Primitives.U8.decode(buffer, state),
					aggregatePermTexturesOwner: Primitives.U8.decode(buffer, state),
					category: Primitives.U32.decode(buffer, state),
					inventorySerial: Primitives.S16.decode(buffer, state),
					itemId: Primitives.UUID.decode(buffer, state),
					folderId: Primitives.UUID.decode(buffer, state),
					fromTaskId: Primitives.UUID.decode(buffer, state),
					lastOwnerId: Primitives.UUID.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
					description: Primitives.Variable1.decode(buffer, state),
					touchName: Primitives.Variable1.decode(buffer, state),
					sitName: Primitives.Variable1.decode(buffer, state),
					textureId: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
