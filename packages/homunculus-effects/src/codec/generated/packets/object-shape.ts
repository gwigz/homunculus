/**
 * ObjectShape Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectShapeData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	objectData: {
		objectLocalId: number
		pathCurve: number
		profileCurve: number
		pathBegin: number
		pathEnd: number
		pathScaleX: number
		pathScaleY: number
		pathShearX: number
		pathShearY: number
		pathTwist: number
		pathTwistBegin: number
		pathRadiusOffset: number
		pathTaperX: number
		pathTaperY: number
		pathRevolutions: number
		pathSkew: number
		profileBegin: number
		profileEnd: number
		profileHollow: number
	}[]
}

export const id = 98
export const name = "ObjectShape"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE =
	Primitives.U32.size() + // objectLocalId
	Primitives.U8.size() + // pathCurve
	Primitives.U8.size() + // profileCurve
	Primitives.U16.size() + // pathBegin
	Primitives.U16.size() + // pathEnd
	Primitives.U8.size() + // pathScaleX
	Primitives.U8.size() + // pathScaleY
	Primitives.U8.size() + // pathShearX
	Primitives.U8.size() + // pathShearY
	Primitives.S8.size() + // pathTwist
	Primitives.S8.size() + // pathTwistBegin
	Primitives.S8.size() + // pathRadiusOffset
	Primitives.S8.size() + // pathTaperX
	Primitives.S8.size() + // pathTaperY
	Primitives.U8.size() + // pathRevolutions
	Primitives.S8.size() + // pathSkew
	Primitives.U16.size() + // profileBegin
	Primitives.U16.size() + // profileEnd
	Primitives.U16.size() // profileHollow

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectShapeData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += OBJECT_DATA_BASE_SIZE * (data.objectData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// ObjectData
	offset = Primitives.U8.encode(data.objectData?.length ?? 0, buffer, offset)

	for (const item of data.objectData ?? []) {
		offset = Primitives.U32.encode(item.objectLocalId, buffer, offset)
		offset = Primitives.U8.encode(item.pathCurve, buffer, offset)
		offset = Primitives.U8.encode(item.profileCurve, buffer, offset)
		offset = Primitives.U16.encode(item.pathBegin, buffer, offset)
		offset = Primitives.U16.encode(item.pathEnd, buffer, offset)
		offset = Primitives.U8.encode(item.pathScaleX, buffer, offset)
		offset = Primitives.U8.encode(item.pathScaleY, buffer, offset)
		offset = Primitives.U8.encode(item.pathShearX, buffer, offset)
		offset = Primitives.U8.encode(item.pathShearY, buffer, offset)
		offset = Primitives.S8.encode(item.pathTwist, buffer, offset)
		offset = Primitives.S8.encode(item.pathTwistBegin, buffer, offset)
		offset = Primitives.S8.encode(item.pathRadiusOffset, buffer, offset)
		offset = Primitives.S8.encode(item.pathTaperX, buffer, offset)
		offset = Primitives.S8.encode(item.pathTaperY, buffer, offset)
		offset = Primitives.U8.encode(item.pathRevolutions, buffer, offset)
		offset = Primitives.S8.encode(item.pathSkew, buffer, offset)
		offset = Primitives.U16.encode(item.profileBegin, buffer, offset)
		offset = Primitives.U16.encode(item.profileEnd, buffer, offset)
		offset = Primitives.U16.encode(item.profileHollow, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ObjectShapeData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		objectData: (() => {
			const items: ObjectShapeData["objectData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					objectLocalId: Primitives.U32.decode(buffer, state),
					pathCurve: Primitives.U8.decode(buffer, state),
					profileCurve: Primitives.U8.decode(buffer, state),
					pathBegin: Primitives.U16.decode(buffer, state),
					pathEnd: Primitives.U16.decode(buffer, state),
					pathScaleX: Primitives.U8.decode(buffer, state),
					pathScaleY: Primitives.U8.decode(buffer, state),
					pathShearX: Primitives.U8.decode(buffer, state),
					pathShearY: Primitives.U8.decode(buffer, state),
					pathTwist: Primitives.S8.decode(buffer, state),
					pathTwistBegin: Primitives.S8.decode(buffer, state),
					pathRadiusOffset: Primitives.S8.decode(buffer, state),
					pathTaperX: Primitives.S8.decode(buffer, state),
					pathTaperY: Primitives.S8.decode(buffer, state),
					pathRevolutions: Primitives.U8.decode(buffer, state),
					pathSkew: Primitives.S8.decode(buffer, state),
					profileBegin: Primitives.U16.decode(buffer, state),
					profileEnd: Primitives.U16.decode(buffer, state),
					profileHollow: Primitives.U16.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
