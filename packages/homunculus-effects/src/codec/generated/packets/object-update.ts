/**
 * ObjectUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ObjectUpdateData {
	regionData: {
		regionHandle: number | bigint
		timeDilation: number
	}
	objectData: {
		id: number
		state: number
		fullId: Types.UUID
		crc: number
		pCode: number
		material: number
		clickAction: number
		scale: Types.Vector3
		objectData: Buffer
		parentId: number
		updateFlags: number
		pathCurve: number
		profileCurve: number
		pathBegin: number
		pathEnd: number
		pathScaleX: number
		pathScaleY: number
		pathShearX: number
		pathShearY: number
		pathTwist: number
		pathTwistBegin: number
		pathRadiusOffset: number
		pathTaperX: number
		pathTaperY: number
		pathRevolutions: number
		pathSkew: number
		profileBegin: number
		profileEnd: number
		profileHollow: number
		textureEntry: Buffer
		textureAnim: Buffer
		nameValue: Buffer
		data: Buffer
		text: Buffer
		textColor: Types.Color4
		mediaUrl: Buffer
		psBlock: Buffer
		extraParams: Buffer
		sound: Types.UUID
		ownerId: Types.UUID
		gain: number
		flags: number
		radius: number
		jointType: number
		jointPivot: Types.Vector3
		jointAxisOrAnchor: Types.Vector3
	}[]
}

export const id = 12
export const name = "ObjectUpdate"
export const frequency = 0
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "regionData" entry (fixed-length parameters only)
const REGION_DATA_BASE_SIZE =
	Primitives.U64.size() + // regionHandle
	Primitives.U16.size() // timeDilation

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE =
	Primitives.U32.size() + // id
	Primitives.U8.size() + // state
	Primitives.UUID.size() + // fullId
	Primitives.U32.size() + // crc
	Primitives.U8.size() + // pCode
	Primitives.U8.size() + // material
	Primitives.U8.size() + // clickAction
	Primitives.Vector3.size() + // scale
	Primitives.U32.size() + // parentId
	Primitives.U32.size() + // updateFlags
	Primitives.U8.size() + // pathCurve
	Primitives.U8.size() + // profileCurve
	Primitives.U16.size() + // pathBegin
	Primitives.U16.size() + // pathEnd
	Primitives.U8.size() + // pathScaleX
	Primitives.U8.size() + // pathScaleY
	Primitives.U8.size() + // pathShearX
	Primitives.U8.size() + // pathShearY
	Primitives.S8.size() + // pathTwist
	Primitives.S8.size() + // pathTwistBegin
	Primitives.S8.size() + // pathRadiusOffset
	Primitives.S8.size() + // pathTaperX
	Primitives.S8.size() + // pathTaperY
	Primitives.U8.size() + // pathRevolutions
	Primitives.S8.size() + // pathSkew
	Primitives.U16.size() + // profileBegin
	Primitives.U16.size() + // profileEnd
	Primitives.U16.size() + // profileHollow
	Primitives.Color4.size() + // textColor
	Primitives.UUID.size() + // sound
	Primitives.UUID.size() + // ownerId
	Primitives.F32.size() + // gain
	Primitives.U8.size() + // flags
	Primitives.F32.size() + // radius
	Primitives.U8.size() + // jointType
	Primitives.Vector3.size() + // jointPivot
	Primitives.Vector3.size() // jointAxisOrAnchor

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REGION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ObjectUpdateData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += OBJECT_DATA_BASE_SIZE * (data.objectData?.length ?? 0)

	for (const item of data.objectData ?? []) {
		size += Primitives.Variable1.size(item.objectData)
		size += Primitives.Variable2.size(item.textureEntry)
		size += Primitives.Variable1.size(item.textureAnim)
		size += Primitives.Variable2.size(item.nameValue)
		size += Primitives.Variable2.size(item.data)
		size += Primitives.Variable1.size(item.text)
		size += Primitives.Variable1.size(item.mediaUrl)
		size += Primitives.Variable1.size(item.psBlock)
		size += Primitives.Variable1.size(item.extraParams)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// RegionData
	offset = Primitives.U64.encode(data.regionData.regionHandle, buffer, offset)
	offset = Primitives.U16.encode(data.regionData.timeDilation, buffer, offset)

	// ObjectData
	offset = Primitives.U8.encode(data.objectData?.length ?? 0, buffer, offset)

	for (const item of data.objectData ?? []) {
		offset = Primitives.U32.encode(item.id, buffer, offset)
		offset = Primitives.U8.encode(item.state, buffer, offset)
		offset = Primitives.UUID.encode(item.fullId, buffer, offset)
		offset = Primitives.U32.encode(item.crc, buffer, offset)
		offset = Primitives.U8.encode(item.pCode, buffer, offset)
		offset = Primitives.U8.encode(item.material, buffer, offset)
		offset = Primitives.U8.encode(item.clickAction, buffer, offset)
		offset = Primitives.Vector3.encode(item.scale, buffer, offset)
		offset = Primitives.Variable1.encode(item.objectData, buffer, offset)
		offset = Primitives.U32.encode(item.parentId, buffer, offset)
		offset = Primitives.U32.encode(item.updateFlags, buffer, offset)
		offset = Primitives.U8.encode(item.pathCurve, buffer, offset)
		offset = Primitives.U8.encode(item.profileCurve, buffer, offset)
		offset = Primitives.U16.encode(item.pathBegin, buffer, offset)
		offset = Primitives.U16.encode(item.pathEnd, buffer, offset)
		offset = Primitives.U8.encode(item.pathScaleX, buffer, offset)
		offset = Primitives.U8.encode(item.pathScaleY, buffer, offset)
		offset = Primitives.U8.encode(item.pathShearX, buffer, offset)
		offset = Primitives.U8.encode(item.pathShearY, buffer, offset)
		offset = Primitives.S8.encode(item.pathTwist, buffer, offset)
		offset = Primitives.S8.encode(item.pathTwistBegin, buffer, offset)
		offset = Primitives.S8.encode(item.pathRadiusOffset, buffer, offset)
		offset = Primitives.S8.encode(item.pathTaperX, buffer, offset)
		offset = Primitives.S8.encode(item.pathTaperY, buffer, offset)
		offset = Primitives.U8.encode(item.pathRevolutions, buffer, offset)
		offset = Primitives.S8.encode(item.pathSkew, buffer, offset)
		offset = Primitives.U16.encode(item.profileBegin, buffer, offset)
		offset = Primitives.U16.encode(item.profileEnd, buffer, offset)
		offset = Primitives.U16.encode(item.profileHollow, buffer, offset)
		offset = Primitives.Variable2.encode(item.textureEntry, buffer, offset)
		offset = Primitives.Variable1.encode(item.textureAnim, buffer, offset)
		offset = Primitives.Variable2.encode(item.nameValue, buffer, offset)
		offset = Primitives.Variable2.encode(item.data, buffer, offset)
		offset = Primitives.Variable1.encode(item.text, buffer, offset)
		offset = Primitives.Color4.encode(item.textColor, buffer, offset)
		offset = Primitives.Variable1.encode(item.mediaUrl, buffer, offset)
		offset = Primitives.Variable1.encode(item.psBlock, buffer, offset)
		offset = Primitives.Variable1.encode(item.extraParams, buffer, offset)
		offset = Primitives.UUID.encode(item.sound, buffer, offset)
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
		offset = Primitives.F32.encode(item.gain, buffer, offset)
		offset = Primitives.U8.encode(item.flags, buffer, offset)
		offset = Primitives.F32.encode(item.radius, buffer, offset)
		offset = Primitives.U8.encode(item.jointType, buffer, offset)
		offset = Primitives.Vector3.encode(item.jointPivot, buffer, offset)
		offset = Primitives.Vector3.encode(item.jointAxisOrAnchor, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ObjectUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		regionData: {
			regionHandle: Primitives.U64.decode(buffer, state),
			timeDilation: Primitives.U16.decode(buffer, state),
		},
		objectData: (() => {
			const items: ObjectUpdateData["objectData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					id: Primitives.U32.decode(buffer, state),
					state: Primitives.U8.decode(buffer, state),
					fullId: Primitives.UUID.decode(buffer, state),
					crc: Primitives.U32.decode(buffer, state),
					pCode: Primitives.U8.decode(buffer, state),
					material: Primitives.U8.decode(buffer, state),
					clickAction: Primitives.U8.decode(buffer, state),
					scale: Primitives.Vector3.decode(buffer, state),
					objectData: Primitives.Variable1.decode(buffer, state),
					parentId: Primitives.U32.decode(buffer, state),
					updateFlags: Primitives.U32.decode(buffer, state),
					pathCurve: Primitives.U8.decode(buffer, state),
					profileCurve: Primitives.U8.decode(buffer, state),
					pathBegin: Primitives.U16.decode(buffer, state),
					pathEnd: Primitives.U16.decode(buffer, state),
					pathScaleX: Primitives.U8.decode(buffer, state),
					pathScaleY: Primitives.U8.decode(buffer, state),
					pathShearX: Primitives.U8.decode(buffer, state),
					pathShearY: Primitives.U8.decode(buffer, state),
					pathTwist: Primitives.S8.decode(buffer, state),
					pathTwistBegin: Primitives.S8.decode(buffer, state),
					pathRadiusOffset: Primitives.S8.decode(buffer, state),
					pathTaperX: Primitives.S8.decode(buffer, state),
					pathTaperY: Primitives.S8.decode(buffer, state),
					pathRevolutions: Primitives.U8.decode(buffer, state),
					pathSkew: Primitives.S8.decode(buffer, state),
					profileBegin: Primitives.U16.decode(buffer, state),
					profileEnd: Primitives.U16.decode(buffer, state),
					profileHollow: Primitives.U16.decode(buffer, state),
					textureEntry: Primitives.Variable2.decode(buffer, state),
					textureAnim: Primitives.Variable1.decode(buffer, state),
					nameValue: Primitives.Variable2.decode(buffer, state),
					data: Primitives.Variable2.decode(buffer, state),
					text: Primitives.Variable1.decode(buffer, state),
					textColor: Primitives.Color4.decode(buffer, state),
					mediaUrl: Primitives.Variable1.decode(buffer, state),
					psBlock: Primitives.Variable1.decode(buffer, state),
					extraParams: Primitives.Variable1.decode(buffer, state),
					sound: Primitives.UUID.decode(buffer, state),
					ownerId: Primitives.UUID.decode(buffer, state),
					gain: Primitives.F32.decode(buffer, state),
					flags: Primitives.U8.decode(buffer, state),
					radius: Primitives.F32.decode(buffer, state),
					jointType: Primitives.U8.decode(buffer, state),
					jointPivot: Primitives.Vector3.decode(buffer, state),
					jointAxisOrAnchor: Primitives.Vector3.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
