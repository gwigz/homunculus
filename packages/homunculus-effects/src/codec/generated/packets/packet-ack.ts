/**
 * PacketAck Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface PacketAckData {
	packets: {
		id: number
	}[]
}

export const id = 4294967291
export const name = "PacketAck"
export const frequency = 3

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "packets" entry (fixed-length parameters only)
const PACKETS_BASE_SIZE = Primitives.U32.size() // id

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<PacketAckData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += PACKETS_BASE_SIZE * (data.packets?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Packets
	offset = Primitives.U8.encode(data.packets?.length ?? 0, buffer, offset)

	for (const item of data.packets ?? []) {
		offset = Primitives.U32.encode(item.id, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): PacketAckData {
	const state = { offset: HEADER_SIZE }

	return {
		packets: (() => {
			const items: PacketAckData["packets"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					id: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
