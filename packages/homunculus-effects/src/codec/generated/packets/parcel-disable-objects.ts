/**
 * ParcelDisableObjects Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ParcelDisableObjectsData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	parcelData: {
		localId: number
		returnType: number
	}
	taskIDs: {
		taskId: Types.UUID
	}[]
	ownerIDs: {
		ownerId: Types.UUID
	}[]
}

export const id = 201
export const name = "ParcelDisableObjects"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "parcelData" entry (fixed-length parameters only)
const PARCEL_DATA_BASE_SIZE =
	Primitives.S32.size() + // localId
	Primitives.U32.size() // returnType

// base byte size for one "taskIDs" entry (fixed-length parameters only)
const TASK_IDS_BASE_SIZE = Primitives.UUID.size() // taskId

// base byte size for one "ownerIDs" entry (fixed-length parameters only)
const OWNER_IDS_BASE_SIZE = Primitives.UUID.size() // ownerId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + PARCEL_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ParcelDisableObjectsData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += TASK_IDS_BASE_SIZE * (data.taskIDs?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += OWNER_IDS_BASE_SIZE * (data.ownerIDs?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// ParcelData
	offset = Primitives.S32.encode(data.parcelData.localId, buffer, offset)
	offset = Primitives.U32.encode(data.parcelData.returnType, buffer, offset)

	// TaskIDs
	offset = Primitives.U8.encode(data.taskIDs?.length ?? 0, buffer, offset)

	for (const item of data.taskIDs ?? []) {
		offset = Primitives.UUID.encode(item.taskId, buffer, offset)
	}

	// OwnerIDs
	offset = Primitives.U8.encode(data.ownerIDs?.length ?? 0, buffer, offset)

	for (const item of data.ownerIDs ?? []) {
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ParcelDisableObjectsData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		parcelData: {
			localId: Primitives.S32.decode(buffer, state),
			returnType: Primitives.U32.decode(buffer, state),
		},
		taskIDs: (() => {
			const items: ParcelDisableObjectsData["taskIDs"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					taskId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
		ownerIDs: (() => {
			const items: ParcelDisableObjectsData["ownerIDs"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					ownerId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
