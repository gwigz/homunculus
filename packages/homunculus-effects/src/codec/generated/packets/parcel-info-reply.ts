/**
 * ParcelInfoReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ParcelInfoReplyData {
	agentData?: {
		agentId?: Types.UUID
	}
	data: {
		parcelId: Types.UUID
		ownerId: Types.UUID
		name: Buffer
		desc: Buffer
		actualArea: number
		billableArea: number
		flags: number
		globalX: number
		globalY: number
		globalZ: number
		simName: Buffer
		snapshotId: Types.UUID
		dwell: number
		salePrice: number
		auctionId: number
	}
}

export const id = 55
export const name = "ParcelInfoReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE = Primitives.UUID.size() // agentId

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE =
	Primitives.UUID.size() + // parcelId
	Primitives.UUID.size() + // ownerId
	Primitives.S32.size() + // actualArea
	Primitives.S32.size() + // billableArea
	Primitives.U8.size() + // flags
	Primitives.F32.size() + // globalX
	Primitives.F32.size() + // globalY
	Primitives.F32.size() + // globalZ
	Primitives.UUID.size() + // snapshotId
	Primitives.F32.size() + // dwell
	Primitives.S32.size() + // salePrice
	Primitives.S32.size() // auctionId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ParcelInfoReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.data.name)
	size += Primitives.Variable1.size(data.data.desc)
	size += Primitives.Variable1.size(data.data.simName)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)

	// Data
	offset = Primitives.UUID.encode(data.data.parcelId, buffer, offset)
	offset = Primitives.UUID.encode(data.data.ownerId, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.desc, buffer, offset)
	offset = Primitives.S32.encode(data.data.actualArea, buffer, offset)
	offset = Primitives.S32.encode(data.data.billableArea, buffer, offset)
	offset = Primitives.U8.encode(data.data.flags, buffer, offset)
	offset = Primitives.F32.encode(data.data.globalX, buffer, offset)
	offset = Primitives.F32.encode(data.data.globalY, buffer, offset)
	offset = Primitives.F32.encode(data.data.globalZ, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.simName, buffer, offset)
	offset = Primitives.UUID.encode(data.data.snapshotId, buffer, offset)
	offset = Primitives.F32.encode(data.data.dwell, buffer, offset)
	offset = Primitives.S32.encode(data.data.salePrice, buffer, offset)
	offset = Primitives.S32.encode(data.data.auctionId, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ParcelInfoReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
		},
		data: {
			parcelId: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			desc: Primitives.Variable1.decode(buffer, state),
			actualArea: Primitives.S32.decode(buffer, state),
			billableArea: Primitives.S32.decode(buffer, state),
			flags: Primitives.U8.decode(buffer, state),
			globalX: Primitives.F32.decode(buffer, state),
			globalY: Primitives.F32.decode(buffer, state),
			globalZ: Primitives.F32.decode(buffer, state),
			simName: Primitives.Variable1.decode(buffer, state),
			snapshotId: Primitives.UUID.decode(buffer, state),
			dwell: Primitives.F32.decode(buffer, state),
			salePrice: Primitives.S32.decode(buffer, state),
			auctionId: Primitives.S32.decode(buffer, state),
		},
	}
}
