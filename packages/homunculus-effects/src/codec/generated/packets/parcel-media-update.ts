/**
 * ParcelMediaUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ParcelMediaUpdateData {
	dataBlock: {
		mediaUrl: Buffer
		mediaId: Types.UUID
		mediaAutoScale: number
	}
	dataBlockExtended: {
		mediaType: Buffer
		mediaDesc: Buffer
		mediaWidth: number
		mediaHeight: number
		mediaLoop: number
	}
}

export const id = 420
export const name = "ParcelMediaUpdate"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "dataBlock" entry (fixed-length parameters only)
const DATA_BLOCK_BASE_SIZE =
	Primitives.UUID.size() + // mediaId
	Primitives.U8.size() // mediaAutoScale

// base byte size for one "dataBlockExtended" entry (fixed-length parameters only)
const DATA_BLOCK_EXTENDED_BASE_SIZE =
	Primitives.S32.size() + // mediaWidth
	Primitives.S32.size() + // mediaHeight
	Primitives.U8.size() // mediaLoop

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + DATA_BLOCK_BASE_SIZE + DATA_BLOCK_EXTENDED_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ParcelMediaUpdateData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.dataBlock.mediaUrl)

	size += Primitives.Variable1.size(data.dataBlockExtended.mediaType)
	size += Primitives.Variable1.size(data.dataBlockExtended.mediaDesc)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// DataBlock
	offset = Primitives.Variable1.encode(data.dataBlock.mediaUrl, buffer, offset)
	offset = Primitives.UUID.encode(data.dataBlock.mediaId, buffer, offset)
	offset = Primitives.U8.encode(data.dataBlock.mediaAutoScale, buffer, offset)

	// DataBlockExtended
	offset = Primitives.Variable1.encode(data.dataBlockExtended.mediaType, buffer, offset)
	offset = Primitives.Variable1.encode(data.dataBlockExtended.mediaDesc, buffer, offset)
	offset = Primitives.S32.encode(data.dataBlockExtended.mediaWidth, buffer, offset)
	offset = Primitives.S32.encode(data.dataBlockExtended.mediaHeight, buffer, offset)
	offset = Primitives.U8.encode(data.dataBlockExtended.mediaLoop, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ParcelMediaUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		dataBlock: {
			mediaUrl: Primitives.Variable1.decode(buffer, state),
			mediaId: Primitives.UUID.decode(buffer, state),
			mediaAutoScale: Primitives.U8.decode(buffer, state),
		},
		dataBlockExtended: {
			mediaType: Primitives.Variable1.decode(buffer, state),
			mediaDesc: Primitives.Variable1.decode(buffer, state),
			mediaWidth: Primitives.S32.decode(buffer, state),
			mediaHeight: Primitives.S32.decode(buffer, state),
			mediaLoop: Primitives.U8.decode(buffer, state),
		},
	}
}
