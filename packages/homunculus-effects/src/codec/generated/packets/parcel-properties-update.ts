/**
 * ParcelPropertiesUpdate Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ParcelPropertiesUpdateData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	parcelData: {
		localId: number
		flags: number
		parcelFlags: number
		salePrice: number
		name: Buffer
		desc: Buffer
		musicUrl: Buffer
		mediaUrl: Buffer
		mediaId: Types.UUID
		mediaAutoScale: number
		groupId: Types.UUID
		passPrice: number
		passHours: number
		category: number
		authBuyerId: Types.UUID
		snapshotId: Types.UUID
		userLocation: Types.Vector3
		userLookAt: Types.Vector3
		landingType: number
	}
}

export const id = 198
export const name = "ParcelPropertiesUpdate"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "parcelData" entry (fixed-length parameters only)
const PARCEL_DATA_BASE_SIZE =
	Primitives.S32.size() + // localId
	Primitives.U32.size() + // flags
	Primitives.U32.size() + // parcelFlags
	Primitives.S32.size() + // salePrice
	Primitives.UUID.size() + // mediaId
	Primitives.U8.size() + // mediaAutoScale
	Primitives.UUID.size() + // groupId
	Primitives.S32.size() + // passPrice
	Primitives.F32.size() + // passHours
	Primitives.U8.size() + // category
	Primitives.UUID.size() + // authBuyerId
	Primitives.UUID.size() + // snapshotId
	Primitives.Vector3.size() + // userLocation
	Primitives.Vector3.size() + // userLookAt
	Primitives.U8.size() // landingType

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + PARCEL_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ParcelPropertiesUpdateData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.parcelData.name)
	size += Primitives.Variable1.size(data.parcelData.desc)
	size += Primitives.Variable1.size(data.parcelData.musicUrl)
	size += Primitives.Variable1.size(data.parcelData.mediaUrl)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// ParcelData
	offset = Primitives.S32.encode(data.parcelData.localId, buffer, offset)
	offset = Primitives.U32.encode(data.parcelData.flags, buffer, offset)
	offset = Primitives.U32.encode(data.parcelData.parcelFlags, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.salePrice, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.desc, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.musicUrl, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.mediaUrl, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.mediaId, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.mediaAutoScale, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.groupId, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.passPrice, buffer, offset)
	offset = Primitives.F32.encode(data.parcelData.passHours, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.category, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.authBuyerId, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.snapshotId, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.userLocation, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.userLookAt, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.landingType, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ParcelPropertiesUpdateData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		parcelData: {
			localId: Primitives.S32.decode(buffer, state),
			flags: Primitives.U32.decode(buffer, state),
			parcelFlags: Primitives.U32.decode(buffer, state),
			salePrice: Primitives.S32.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			desc: Primitives.Variable1.decode(buffer, state),
			musicUrl: Primitives.Variable1.decode(buffer, state),
			mediaUrl: Primitives.Variable1.decode(buffer, state),
			mediaId: Primitives.UUID.decode(buffer, state),
			mediaAutoScale: Primitives.U8.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
			passPrice: Primitives.S32.decode(buffer, state),
			passHours: Primitives.F32.decode(buffer, state),
			category: Primitives.U8.decode(buffer, state),
			authBuyerId: Primitives.UUID.decode(buffer, state),
			snapshotId: Primitives.UUID.decode(buffer, state),
			userLocation: Primitives.Vector3.decode(buffer, state),
			userLookAt: Primitives.Vector3.decode(buffer, state),
			landingType: Primitives.U8.decode(buffer, state),
		},
	}
}
