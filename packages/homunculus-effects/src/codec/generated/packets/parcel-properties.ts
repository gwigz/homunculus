/**
 * ParcelProperties Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ParcelPropertiesData {
	parcelData: {
		requestResult: number
		sequenceId: number
		snapSelection: boolean
		selfCount: number
		otherCount: number
		publicCount: number
		localId: number
		ownerId: Types.UUID
		isGroupOwned: boolean
		auctionId: number
		claimDate: number
		claimPrice: number
		rentPrice: number
		aabbMin: Types.Vector3
		aabbMax: Types.Vector3
		bitmap: Buffer
		area: number
		status: number
		simWideMaxPrims: number
		simWideTotalPrims: number
		maxPrims: number
		totalPrims: number
		ownerPrims: number
		groupPrims: number
		otherPrims: number
		selectedPrims: number
		parcelPrimBonus: number
		otherCleanTime: number
		parcelFlags: number
		salePrice: number
		name: Buffer
		desc: Buffer
		musicUrl: Buffer
		mediaUrl: Buffer
		mediaId: Types.UUID
		mediaAutoScale: number
		groupId: Types.UUID
		passPrice: number
		passHours: number
		category: number
		authBuyerId: Types.UUID
		snapshotId: Types.UUID
		userLocation: Types.Vector3
		userLookAt: Types.Vector3
		landingType: number
		regionPushOverride: boolean
		regionDenyAnonymous: boolean
		regionDenyIdentified: boolean
		regionDenyTransacted: boolean
	}
	ageVerificationBlock: {
		regionDenyAgeUnverified: boolean
	}
	regionAllowAccessBlock: {
		regionAllowAccessOverride: boolean
	}
	parcelEnvironmentBlock: {
		parcelEnvironmentVersion: number
		regionAllowEnvironmentOverride: boolean
	}
}

export const id = 23
export const name = "ParcelProperties"
export const frequency = 0
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "parcelData" entry (fixed-length parameters only)
const PARCEL_DATA_BASE_SIZE =
	Primitives.S32.size() + // requestResult
	Primitives.S32.size() + // sequenceId
	Primitives.Boolean.size() + // snapSelection
	Primitives.S32.size() + // selfCount
	Primitives.S32.size() + // otherCount
	Primitives.S32.size() + // publicCount
	Primitives.S32.size() + // localId
	Primitives.UUID.size() + // ownerId
	Primitives.Boolean.size() + // isGroupOwned
	Primitives.U32.size() + // auctionId
	Primitives.S32.size() + // claimDate
	Primitives.S32.size() + // claimPrice
	Primitives.S32.size() + // rentPrice
	Primitives.Vector3.size() + // aabbMin
	Primitives.Vector3.size() + // aabbMax
	Primitives.S32.size() + // area
	Primitives.U8.size() + // status
	Primitives.S32.size() + // simWideMaxPrims
	Primitives.S32.size() + // simWideTotalPrims
	Primitives.S32.size() + // maxPrims
	Primitives.S32.size() + // totalPrims
	Primitives.S32.size() + // ownerPrims
	Primitives.S32.size() + // groupPrims
	Primitives.S32.size() + // otherPrims
	Primitives.S32.size() + // selectedPrims
	Primitives.F32.size() + // parcelPrimBonus
	Primitives.S32.size() + // otherCleanTime
	Primitives.U32.size() + // parcelFlags
	Primitives.S32.size() + // salePrice
	Primitives.UUID.size() + // mediaId
	Primitives.U8.size() + // mediaAutoScale
	Primitives.UUID.size() + // groupId
	Primitives.S32.size() + // passPrice
	Primitives.F32.size() + // passHours
	Primitives.U8.size() + // category
	Primitives.UUID.size() + // authBuyerId
	Primitives.UUID.size() + // snapshotId
	Primitives.Vector3.size() + // userLocation
	Primitives.Vector3.size() + // userLookAt
	Primitives.U8.size() + // landingType
	Primitives.Boolean.size() + // regionPushOverride
	Primitives.Boolean.size() + // regionDenyAnonymous
	Primitives.Boolean.size() + // regionDenyIdentified
	Primitives.Boolean.size() // regionDenyTransacted

// base byte size for one "ageVerificationBlock" entry (fixed-length parameters only)
const AGE_VERIFICATION_BLOCK_BASE_SIZE = Primitives.Boolean.size() // regionDenyAgeUnverified

// base byte size for one "regionAllowAccessBlock" entry (fixed-length parameters only)
const REGION_ALLOW_ACCESS_BLOCK_BASE_SIZE = Primitives.Boolean.size() // regionAllowAccessOverride

// base byte size for one "parcelEnvironmentBlock" entry (fixed-length parameters only)
const PARCEL_ENVIRONMENT_BLOCK_BASE_SIZE =
	Primitives.S32.size() + // parcelEnvironmentVersion
	Primitives.Boolean.size() // regionAllowEnvironmentOverride

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE +
	PARCEL_DATA_BASE_SIZE +
	AGE_VERIFICATION_BLOCK_BASE_SIZE +
	REGION_ALLOW_ACCESS_BLOCK_BASE_SIZE +
	PARCEL_ENVIRONMENT_BLOCK_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ParcelPropertiesData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.parcelData.bitmap)
	size += Primitives.Variable1.size(data.parcelData.name)
	size += Primitives.Variable1.size(data.parcelData.desc)
	size += Primitives.Variable1.size(data.parcelData.musicUrl)
	size += Primitives.Variable1.size(data.parcelData.mediaUrl)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ParcelData
	offset = Primitives.S32.encode(data.parcelData.requestResult, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.sequenceId, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.snapSelection, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.selfCount, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.otherCount, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.publicCount, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.localId, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.ownerId, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.isGroupOwned, buffer, offset)
	offset = Primitives.U32.encode(data.parcelData.auctionId, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.claimDate, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.claimPrice, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.rentPrice, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.aabbMin, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.aabbMax, buffer, offset)
	offset = Primitives.Variable2.encode(data.parcelData.bitmap, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.area, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.status, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.simWideMaxPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.simWideTotalPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.maxPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.totalPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.ownerPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.groupPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.otherPrims, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.selectedPrims, buffer, offset)
	offset = Primitives.F32.encode(data.parcelData.parcelPrimBonus, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.otherCleanTime, buffer, offset)
	offset = Primitives.U32.encode(data.parcelData.parcelFlags, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.salePrice, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.desc, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.musicUrl, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.mediaUrl, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.mediaId, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.mediaAutoScale, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.groupId, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.passPrice, buffer, offset)
	offset = Primitives.F32.encode(data.parcelData.passHours, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.category, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.authBuyerId, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.snapshotId, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.userLocation, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.userLookAt, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.landingType, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.regionPushOverride, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.regionDenyAnonymous, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.regionDenyIdentified, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.regionDenyTransacted, buffer, offset)

	// AgeVerificationBlock
	offset = Primitives.Boolean.encode(data.ageVerificationBlock.regionDenyAgeUnverified, buffer, offset)

	// RegionAllowAccessBlock
	offset = Primitives.Boolean.encode(data.regionAllowAccessBlock.regionAllowAccessOverride, buffer, offset)

	// ParcelEnvironmentBlock
	offset = Primitives.S32.encode(data.parcelEnvironmentBlock.parcelEnvironmentVersion, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelEnvironmentBlock.regionAllowEnvironmentOverride, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ParcelPropertiesData {
	const state = { offset: HEADER_SIZE }

	return {
		parcelData: {
			requestResult: Primitives.S32.decode(buffer, state),
			sequenceId: Primitives.S32.decode(buffer, state),
			snapSelection: Primitives.Boolean.decode(buffer, state),
			selfCount: Primitives.S32.decode(buffer, state),
			otherCount: Primitives.S32.decode(buffer, state),
			publicCount: Primitives.S32.decode(buffer, state),
			localId: Primitives.S32.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			isGroupOwned: Primitives.Boolean.decode(buffer, state),
			auctionId: Primitives.U32.decode(buffer, state),
			claimDate: Primitives.S32.decode(buffer, state),
			claimPrice: Primitives.S32.decode(buffer, state),
			rentPrice: Primitives.S32.decode(buffer, state),
			aabbMin: Primitives.Vector3.decode(buffer, state),
			aabbMax: Primitives.Vector3.decode(buffer, state),
			bitmap: Primitives.Variable2.decode(buffer, state),
			area: Primitives.S32.decode(buffer, state),
			status: Primitives.U8.decode(buffer, state),
			simWideMaxPrims: Primitives.S32.decode(buffer, state),
			simWideTotalPrims: Primitives.S32.decode(buffer, state),
			maxPrims: Primitives.S32.decode(buffer, state),
			totalPrims: Primitives.S32.decode(buffer, state),
			ownerPrims: Primitives.S32.decode(buffer, state),
			groupPrims: Primitives.S32.decode(buffer, state),
			otherPrims: Primitives.S32.decode(buffer, state),
			selectedPrims: Primitives.S32.decode(buffer, state),
			parcelPrimBonus: Primitives.F32.decode(buffer, state),
			otherCleanTime: Primitives.S32.decode(buffer, state),
			parcelFlags: Primitives.U32.decode(buffer, state),
			salePrice: Primitives.S32.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			desc: Primitives.Variable1.decode(buffer, state),
			musicUrl: Primitives.Variable1.decode(buffer, state),
			mediaUrl: Primitives.Variable1.decode(buffer, state),
			mediaId: Primitives.UUID.decode(buffer, state),
			mediaAutoScale: Primitives.U8.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
			passPrice: Primitives.S32.decode(buffer, state),
			passHours: Primitives.F32.decode(buffer, state),
			category: Primitives.U8.decode(buffer, state),
			authBuyerId: Primitives.UUID.decode(buffer, state),
			snapshotId: Primitives.UUID.decode(buffer, state),
			userLocation: Primitives.Vector3.decode(buffer, state),
			userLookAt: Primitives.Vector3.decode(buffer, state),
			landingType: Primitives.U8.decode(buffer, state),
			regionPushOverride: Primitives.Boolean.decode(buffer, state),
			regionDenyAnonymous: Primitives.Boolean.decode(buffer, state),
			regionDenyIdentified: Primitives.Boolean.decode(buffer, state),
			regionDenyTransacted: Primitives.Boolean.decode(buffer, state),
		},
		ageVerificationBlock: {
			regionDenyAgeUnverified: Primitives.Boolean.decode(buffer, state),
		},
		regionAllowAccessBlock: {
			regionAllowAccessOverride: Primitives.Boolean.decode(buffer, state),
		},
		parcelEnvironmentBlock: {
			parcelEnvironmentVersion: Primitives.S32.decode(buffer, state),
			regionAllowEnvironmentOverride: Primitives.Boolean.decode(buffer, state),
		},
	}
}
