/**
 * PayPriceReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface PayPriceReplyData {
	objectData: {
		objectId: Types.UUID
		defaultPayPrice: number
	}
	buttonData: {
		payButton: number
	}[]
}

export const id = 162
export const name = "PayPriceReply"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "objectData" entry (fixed-length parameters only)
const OBJECT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // objectId
	Primitives.S32.size() // defaultPayPrice

// base byte size for one "buttonData" entry (fixed-length parameters only)
const BUTTON_DATA_BASE_SIZE = Primitives.S32.size() // payButton

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + OBJECT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<PayPriceReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += BUTTON_DATA_BASE_SIZE * (data.buttonData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ObjectData
	offset = Primitives.UUID.encode(data.objectData.objectId, buffer, offset)
	offset = Primitives.S32.encode(data.objectData.defaultPayPrice, buffer, offset)

	// ButtonData
	offset = Primitives.U8.encode(data.buttonData?.length ?? 0, buffer, offset)

	for (const item of data.buttonData ?? []) {
		offset = Primitives.S32.encode(item.payButton, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): PayPriceReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		objectData: {
			objectId: Primitives.UUID.decode(buffer, state),
			defaultPayPrice: Primitives.S32.decode(buffer, state),
		},
		buttonData: (() => {
			const items: PayPriceReplyData["buttonData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					payButton: Primitives.S32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
