/**
 * PlacesReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface PlacesReplyData {
	agentData: {
		agentId?: Types.UUID
		queryId: Types.UUID
	}
	transactionData: {
		transactionId: Types.UUID
	}
	queryData: {
		ownerId: Types.UUID
		name: Buffer
		desc: Buffer
		actualArea: number
		billableArea: number
		flags: number
		globalX: number
		globalY: number
		globalZ: number
		simName: Buffer
		snapshotId: Types.UUID
		dwell: number
		price: number
	}[]
}

export const id = 30
export const name = "PlacesReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // queryId

// base byte size for one "transactionData" entry (fixed-length parameters only)
const TRANSACTION_DATA_BASE_SIZE = Primitives.UUID.size() // transactionId

// base byte size for one "queryData" entry (fixed-length parameters only)
const QUERY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // ownerId
	Primitives.S32.size() + // actualArea
	Primitives.S32.size() + // billableArea
	Primitives.U8.size() + // flags
	Primitives.F32.size() + // globalX
	Primitives.F32.size() + // globalY
	Primitives.F32.size() + // globalZ
	Primitives.UUID.size() + // snapshotId
	Primitives.F32.size() + // dwell
	Primitives.S32.size() // price

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + TRANSACTION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<PlacesReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += QUERY_DATA_BASE_SIZE * (data.queryData?.length ?? 0)

	for (const item of data.queryData ?? []) {
		size += Primitives.Variable1.size(item.name)
		size += Primitives.Variable1.size(item.desc)
		size += Primitives.Variable1.size(item.simName)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.queryId, buffer, offset)

	// TransactionData
	offset = Primitives.UUID.encode(data.transactionData.transactionId, buffer, offset)

	// QueryData
	offset = Primitives.U8.encode(data.queryData?.length ?? 0, buffer, offset)

	for (const item of data.queryData ?? []) {
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
		offset = Primitives.Variable1.encode(item.desc, buffer, offset)
		offset = Primitives.S32.encode(item.actualArea, buffer, offset)
		offset = Primitives.S32.encode(item.billableArea, buffer, offset)
		offset = Primitives.U8.encode(item.flags, buffer, offset)
		offset = Primitives.F32.encode(item.globalX, buffer, offset)
		offset = Primitives.F32.encode(item.globalY, buffer, offset)
		offset = Primitives.F32.encode(item.globalZ, buffer, offset)
		offset = Primitives.Variable1.encode(item.simName, buffer, offset)
		offset = Primitives.UUID.encode(item.snapshotId, buffer, offset)
		offset = Primitives.F32.encode(item.dwell, buffer, offset)
		offset = Primitives.S32.encode(item.price, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): PlacesReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			queryId: Primitives.UUID.decode(buffer, state),
		},
		transactionData: {
			transactionId: Primitives.UUID.decode(buffer, state),
		},
		queryData: (() => {
			const items: PlacesReplyData["queryData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					ownerId: Primitives.UUID.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
					desc: Primitives.Variable1.decode(buffer, state),
					actualArea: Primitives.S32.decode(buffer, state),
					billableArea: Primitives.S32.decode(buffer, state),
					flags: Primitives.U8.decode(buffer, state),
					globalX: Primitives.F32.decode(buffer, state),
					globalY: Primitives.F32.decode(buffer, state),
					globalZ: Primitives.F32.decode(buffer, state),
					simName: Primitives.Variable1.decode(buffer, state),
					snapshotId: Primitives.UUID.decode(buffer, state),
					dwell: Primitives.F32.decode(buffer, state),
					price: Primitives.S32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
