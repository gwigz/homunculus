/**
 * RegionHandshake Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RegionHandshakeData {
	regionInfo: {
		regionFlags: number
		simAccess: number
		simName: Buffer
		simOwner: Types.UUID
		isEstateManager: boolean
		waterHeight: number
		billableFactor: number
		cacheId: Types.UUID
		terrainBase0: Types.UUID
		terrainBase1: Types.UUID
		terrainBase2: Types.UUID
		terrainBase3: Types.UUID
		terrainDetail0: Types.UUID
		terrainDetail1: Types.UUID
		terrainDetail2: Types.UUID
		terrainDetail3: Types.UUID
		terrainStartHeight00: number
		terrainStartHeight01: number
		terrainStartHeight10: number
		terrainStartHeight11: number
		terrainHeightRange00: number
		terrainHeightRange01: number
		terrainHeightRange10: number
		terrainHeightRange11: number
	}
	regionInfo2: {
		regionId: Types.UUID
	}
	regionInfo3: {
		cpuClassId: number
		cpuRatio: number
		coloName: Buffer
		productSku: Buffer
		productName: Buffer
	}
	regionInfo4: {
		regionFlagsExtended: number | bigint
		regionProtocols: number | bigint
	}[]
}

export const id = 148
export const name = "RegionHandshake"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "regionInfo" entry (fixed-length parameters only)
const REGION_INFO_BASE_SIZE =
	Primitives.U32.size() + // regionFlags
	Primitives.U8.size() + // simAccess
	Primitives.UUID.size() + // simOwner
	Primitives.Boolean.size() + // isEstateManager
	Primitives.F32.size() + // waterHeight
	Primitives.F32.size() + // billableFactor
	Primitives.UUID.size() + // cacheId
	Primitives.UUID.size() + // terrainBase0
	Primitives.UUID.size() + // terrainBase1
	Primitives.UUID.size() + // terrainBase2
	Primitives.UUID.size() + // terrainBase3
	Primitives.UUID.size() + // terrainDetail0
	Primitives.UUID.size() + // terrainDetail1
	Primitives.UUID.size() + // terrainDetail2
	Primitives.UUID.size() + // terrainDetail3
	Primitives.F32.size() + // terrainStartHeight00
	Primitives.F32.size() + // terrainStartHeight01
	Primitives.F32.size() + // terrainStartHeight10
	Primitives.F32.size() + // terrainStartHeight11
	Primitives.F32.size() + // terrainHeightRange00
	Primitives.F32.size() + // terrainHeightRange01
	Primitives.F32.size() + // terrainHeightRange10
	Primitives.F32.size() // terrainHeightRange11

// base byte size for one "regionInfo2" entry (fixed-length parameters only)
const REGION_INFO2_BASE_SIZE = Primitives.UUID.size() // regionId

// base byte size for one "regionInfo3" entry (fixed-length parameters only)
const REGION_INFO3_BASE_SIZE =
	Primitives.S32.size() + // cpuClassId
	Primitives.S32.size() // cpuRatio

// base byte size for one "regionInfo4" entry (fixed-length parameters only)
const REGION_INFO4_BASE_SIZE =
	Primitives.U64.size() + // regionFlagsExtended
	Primitives.U64.size() // regionProtocols

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REGION_INFO_BASE_SIZE + REGION_INFO2_BASE_SIZE + REGION_INFO3_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RegionHandshakeData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.regionInfo.simName)

	size += Primitives.Variable1.size(data.regionInfo3.coloName)
	size += Primitives.Variable1.size(data.regionInfo3.productSku)
	size += Primitives.Variable1.size(data.regionInfo3.productName)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += REGION_INFO4_BASE_SIZE * (data.regionInfo4?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// RegionInfo
	offset = Primitives.U32.encode(data.regionInfo.regionFlags, buffer, offset)
	offset = Primitives.U8.encode(data.regionInfo.simAccess, buffer, offset)
	offset = Primitives.Variable1.encode(data.regionInfo.simName, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.simOwner, buffer, offset)
	offset = Primitives.Boolean.encode(data.regionInfo.isEstateManager, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.waterHeight, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.billableFactor, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.cacheId, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainBase0, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainBase1, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainBase2, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainBase3, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainDetail0, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainDetail1, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainDetail2, buffer, offset)
	offset = Primitives.UUID.encode(data.regionInfo.terrainDetail3, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainStartHeight00, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainStartHeight01, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainStartHeight10, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainStartHeight11, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainHeightRange00, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainHeightRange01, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainHeightRange10, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainHeightRange11, buffer, offset)

	// RegionInfo2
	offset = Primitives.UUID.encode(data.regionInfo2.regionId, buffer, offset)

	// RegionInfo3
	offset = Primitives.S32.encode(data.regionInfo3.cpuClassId, buffer, offset)
	offset = Primitives.S32.encode(data.regionInfo3.cpuRatio, buffer, offset)
	offset = Primitives.Variable1.encode(data.regionInfo3.coloName, buffer, offset)
	offset = Primitives.Variable1.encode(data.regionInfo3.productSku, buffer, offset)
	offset = Primitives.Variable1.encode(data.regionInfo3.productName, buffer, offset)

	// RegionInfo4
	offset = Primitives.U8.encode(data.regionInfo4?.length ?? 0, buffer, offset)

	for (const item of data.regionInfo4 ?? []) {
		offset = Primitives.U64.encode(item.regionFlagsExtended, buffer, offset)
		offset = Primitives.U64.encode(item.regionProtocols, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): RegionHandshakeData {
	const state = { offset: HEADER_SIZE }

	return {
		regionInfo: {
			regionFlags: Primitives.U32.decode(buffer, state),
			simAccess: Primitives.U8.decode(buffer, state),
			simName: Primitives.Variable1.decode(buffer, state),
			simOwner: Primitives.UUID.decode(buffer, state),
			isEstateManager: Primitives.Boolean.decode(buffer, state),
			waterHeight: Primitives.F32.decode(buffer, state),
			billableFactor: Primitives.F32.decode(buffer, state),
			cacheId: Primitives.UUID.decode(buffer, state),
			terrainBase0: Primitives.UUID.decode(buffer, state),
			terrainBase1: Primitives.UUID.decode(buffer, state),
			terrainBase2: Primitives.UUID.decode(buffer, state),
			terrainBase3: Primitives.UUID.decode(buffer, state),
			terrainDetail0: Primitives.UUID.decode(buffer, state),
			terrainDetail1: Primitives.UUID.decode(buffer, state),
			terrainDetail2: Primitives.UUID.decode(buffer, state),
			terrainDetail3: Primitives.UUID.decode(buffer, state),
			terrainStartHeight00: Primitives.F32.decode(buffer, state),
			terrainStartHeight01: Primitives.F32.decode(buffer, state),
			terrainStartHeight10: Primitives.F32.decode(buffer, state),
			terrainStartHeight11: Primitives.F32.decode(buffer, state),
			terrainHeightRange00: Primitives.F32.decode(buffer, state),
			terrainHeightRange01: Primitives.F32.decode(buffer, state),
			terrainHeightRange10: Primitives.F32.decode(buffer, state),
			terrainHeightRange11: Primitives.F32.decode(buffer, state),
		},
		regionInfo2: {
			regionId: Primitives.UUID.decode(buffer, state),
		},
		regionInfo3: {
			cpuClassId: Primitives.S32.decode(buffer, state),
			cpuRatio: Primitives.S32.decode(buffer, state),
			coloName: Primitives.Variable1.decode(buffer, state),
			productSku: Primitives.Variable1.decode(buffer, state),
			productName: Primitives.Variable1.decode(buffer, state),
		},
		regionInfo4: (() => {
			const items: RegionHandshakeData["regionInfo4"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					regionFlagsExtended: Primitives.U64.decode(buffer, state),
					regionProtocols: Primitives.U64.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
