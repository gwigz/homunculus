/**
 * RegionInfo Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RegionInfoData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	regionInfo: {
		simName: Buffer
		estateId: number
		parentEstateId: number
		regionFlags: number
		simAccess: number
		maxAgents: number
		billableFactor: number
		objectBonusFactor: number
		waterHeight: number
		terrainRaiseLimit: number
		terrainLowerLimit: number
		pricePerMeter: number
		redirectGridX: number
		redirectGridY: number
		useEstateSun: boolean
		sunHour: number
	}
	regionInfo2: {
		productSku: Buffer
		productName: Buffer
		maxAgents32: number
		hardMaxAgents: number
		hardMaxObjects: number
	}
	regionInfo3: {
		regionFlagsExtended: number | bigint
	}[]
	regionInfo5: {
		chatWhisperRange: number
		chatNormalRange: number
		chatShoutRange: number
		chatWhisperOffset: number
		chatNormalOffset: number
		chatShoutOffset: number
		chatFlags: number
	}[]
}

export const id = 142
export const name = "RegionInfo"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "regionInfo" entry (fixed-length parameters only)
const REGION_INFO_BASE_SIZE =
	Primitives.U32.size() + // estateId
	Primitives.U32.size() + // parentEstateId
	Primitives.U32.size() + // regionFlags
	Primitives.U8.size() + // simAccess
	Primitives.U8.size() + // maxAgents
	Primitives.F32.size() + // billableFactor
	Primitives.F32.size() + // objectBonusFactor
	Primitives.F32.size() + // waterHeight
	Primitives.F32.size() + // terrainRaiseLimit
	Primitives.F32.size() + // terrainLowerLimit
	Primitives.S32.size() + // pricePerMeter
	Primitives.S32.size() + // redirectGridX
	Primitives.S32.size() + // redirectGridY
	Primitives.Boolean.size() + // useEstateSun
	Primitives.F32.size() // sunHour

// base byte size for one "regionInfo2" entry (fixed-length parameters only)
const REGION_INFO2_BASE_SIZE =
	Primitives.U32.size() + // maxAgents32
	Primitives.U32.size() + // hardMaxAgents
	Primitives.U32.size() // hardMaxObjects

// base byte size for one "regionInfo3" entry (fixed-length parameters only)
const REGION_INFO3_BASE_SIZE = Primitives.U64.size() // regionFlagsExtended

// base byte size for one "regionInfo5" entry (fixed-length parameters only)
const REGION_INFO5_BASE_SIZE =
	Primitives.F32.size() + // chatWhisperRange
	Primitives.F32.size() + // chatNormalRange
	Primitives.F32.size() + // chatShoutRange
	Primitives.F32.size() + // chatWhisperOffset
	Primitives.F32.size() + // chatNormalOffset
	Primitives.F32.size() + // chatShoutOffset
	Primitives.U32.size() // chatFlags

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + REGION_INFO_BASE_SIZE + REGION_INFO2_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RegionInfoData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.regionInfo.simName)

	size += Primitives.Variable1.size(data.regionInfo2.productSku)
	size += Primitives.Variable1.size(data.regionInfo2.productName)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += REGION_INFO3_BASE_SIZE * (data.regionInfo3?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += REGION_INFO5_BASE_SIZE * (data.regionInfo5?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// RegionInfo
	offset = Primitives.Variable1.encode(data.regionInfo.simName, buffer, offset)
	offset = Primitives.U32.encode(data.regionInfo.estateId, buffer, offset)
	offset = Primitives.U32.encode(data.regionInfo.parentEstateId, buffer, offset)
	offset = Primitives.U32.encode(data.regionInfo.regionFlags, buffer, offset)
	offset = Primitives.U8.encode(data.regionInfo.simAccess, buffer, offset)
	offset = Primitives.U8.encode(data.regionInfo.maxAgents, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.billableFactor, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.objectBonusFactor, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.waterHeight, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainRaiseLimit, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.terrainLowerLimit, buffer, offset)
	offset = Primitives.S32.encode(data.regionInfo.pricePerMeter, buffer, offset)
	offset = Primitives.S32.encode(data.regionInfo.redirectGridX, buffer, offset)
	offset = Primitives.S32.encode(data.regionInfo.redirectGridY, buffer, offset)
	offset = Primitives.Boolean.encode(data.regionInfo.useEstateSun, buffer, offset)
	offset = Primitives.F32.encode(data.regionInfo.sunHour, buffer, offset)

	// RegionInfo2
	offset = Primitives.Variable1.encode(data.regionInfo2.productSku, buffer, offset)
	offset = Primitives.Variable1.encode(data.regionInfo2.productName, buffer, offset)
	offset = Primitives.U32.encode(data.regionInfo2.maxAgents32, buffer, offset)
	offset = Primitives.U32.encode(data.regionInfo2.hardMaxAgents, buffer, offset)
	offset = Primitives.U32.encode(data.regionInfo2.hardMaxObjects, buffer, offset)

	// RegionInfo3
	offset = Primitives.U8.encode(data.regionInfo3?.length ?? 0, buffer, offset)

	for (const item of data.regionInfo3 ?? []) {
		offset = Primitives.U64.encode(item.regionFlagsExtended, buffer, offset)
	}

	// RegionInfo5
	offset = Primitives.U8.encode(data.regionInfo5?.length ?? 0, buffer, offset)

	for (const item of data.regionInfo5 ?? []) {
		offset = Primitives.F32.encode(item.chatWhisperRange, buffer, offset)
		offset = Primitives.F32.encode(item.chatNormalRange, buffer, offset)
		offset = Primitives.F32.encode(item.chatShoutRange, buffer, offset)
		offset = Primitives.F32.encode(item.chatWhisperOffset, buffer, offset)
		offset = Primitives.F32.encode(item.chatNormalOffset, buffer, offset)
		offset = Primitives.F32.encode(item.chatShoutOffset, buffer, offset)
		offset = Primitives.U32.encode(item.chatFlags, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): RegionInfoData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		regionInfo: {
			simName: Primitives.Variable1.decode(buffer, state),
			estateId: Primitives.U32.decode(buffer, state),
			parentEstateId: Primitives.U32.decode(buffer, state),
			regionFlags: Primitives.U32.decode(buffer, state),
			simAccess: Primitives.U8.decode(buffer, state),
			maxAgents: Primitives.U8.decode(buffer, state),
			billableFactor: Primitives.F32.decode(buffer, state),
			objectBonusFactor: Primitives.F32.decode(buffer, state),
			waterHeight: Primitives.F32.decode(buffer, state),
			terrainRaiseLimit: Primitives.F32.decode(buffer, state),
			terrainLowerLimit: Primitives.F32.decode(buffer, state),
			pricePerMeter: Primitives.S32.decode(buffer, state),
			redirectGridX: Primitives.S32.decode(buffer, state),
			redirectGridY: Primitives.S32.decode(buffer, state),
			useEstateSun: Primitives.Boolean.decode(buffer, state),
			sunHour: Primitives.F32.decode(buffer, state),
		},
		regionInfo2: {
			productSku: Primitives.Variable1.decode(buffer, state),
			productName: Primitives.Variable1.decode(buffer, state),
			maxAgents32: Primitives.U32.decode(buffer, state),
			hardMaxAgents: Primitives.U32.decode(buffer, state),
			hardMaxObjects: Primitives.U32.decode(buffer, state),
		},
		regionInfo3: (() => {
			const items: RegionInfoData["regionInfo3"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					regionFlagsExtended: Primitives.U64.decode(buffer, state),
				})
			}

			return items
		})(),
		regionInfo5: (() => {
			const items: RegionInfoData["regionInfo5"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					chatWhisperRange: Primitives.F32.decode(buffer, state),
					chatNormalRange: Primitives.F32.decode(buffer, state),
					chatShoutRange: Primitives.F32.decode(buffer, state),
					chatWhisperOffset: Primitives.F32.decode(buffer, state),
					chatNormalOffset: Primitives.F32.decode(buffer, state),
					chatShoutOffset: Primitives.F32.decode(buffer, state),
					chatFlags: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
