/**
 * RegionPresenceResponse Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RegionPresenceResponseData {
	regionData: {
		regionId: Types.UUID
		regionHandle: number | bigint
		internalRegionIp: Types.IP
		externalRegionIp: Types.IP
		regionPort: Types.Port
		validUntil: number
		message: Buffer
	}[]
}

export const id = 16
export const name = "RegionPresenceResponse"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "regionData" entry (fixed-length parameters only)
const REGION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // regionId
	Primitives.U64.size() + // regionHandle
	Primitives.IP.size() + // internalRegionIp
	Primitives.IP.size() + // externalRegionIp
	Primitives.Port.size() + // regionPort
	Primitives.F64.size() // validUntil

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RegionPresenceResponseData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += REGION_DATA_BASE_SIZE * (data.regionData?.length ?? 0)

	for (const item of data.regionData ?? []) {
		size += Primitives.Variable1.size(item.message)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// RegionData
	offset = Primitives.U8.encode(data.regionData?.length ?? 0, buffer, offset)

	for (const item of data.regionData ?? []) {
		offset = Primitives.UUID.encode(item.regionId, buffer, offset)
		offset = Primitives.U64.encode(item.regionHandle, buffer, offset)
		offset = Primitives.IP.encode(item.internalRegionIp, buffer, offset)
		offset = Primitives.IP.encode(item.externalRegionIp, buffer, offset)
		offset = Primitives.Port.encode(item.regionPort, buffer, offset)
		offset = Primitives.F64.encode(item.validUntil, buffer, offset)
		offset = Primitives.Variable1.encode(item.message, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): RegionPresenceResponseData {
	const state = { offset: HEADER_SIZE }

	return {
		regionData: (() => {
			const items: RegionPresenceResponseData["regionData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					regionId: Primitives.UUID.decode(buffer, state),
					regionHandle: Primitives.U64.decode(buffer, state),
					internalRegionIp: Primitives.IP.decode(buffer, state),
					externalRegionIp: Primitives.IP.decode(buffer, state),
					regionPort: Primitives.Port.decode(buffer, state),
					validUntil: Primitives.F64.decode(buffer, state),
					message: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
