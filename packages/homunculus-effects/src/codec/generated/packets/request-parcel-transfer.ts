/**
 * RequestParcelTransfer Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RequestParcelTransferData {
	data: {
		transactionId: Types.UUID
		transactionTime: number
		sourceId: Types.UUID
		destId: Types.UUID
		ownerId: Types.UUID
		flags: number
		transactionType: number
		amount: number
		billableArea: number
		actualArea: number
		final: boolean
	}
	regionData: {
		regionId: Types.UUID
		gridX: number
		gridY: number
	}
}

export const id = 220
export const name = "RequestParcelTransfer"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE =
	Primitives.UUID.size() + // transactionId
	Primitives.U32.size() + // transactionTime
	Primitives.UUID.size() + // sourceId
	Primitives.UUID.size() + // destId
	Primitives.UUID.size() + // ownerId
	Primitives.U8.size() + // flags
	Primitives.S32.size() + // transactionType
	Primitives.S32.size() + // amount
	Primitives.S32.size() + // billableArea
	Primitives.S32.size() + // actualArea
	Primitives.Boolean.size() // final

// base byte size for one "regionData" entry (fixed-length parameters only)
const REGION_DATA_BASE_SIZE =
	Primitives.UUID.size() + // regionId
	Primitives.U32.size() + // gridX
	Primitives.U32.size() // gridY

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + DATA_BASE_SIZE + REGION_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RequestParcelTransferData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Data
	offset = Primitives.UUID.encode(data.data.transactionId, buffer, offset)
	offset = Primitives.U32.encode(data.data.transactionTime, buffer, offset)
	offset = Primitives.UUID.encode(data.data.sourceId, buffer, offset)
	offset = Primitives.UUID.encode(data.data.destId, buffer, offset)
	offset = Primitives.UUID.encode(data.data.ownerId, buffer, offset)
	offset = Primitives.U8.encode(data.data.flags, buffer, offset)
	offset = Primitives.S32.encode(data.data.transactionType, buffer, offset)
	offset = Primitives.S32.encode(data.data.amount, buffer, offset)
	offset = Primitives.S32.encode(data.data.billableArea, buffer, offset)
	offset = Primitives.S32.encode(data.data.actualArea, buffer, offset)
	offset = Primitives.Boolean.encode(data.data.final, buffer, offset)

	// RegionData
	offset = Primitives.UUID.encode(data.regionData.regionId, buffer, offset)
	offset = Primitives.U32.encode(data.regionData.gridX, buffer, offset)
	offset = Primitives.U32.encode(data.regionData.gridY, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): RequestParcelTransferData {
	const state = { offset: HEADER_SIZE }

	return {
		data: {
			transactionId: Primitives.UUID.decode(buffer, state),
			transactionTime: Primitives.U32.decode(buffer, state),
			sourceId: Primitives.UUID.decode(buffer, state),
			destId: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			flags: Primitives.U8.decode(buffer, state),
			transactionType: Primitives.S32.decode(buffer, state),
			amount: Primitives.S32.decode(buffer, state),
			billableArea: Primitives.S32.decode(buffer, state),
			actualArea: Primitives.S32.decode(buffer, state),
			final: Primitives.Boolean.decode(buffer, state),
		},
		regionData: {
			regionId: Primitives.UUID.decode(buffer, state),
			gridX: Primitives.U32.decode(buffer, state),
			gridY: Primitives.U32.decode(buffer, state),
		},
	}
}
