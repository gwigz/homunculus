/**
 * RequestXfer Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RequestXferData {
	xferId: {
		id: number | bigint
		filename: Buffer
		filePath: number
		deleteOnCompletion: boolean
		useBigPackets: boolean
		vFileId: Types.UUID
		vFileType: number
	}
}

export const id = 156
export const name = "RequestXfer"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "xferId" entry (fixed-length parameters only)
const XFER_ID_BASE_SIZE =
	Primitives.U64.size() + // id
	Primitives.U8.size() + // filePath
	Primitives.Boolean.size() + // deleteOnCompletion
	Primitives.Boolean.size() + // useBigPackets
	Primitives.UUID.size() + // vFileId
	Primitives.S16.size() // vFileType

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + XFER_ID_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RequestXferData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.xferId.filename)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// XferId
	offset = Primitives.U64.encode(data.xferId.id, buffer, offset)
	offset = Primitives.Variable1.encode(data.xferId.filename, buffer, offset)
	offset = Primitives.U8.encode(data.xferId.filePath, buffer, offset)
	offset = Primitives.Boolean.encode(data.xferId.deleteOnCompletion, buffer, offset)
	offset = Primitives.Boolean.encode(data.xferId.useBigPackets, buffer, offset)
	offset = Primitives.UUID.encode(data.xferId.vFileId, buffer, offset)
	offset = Primitives.S16.encode(data.xferId.vFileType, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): RequestXferData {
	const state = { offset: HEADER_SIZE }

	return {
		xferId: {
			id: Primitives.U64.decode(buffer, state),
			filename: Primitives.Variable1.decode(buffer, state),
			filePath: Primitives.U8.decode(buffer, state),
			deleteOnCompletion: Primitives.Boolean.decode(buffer, state),
			useBigPackets: Primitives.Boolean.decode(buffer, state),
			vFileId: Primitives.UUID.decode(buffer, state),
			vFileType: Primitives.S16.decode(buffer, state),
		},
	}
}
