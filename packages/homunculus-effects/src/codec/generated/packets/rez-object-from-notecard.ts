/**
 * RezObjectFromNotecard Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RezObjectFromNotecardData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		groupId: Types.UUID
	}
	rezData: {
		fromTaskId: Types.UUID
		bypassRaycast: number
		rayStart: Types.Vector3
		rayEnd: Types.Vector3
		rayTargetId: Types.UUID
		rayEndIsIntersection: boolean
		rezSelected: boolean
		removeItem: boolean
		itemFlags: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
	}
	notecardData: {
		notecardItemId: Types.UUID
		objectId: Types.UUID
	}
	inventoryData: {
		itemId: Types.UUID
	}[]
}

export const id = 294
export const name = "RezObjectFromNotecard"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.UUID.size() // groupId

// base byte size for one "rezData" entry (fixed-length parameters only)
const REZ_DATA_BASE_SIZE =
	Primitives.UUID.size() + // fromTaskId
	Primitives.U8.size() + // bypassRaycast
	Primitives.Vector3.size() + // rayStart
	Primitives.Vector3.size() + // rayEnd
	Primitives.UUID.size() + // rayTargetId
	Primitives.Boolean.size() + // rayEndIsIntersection
	Primitives.Boolean.size() + // rezSelected
	Primitives.Boolean.size() + // removeItem
	Primitives.U32.size() + // itemFlags
	Primitives.U32.size() + // groupMask
	Primitives.U32.size() + // everyoneMask
	Primitives.U32.size() // nextOwnerMask

// base byte size for one "notecardData" entry (fixed-length parameters only)
const NOTECARD_DATA_BASE_SIZE =
	Primitives.UUID.size() + // notecardItemId
	Primitives.UUID.size() // objectId

// base byte size for one "inventoryData" entry (fixed-length parameters only)
const INVENTORY_DATA_BASE_SIZE = Primitives.UUID.size() // itemId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + REZ_DATA_BASE_SIZE + NOTECARD_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RezObjectFromNotecardData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += INVENTORY_DATA_BASE_SIZE * (data.inventoryData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.groupId, buffer, offset)

	// RezData
	offset = Primitives.UUID.encode(data.rezData.fromTaskId, buffer, offset)
	offset = Primitives.U8.encode(data.rezData.bypassRaycast, buffer, offset)
	offset = Primitives.Vector3.encode(data.rezData.rayStart, buffer, offset)
	offset = Primitives.Vector3.encode(data.rezData.rayEnd, buffer, offset)
	offset = Primitives.UUID.encode(data.rezData.rayTargetId, buffer, offset)
	offset = Primitives.Boolean.encode(data.rezData.rayEndIsIntersection, buffer, offset)
	offset = Primitives.Boolean.encode(data.rezData.rezSelected, buffer, offset)
	offset = Primitives.Boolean.encode(data.rezData.removeItem, buffer, offset)
	offset = Primitives.U32.encode(data.rezData.itemFlags, buffer, offset)
	offset = Primitives.U32.encode(data.rezData.groupMask, buffer, offset)
	offset = Primitives.U32.encode(data.rezData.everyoneMask, buffer, offset)
	offset = Primitives.U32.encode(data.rezData.nextOwnerMask, buffer, offset)

	// NotecardData
	offset = Primitives.UUID.encode(data.notecardData.notecardItemId, buffer, offset)
	offset = Primitives.UUID.encode(data.notecardData.objectId, buffer, offset)

	// InventoryData
	offset = Primitives.U8.encode(data.inventoryData?.length ?? 0, buffer, offset)

	for (const item of data.inventoryData ?? []) {
		offset = Primitives.UUID.encode(item.itemId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): RezObjectFromNotecardData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
		},
		rezData: {
			fromTaskId: Primitives.UUID.decode(buffer, state),
			bypassRaycast: Primitives.U8.decode(buffer, state),
			rayStart: Primitives.Vector3.decode(buffer, state),
			rayEnd: Primitives.Vector3.decode(buffer, state),
			rayTargetId: Primitives.UUID.decode(buffer, state),
			rayEndIsIntersection: Primitives.Boolean.decode(buffer, state),
			rezSelected: Primitives.Boolean.decode(buffer, state),
			removeItem: Primitives.Boolean.decode(buffer, state),
			itemFlags: Primitives.U32.decode(buffer, state),
			groupMask: Primitives.U32.decode(buffer, state),
			everyoneMask: Primitives.U32.decode(buffer, state),
			nextOwnerMask: Primitives.U32.decode(buffer, state),
		},
		notecardData: {
			notecardItemId: Primitives.UUID.decode(buffer, state),
			objectId: Primitives.UUID.decode(buffer, state),
		},
		inventoryData: (() => {
			const items: RezObjectFromNotecardData["inventoryData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					itemId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
