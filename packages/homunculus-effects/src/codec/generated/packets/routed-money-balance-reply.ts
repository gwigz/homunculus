/**
 * RoutedMoneyBalanceReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RoutedMoneyBalanceReplyData {
	targetBlock: {
		targetIp: Types.IP
		targetPort: Types.Port
	}
	moneyData: {
		agentId: Types.UUID
		transactionId: Types.UUID
		transactionSuccess: boolean
		moneyBalance: number
		squareMetersCredit: number
		squareMetersCommitted: number
		description: Buffer
	}
	transactionInfo: {
		transactionType: number
		sourceId: Types.UUID
		isSourceGroup: boolean
		destId: Types.UUID
		isDestGroup: boolean
		amount: number
		itemDescription: Buffer
	}
}

export const id = 315
export const name = "RoutedMoneyBalanceReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "targetBlock" entry (fixed-length parameters only)
const TARGET_BLOCK_BASE_SIZE =
	Primitives.IP.size() + // targetIp
	Primitives.Port.size() // targetPort

// base byte size for one "moneyData" entry (fixed-length parameters only)
const MONEY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // transactionId
	Primitives.Boolean.size() + // transactionSuccess
	Primitives.S32.size() + // moneyBalance
	Primitives.S32.size() + // squareMetersCredit
	Primitives.S32.size() // squareMetersCommitted

// base byte size for one "transactionInfo" entry (fixed-length parameters only)
const TRANSACTION_INFO_BASE_SIZE =
	Primitives.S32.size() + // transactionType
	Primitives.UUID.size() + // sourceId
	Primitives.Boolean.size() + // isSourceGroup
	Primitives.UUID.size() + // destId
	Primitives.Boolean.size() + // isDestGroup
	Primitives.S32.size() // amount

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TARGET_BLOCK_BASE_SIZE + MONEY_DATA_BASE_SIZE + TRANSACTION_INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RoutedMoneyBalanceReplyData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.moneyData.description)

	size += Primitives.Variable1.size(data.transactionInfo.itemDescription)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TargetBlock
	offset = Primitives.IP.encode(data.targetBlock.targetIp, buffer, offset)
	offset = Primitives.Port.encode(data.targetBlock.targetPort, buffer, offset)

	// MoneyData
	offset = Primitives.UUID.encode(data.moneyData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.moneyData.transactionId, buffer, offset)
	offset = Primitives.Boolean.encode(data.moneyData.transactionSuccess, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.moneyBalance, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.squareMetersCredit, buffer, offset)
	offset = Primitives.S32.encode(data.moneyData.squareMetersCommitted, buffer, offset)
	offset = Primitives.Variable1.encode(data.moneyData.description, buffer, offset)

	// TransactionInfo
	offset = Primitives.S32.encode(data.transactionInfo.transactionType, buffer, offset)
	offset = Primitives.UUID.encode(data.transactionInfo.sourceId, buffer, offset)
	offset = Primitives.Boolean.encode(data.transactionInfo.isSourceGroup, buffer, offset)
	offset = Primitives.UUID.encode(data.transactionInfo.destId, buffer, offset)
	offset = Primitives.Boolean.encode(data.transactionInfo.isDestGroup, buffer, offset)
	offset = Primitives.S32.encode(data.transactionInfo.amount, buffer, offset)
	offset = Primitives.Variable1.encode(data.transactionInfo.itemDescription, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): RoutedMoneyBalanceReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		targetBlock: {
			targetIp: Primitives.IP.decode(buffer, state),
			targetPort: Primitives.Port.decode(buffer, state),
		},
		moneyData: {
			agentId: Primitives.UUID.decode(buffer, state),
			transactionId: Primitives.UUID.decode(buffer, state),
			transactionSuccess: Primitives.Boolean.decode(buffer, state),
			moneyBalance: Primitives.S32.decode(buffer, state),
			squareMetersCredit: Primitives.S32.decode(buffer, state),
			squareMetersCommitted: Primitives.S32.decode(buffer, state),
			description: Primitives.Variable1.decode(buffer, state),
		},
		transactionInfo: {
			transactionType: Primitives.S32.decode(buffer, state),
			sourceId: Primitives.UUID.decode(buffer, state),
			isSourceGroup: Primitives.Boolean.decode(buffer, state),
			destId: Primitives.UUID.decode(buffer, state),
			isDestGroup: Primitives.Boolean.decode(buffer, state),
			amount: Primitives.S32.decode(buffer, state),
			itemDescription: Primitives.Variable1.decode(buffer, state),
		},
	}
}
