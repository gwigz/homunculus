/**
 * RpcChannelReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface RpcChannelReplyData {
	dataBlock: {
		taskId: Types.UUID
		itemId: Types.UUID
		channelId: Types.UUID
	}
}

export const id = 414
export const name = "RpcChannelReply"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "dataBlock" entry (fixed-length parameters only)
const DATA_BLOCK_BASE_SIZE =
	Primitives.UUID.size() + // taskId
	Primitives.UUID.size() + // itemId
	Primitives.UUID.size() // channelId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + DATA_BLOCK_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<RpcChannelReplyData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// DataBlock
	offset = Primitives.UUID.encode(data.dataBlock.taskId, buffer, offset)
	offset = Primitives.UUID.encode(data.dataBlock.itemId, buffer, offset)
	offset = Primitives.UUID.encode(data.dataBlock.channelId, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): RpcChannelReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		dataBlock: {
			taskId: Primitives.UUID.decode(buffer, state),
			itemId: Primitives.UUID.decode(buffer, state),
			channelId: Primitives.UUID.decode(buffer, state),
		},
	}
}
