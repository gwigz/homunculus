/**
 * ScriptDialog Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ScriptDialogData {
	data: {
		objectId: Types.UUID
		firstName: Buffer
		lastName: Buffer
		objectName: Buffer
		message: Buffer
		chatChannel: number
		imageId: Types.UUID
	}
	buttons: {
		buttonLabel: Buffer
	}[]
	ownerData: {
		ownerId: Types.UUID
	}[]
}

export const id = 190
export const name = "ScriptDialog"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE =
	Primitives.UUID.size() + // objectId
	Primitives.S32.size() + // chatChannel
	Primitives.UUID.size() // imageId

// base byte size for one "ownerData" entry (fixed-length parameters only)
const OWNER_DATA_BASE_SIZE = Primitives.UUID.size() // ownerId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ScriptDialogData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.data.firstName)
	size += Primitives.Variable1.size(data.data.lastName)
	size += Primitives.Variable1.size(data.data.objectName)
	size += Primitives.Variable2.size(data.data.message)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	for (const item of data.buttons ?? []) {
		size += Primitives.Variable1.size(item.buttonLabel)
	}

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += OWNER_DATA_BASE_SIZE * (data.ownerData?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Data
	offset = Primitives.UUID.encode(data.data.objectId, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.firstName, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.lastName, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.objectName, buffer, offset)
	offset = Primitives.Variable2.encode(data.data.message, buffer, offset)
	offset = Primitives.S32.encode(data.data.chatChannel, buffer, offset)
	offset = Primitives.UUID.encode(data.data.imageId, buffer, offset)

	// Buttons
	offset = Primitives.U8.encode(data.buttons?.length ?? 0, buffer, offset)

	for (const item of data.buttons ?? []) {
		offset = Primitives.Variable1.encode(item.buttonLabel, buffer, offset)
	}

	// OwnerData
	offset = Primitives.U8.encode(data.ownerData?.length ?? 0, buffer, offset)

	for (const item of data.ownerData ?? []) {
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ScriptDialogData {
	const state = { offset: HEADER_SIZE }

	return {
		data: {
			objectId: Primitives.UUID.decode(buffer, state),
			firstName: Primitives.Variable1.decode(buffer, state),
			lastName: Primitives.Variable1.decode(buffer, state),
			objectName: Primitives.Variable1.decode(buffer, state),
			message: Primitives.Variable2.decode(buffer, state),
			chatChannel: Primitives.S32.decode(buffer, state),
			imageId: Primitives.UUID.decode(buffer, state),
		},
		buttons: (() => {
			const items: ScriptDialogData["buttons"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					buttonLabel: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
		ownerData: (() => {
			const items: ScriptDialogData["ownerData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					ownerId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
