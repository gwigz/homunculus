/**
 * ScriptSensorReply Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ScriptSensorReplyData {
	requester: {
		sourceId: Types.UUID
	}
	sensedData: {
		objectId: Types.UUID
		ownerId: Types.UUID
		groupId: Types.UUID
		position: Types.Vector3
		velocity: Types.Vector3
		rotation: Types.Quaternion
		name: Buffer
		type: number
		range: number
	}[]
}

export const id = 248
export const name = "ScriptSensorReply"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "requester" entry (fixed-length parameters only)
const REQUESTER_BASE_SIZE = Primitives.UUID.size() // sourceId

// base byte size for one "sensedData" entry (fixed-length parameters only)
const SENSED_DATA_BASE_SIZE =
	Primitives.UUID.size() + // objectId
	Primitives.UUID.size() + // ownerId
	Primitives.UUID.size() + // groupId
	Primitives.Vector3.size() + // position
	Primitives.Vector3.size() + // velocity
	Primitives.Quaternion.size() + // rotation
	Primitives.S32.size() + // type
	Primitives.F32.size() // range

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REQUESTER_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ScriptSensorReplyData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += SENSED_DATA_BASE_SIZE * (data.sensedData?.length ?? 0)

	for (const item of data.sensedData ?? []) {
		size += Primitives.Variable1.size(item.name)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Requester
	offset = Primitives.UUID.encode(data.requester.sourceId, buffer, offset)

	// SensedData
	offset = Primitives.U8.encode(data.sensedData?.length ?? 0, buffer, offset)

	for (const item of data.sensedData ?? []) {
		offset = Primitives.UUID.encode(item.objectId, buffer, offset)
		offset = Primitives.UUID.encode(item.ownerId, buffer, offset)
		offset = Primitives.UUID.encode(item.groupId, buffer, offset)
		offset = Primitives.Vector3.encode(item.position, buffer, offset)
		offset = Primitives.Vector3.encode(item.velocity, buffer, offset)
		offset = Primitives.Quaternion.encode(item.rotation, buffer, offset)
		offset = Primitives.Variable1.encode(item.name, buffer, offset)
		offset = Primitives.S32.encode(item.type, buffer, offset)
		offset = Primitives.F32.encode(item.range, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ScriptSensorReplyData {
	const state = { offset: HEADER_SIZE }

	return {
		requester: {
			sourceId: Primitives.UUID.decode(buffer, state),
		},
		sensedData: (() => {
			const items: ScriptSensorReplyData["sensedData"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					objectId: Primitives.UUID.decode(buffer, state),
					ownerId: Primitives.UUID.decode(buffer, state),
					groupId: Primitives.UUID.decode(buffer, state),
					position: Primitives.Vector3.decode(buffer, state),
					velocity: Primitives.Vector3.decode(buffer, state),
					rotation: Primitives.Quaternion.decode(buffer, state),
					name: Primitives.Variable1.decode(buffer, state),
					type: Primitives.S32.decode(buffer, state),
					range: Primitives.F32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
