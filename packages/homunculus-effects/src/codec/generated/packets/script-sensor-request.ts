/**
 * ScriptSensorRequest Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ScriptSensorRequestData {
	requester: {
		sourceId: Types.UUID
		requestId: Types.UUID
		searchId: Types.UUID
		searchPos: Types.Vector3
		searchDir: Types.Quaternion
		searchName: Buffer
		type: number
		range: number
		arc: number
		regionHandle: number | bigint
		searchRegions: number
	}
}

export const id = 247
export const name = "ScriptSensorRequest"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "requester" entry (fixed-length parameters only)
const REQUESTER_BASE_SIZE =
	Primitives.UUID.size() + // sourceId
	Primitives.UUID.size() + // requestId
	Primitives.UUID.size() + // searchId
	Primitives.Vector3.size() + // searchPos
	Primitives.Quaternion.size() + // searchDir
	Primitives.S32.size() + // type
	Primitives.F32.size() + // range
	Primitives.F32.size() + // arc
	Primitives.U64.size() + // regionHandle
	Primitives.U8.size() // searchRegions

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REQUESTER_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ScriptSensorRequestData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.requester.searchName)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Requester
	offset = Primitives.UUID.encode(data.requester.sourceId, buffer, offset)
	offset = Primitives.UUID.encode(data.requester.requestId, buffer, offset)
	offset = Primitives.UUID.encode(data.requester.searchId, buffer, offset)
	offset = Primitives.Vector3.encode(data.requester.searchPos, buffer, offset)
	offset = Primitives.Quaternion.encode(data.requester.searchDir, buffer, offset)
	offset = Primitives.Variable1.encode(data.requester.searchName, buffer, offset)
	offset = Primitives.S32.encode(data.requester.type, buffer, offset)
	offset = Primitives.F32.encode(data.requester.range, buffer, offset)
	offset = Primitives.F32.encode(data.requester.arc, buffer, offset)
	offset = Primitives.U64.encode(data.requester.regionHandle, buffer, offset)
	offset = Primitives.U8.encode(data.requester.searchRegions, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ScriptSensorRequestData {
	const state = { offset: HEADER_SIZE }

	return {
		requester: {
			sourceId: Primitives.UUID.decode(buffer, state),
			requestId: Primitives.UUID.decode(buffer, state),
			searchId: Primitives.UUID.decode(buffer, state),
			searchPos: Primitives.Vector3.decode(buffer, state),
			searchDir: Primitives.Quaternion.decode(buffer, state),
			searchName: Primitives.Variable1.decode(buffer, state),
			type: Primitives.S32.decode(buffer, state),
			range: Primitives.F32.decode(buffer, state),
			arc: Primitives.F32.decode(buffer, state),
			regionHandle: Primitives.U64.decode(buffer, state),
			searchRegions: Primitives.U8.decode(buffer, state),
		},
	}
}
