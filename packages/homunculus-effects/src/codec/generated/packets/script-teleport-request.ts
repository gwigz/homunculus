/**
 * ScriptTeleportRequest Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ScriptTeleportRequestData {
	data: {
		objectName: Buffer
		simName: Buffer
		simPosition: Types.Vector3
		lookAt: Types.Vector3
	}
}

export const id = 195
export const name = "ScriptTeleportRequest"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE =
	Primitives.Vector3.size() + // simPosition
	Primitives.Vector3.size() // lookAt

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ScriptTeleportRequestData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.data.objectName)
	size += Primitives.Variable1.size(data.data.simName)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Data
	offset = Primitives.Variable1.encode(data.data.objectName, buffer, offset)
	offset = Primitives.Variable1.encode(data.data.simName, buffer, offset)
	offset = Primitives.Vector3.encode(data.data.simPosition, buffer, offset)
	offset = Primitives.Vector3.encode(data.data.lookAt, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): ScriptTeleportRequestData {
	const state = { offset: HEADER_SIZE }

	return {
		data: {
			objectName: Primitives.Variable1.decode(buffer, state),
			simName: Primitives.Variable1.decode(buffer, state),
			simPosition: Primitives.Vector3.decode(buffer, state),
			lookAt: Primitives.Vector3.decode(buffer, state),
		},
	}
}
