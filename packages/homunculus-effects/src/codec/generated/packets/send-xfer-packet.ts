/**
 * SendXferPacket Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface SendXferPacketData {
	xferId: {
		id: number | bigint
		packet: number
	}
	dataPacket: {
		data: Buffer
	}
}

export const id = 18
export const name = "SendXferPacket"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "xferId" entry (fixed-length parameters only)
const XFER_ID_BASE_SIZE =
	Primitives.U64.size() + // id
	Primitives.U32.size() // packet

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + XFER_ID_BASE_SIZE + DATA_PACKET_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SendXferPacketData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.dataPacket.data)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// XferId
	offset = Primitives.U64.encode(data.xferId.id, buffer, offset)
	offset = Primitives.U32.encode(data.xferId.packet, buffer, offset)

	// DataPacket
	offset = Primitives.Variable2.encode(data.dataPacket.data, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): SendXferPacketData {
	const state = { offset: HEADER_SIZE }

	return {
		xferId: {
			id: Primitives.U64.decode(buffer, state),
			packet: Primitives.U32.decode(buffer, state),
		},
		dataPacket: {
			data: Primitives.Variable2.decode(buffer, state),
		},
	}
}
