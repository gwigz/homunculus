/**
 * SetSimPresenceInDatabase Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface SetSimPresenceInDatabaseData {
	simData: {
		regionId: Types.UUID
		hostName: Buffer
		gridX: number
		gridY: number
		pid: number
		agentCount: number
		timeToLive: number
		status: Buffer
	}
}

export const id = 23
export const name = "SetSimPresenceInDatabase"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "simData" entry (fixed-length parameters only)
const SIM_DATA_BASE_SIZE =
	Primitives.UUID.size() + // regionId
	Primitives.U32.size() + // gridX
	Primitives.U32.size() + // gridY
	Primitives.S32.size() + // pid
	Primitives.S32.size() + // agentCount
	Primitives.S32.size() // timeToLive

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SIM_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SetSimPresenceInDatabaseData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.simData.hostName)
	size += Primitives.Variable1.size(data.simData.status)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// SimData
	offset = Primitives.UUID.encode(data.simData.regionId, buffer, offset)
	offset = Primitives.Variable1.encode(data.simData.hostName, buffer, offset)
	offset = Primitives.U32.encode(data.simData.gridX, buffer, offset)
	offset = Primitives.U32.encode(data.simData.gridY, buffer, offset)
	offset = Primitives.S32.encode(data.simData.pid, buffer, offset)
	offset = Primitives.S32.encode(data.simData.agentCount, buffer, offset)
	offset = Primitives.S32.encode(data.simData.timeToLive, buffer, offset)
	offset = Primitives.Variable1.encode(data.simData.status, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): SetSimPresenceInDatabaseData {
	const state = { offset: HEADER_SIZE }

	return {
		simData: {
			regionId: Primitives.UUID.decode(buffer, state),
			hostName: Primitives.Variable1.decode(buffer, state),
			gridX: Primitives.U32.decode(buffer, state),
			gridY: Primitives.U32.decode(buffer, state),
			pid: Primitives.S32.decode(buffer, state),
			agentCount: Primitives.S32.decode(buffer, state),
			timeToLive: Primitives.S32.decode(buffer, state),
			status: Primitives.Variable1.decode(buffer, state),
		},
	}
}
