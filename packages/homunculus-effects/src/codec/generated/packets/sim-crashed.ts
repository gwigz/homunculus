/**
 * SimCrashed Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface SimCrashedData {
	data: {
		regionX: number
		regionY: number
	}
	users: {
		agentId: Types.UUID
	}[]
}

export const id = 328
export const name = "SimCrashed"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "data" entry (fixed-length parameters only)
const DATA_BASE_SIZE =
	Primitives.U32.size() + // regionX
	Primitives.U32.size() // regionY

// base byte size for one "users" entry (fixed-length parameters only)
const USERS_BASE_SIZE = Primitives.UUID.size() // agentId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SimCrashedData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += USERS_BASE_SIZE * (data.users?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Data
	offset = Primitives.U32.encode(data.data.regionX, buffer, offset)
	offset = Primitives.U32.encode(data.data.regionY, buffer, offset)

	// Users
	offset = Primitives.U8.encode(data.users?.length ?? 0, buffer, offset)

	for (const item of data.users ?? []) {
		offset = Primitives.UUID.encode(item.agentId, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): SimCrashedData {
	const state = { offset: HEADER_SIZE }

	return {
		data: {
			regionX: Primitives.U32.decode(buffer, state),
			regionY: Primitives.U32.decode(buffer, state),
		},
		users: (() => {
			const items: SimCrashedData["users"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					agentId: Primitives.UUID.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
