/**
 * SimStats Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface SimStatsData {
	region: {
		regionX: number
		regionY: number
		regionFlags: number
		objectCapacity: number
	}
	stat: {
		statId: number
		statValue: number
	}[]
	pidStat: {
		pid: number
	}
	regionInfo: {
		regionFlagsExtended: number | bigint
	}[]
}

export const id = 140
export const name = "SimStats"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "region" entry (fixed-length parameters only)
const REGION_BASE_SIZE =
	Primitives.U32.size() + // regionX
	Primitives.U32.size() + // regionY
	Primitives.U32.size() + // regionFlags
	Primitives.U32.size() // objectCapacity

// base byte size for one "stat" entry (fixed-length parameters only)
const STAT_BASE_SIZE =
	Primitives.U32.size() + // statId
	Primitives.F32.size() // statValue

// base byte size for one "pidStat" entry (fixed-length parameters only)
const PID_STAT_BASE_SIZE = Primitives.S32.size() // pid

// base byte size for one "regionInfo" entry (fixed-length parameters only)
const REGION_INFO_BASE_SIZE = Primitives.U64.size() // regionFlagsExtended

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REGION_BASE_SIZE + PID_STAT_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SimStatsData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += STAT_BASE_SIZE * (data.stat?.length ?? 0)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += REGION_INFO_BASE_SIZE * (data.regionInfo?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Region
	offset = Primitives.U32.encode(data.region.regionX, buffer, offset)
	offset = Primitives.U32.encode(data.region.regionY, buffer, offset)
	offset = Primitives.U32.encode(data.region.regionFlags, buffer, offset)
	offset = Primitives.U32.encode(data.region.objectCapacity, buffer, offset)

	// Stat
	offset = Primitives.U8.encode(data.stat?.length ?? 0, buffer, offset)

	for (const item of data.stat ?? []) {
		offset = Primitives.U32.encode(item.statId, buffer, offset)
		offset = Primitives.F32.encode(item.statValue, buffer, offset)
	}

	// PidStat
	offset = Primitives.S32.encode(data.pidStat.pid, buffer, offset)

	// RegionInfo
	offset = Primitives.U8.encode(data.regionInfo?.length ?? 0, buffer, offset)

	for (const item of data.regionInfo ?? []) {
		offset = Primitives.U64.encode(item.regionFlagsExtended, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): SimStatsData {
	const state = { offset: HEADER_SIZE }

	return {
		region: {
			regionX: Primitives.U32.decode(buffer, state),
			regionY: Primitives.U32.decode(buffer, state),
			regionFlags: Primitives.U32.decode(buffer, state),
			objectCapacity: Primitives.U32.decode(buffer, state),
		},
		stat: (() => {
			const items: SimStatsData["stat"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					statId: Primitives.U32.decode(buffer, state),
					statValue: Primitives.F32.decode(buffer, state),
				})
			}

			return items
		})(),
		pidStat: {
			pid: Primitives.S32.decode(buffer, state),
		},
		regionInfo: (() => {
			const items: SimStatsData["regionInfo"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					regionFlagsExtended: Primitives.U64.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
