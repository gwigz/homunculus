/**
 * SimulatorLoad Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface SimulatorLoadData {
	simulatorLoad: {
		timeDilation: number
		agentCount: number
		canAcceptAgents: boolean
	}
	agentList: {
		circuitCode: number
		x: number
		y: number
	}[]
}

export const id = 12
export const name = "SimulatorLoad"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "simulatorLoad" entry (fixed-length parameters only)
const SIMULATOR_LOAD_BASE_SIZE =
	Primitives.F32.size() + // timeDilation
	Primitives.S32.size() + // agentCount
	Primitives.Boolean.size() // canAcceptAgents

// base byte size for one "agentList" entry (fixed-length parameters only)
const AGENT_LIST_BASE_SIZE =
	Primitives.U32.size() + // circuitCode
	Primitives.U8.size() + // x
	Primitives.U8.size() // y

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SIMULATOR_LOAD_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SimulatorLoadData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += AGENT_LIST_BASE_SIZE * (data.agentList?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// SimulatorLoad
	offset = Primitives.F32.encode(data.simulatorLoad.timeDilation, buffer, offset)
	offset = Primitives.S32.encode(data.simulatorLoad.agentCount, buffer, offset)
	offset = Primitives.Boolean.encode(data.simulatorLoad.canAcceptAgents, buffer, offset)

	// AgentList
	offset = Primitives.U8.encode(data.agentList?.length ?? 0, buffer, offset)

	for (const item of data.agentList ?? []) {
		offset = Primitives.U32.encode(item.circuitCode, buffer, offset)
		offset = Primitives.U8.encode(item.x, buffer, offset)
		offset = Primitives.U8.encode(item.y, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): SimulatorLoadData {
	const state = { offset: HEADER_SIZE }

	return {
		simulatorLoad: {
			timeDilation: Primitives.F32.decode(buffer, state),
			agentCount: Primitives.S32.decode(buffer, state),
			canAcceptAgents: Primitives.Boolean.decode(buffer, state),
		},
		agentList: (() => {
			const items: SimulatorLoadData["agentList"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					circuitCode: Primitives.U32.decode(buffer, state),
					x: Primitives.U8.decode(buffer, state),
					y: Primitives.U8.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
