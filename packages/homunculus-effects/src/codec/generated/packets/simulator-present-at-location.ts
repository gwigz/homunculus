/**
 * SimulatorPresentAtLocation Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface SimulatorPresentAtLocationData {
	simulatorPublicHostBlock: {
		port: Types.Port
		simulatorIp: Types.IP
		gridX: number
		gridY: number
	}
	neighborBlock: {
		ip: Types.IP
		port: Types.Port
	}[]
	simulatorBlock: {
		simName: Buffer
		simAccess: number
		regionFlags: number
		regionId: Types.UUID
		estateId: number
		parentEstateId: number
	}
	telehubBlock: {
		hasTelehub: boolean
		telehubPos: Types.Vector3
	}[]
}

export const id = 11
export const name = "SimulatorPresentAtLocation"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "simulatorPublicHostBlock" entry (fixed-length parameters only)
const SIMULATOR_PUBLIC_HOST_BLOCK_BASE_SIZE =
	Primitives.Port.size() + // port
	Primitives.IP.size() + // simulatorIp
	Primitives.U32.size() + // gridX
	Primitives.U32.size() // gridY

// base byte size for one "neighborBlock" entry (fixed-length parameters only)
const NEIGHBOR_BLOCK_BASE_SIZE =
	Primitives.IP.size() + // ip
	Primitives.Port.size() // port

// base byte size for one "simulatorBlock" entry (fixed-length parameters only)
const SIMULATOR_BLOCK_BASE_SIZE =
	Primitives.U8.size() + // simAccess
	Primitives.U32.size() + // regionFlags
	Primitives.UUID.size() + // regionId
	Primitives.U32.size() + // estateId
	Primitives.U32.size() // parentEstateId

// base byte size for one "telehubBlock" entry (fixed-length parameters only)
const TELEHUB_BLOCK_BASE_SIZE =
	Primitives.Boolean.size() + // hasTelehub
	Primitives.Vector3.size() // telehubPos

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SIMULATOR_PUBLIC_HOST_BLOCK_BASE_SIZE + SIMULATOR_BLOCK_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SimulatorPresentAtLocationData>) {
	let size = BASE_SIZE

	size += NEIGHBOR_BLOCK_BASE_SIZE * 4

	size += Primitives.Variable1.size(data.simulatorBlock.simName)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += TELEHUB_BLOCK_BASE_SIZE * (data.telehubBlock?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// SimulatorPublicHostBlock
	offset = Primitives.Port.encode(data.simulatorPublicHostBlock.port, buffer, offset)
	offset = Primitives.IP.encode(data.simulatorPublicHostBlock.simulatorIp, buffer, offset)
	offset = Primitives.U32.encode(data.simulatorPublicHostBlock.gridX, buffer, offset)
	offset = Primitives.U32.encode(data.simulatorPublicHostBlock.gridY, buffer, offset)

	// NeighborBlock
	for (const item of data.neighborBlock ?? []) {
		offset = Primitives.IP.encode(item.ip, buffer, offset)
		offset = Primitives.Port.encode(item.port, buffer, offset)
	}

	// SimulatorBlock
	offset = Primitives.Variable1.encode(data.simulatorBlock.simName, buffer, offset)
	offset = Primitives.U8.encode(data.simulatorBlock.simAccess, buffer, offset)
	offset = Primitives.U32.encode(data.simulatorBlock.regionFlags, buffer, offset)
	offset = Primitives.UUID.encode(data.simulatorBlock.regionId, buffer, offset)
	offset = Primitives.U32.encode(data.simulatorBlock.estateId, buffer, offset)
	offset = Primitives.U32.encode(data.simulatorBlock.parentEstateId, buffer, offset)

	// TelehubBlock
	offset = Primitives.U8.encode(data.telehubBlock?.length ?? 0, buffer, offset)

	for (const item of data.telehubBlock ?? []) {
		offset = Primitives.Boolean.encode(item.hasTelehub, buffer, offset)
		offset = Primitives.Vector3.encode(item.telehubPos, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): SimulatorPresentAtLocationData {
	const state = { offset: HEADER_SIZE }

	return {
		simulatorPublicHostBlock: {
			port: Primitives.Port.decode(buffer, state),
			simulatorIp: Primitives.IP.decode(buffer, state),
			gridX: Primitives.U32.decode(buffer, state),
			gridY: Primitives.U32.decode(buffer, state),
		},
		neighborBlock: (() => {
			const items: SimulatorPresentAtLocationData["neighborBlock"] = []

			for (let i = 0; i < 4; i++) {
				items.push({
					ip: Primitives.IP.decode(buffer, state),
					port: Primitives.Port.decode(buffer, state),
				})
			}

			return items
		})(),
		simulatorBlock: {
			simName: Primitives.Variable1.decode(buffer, state),
			simAccess: Primitives.U8.decode(buffer, state),
			regionFlags: Primitives.U32.decode(buffer, state),
			regionId: Primitives.UUID.decode(buffer, state),
			estateId: Primitives.U32.decode(buffer, state),
			parentEstateId: Primitives.U32.decode(buffer, state),
		},
		telehubBlock: (() => {
			const items: SimulatorPresentAtLocationData["telehubBlock"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					hasTelehub: Primitives.Boolean.decode(buffer, state),
					telehubPos: Primitives.Vector3.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
