/**
 * SimulatorViewerTimeMessage Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface SimulatorViewerTimeMessageData {
	timeInfo: {
		usecSinceStart: number | bigint
		secPerDay: number
		secPerYear: number
		sunDirection: Types.Vector3
		sunPhase: number
		sunAngVelocity: Types.Vector3
	}
}

export const id = 150
export const name = "SimulatorViewerTimeMessage"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "timeInfo" entry (fixed-length parameters only)
const TIME_INFO_BASE_SIZE =
	Primitives.U64.size() + // usecSinceStart
	Primitives.U32.size() + // secPerDay
	Primitives.U32.size() + // secPerYear
	Primitives.Vector3.size() + // sunDirection
	Primitives.F32.size() + // sunPhase
	Primitives.Vector3.size() // sunAngVelocity

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TIME_INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SimulatorViewerTimeMessageData>) {
	const size = BASE_SIZE

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TimeInfo
	offset = Primitives.U64.encode(data.timeInfo.usecSinceStart, buffer, offset)
	offset = Primitives.U32.encode(data.timeInfo.secPerDay, buffer, offset)
	offset = Primitives.U32.encode(data.timeInfo.secPerYear, buffer, offset)
	offset = Primitives.Vector3.encode(data.timeInfo.sunDirection, buffer, offset)
	offset = Primitives.F32.encode(data.timeInfo.sunPhase, buffer, offset)
	offset = Primitives.Vector3.encode(data.timeInfo.sunAngVelocity, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): SimulatorViewerTimeMessageData {
	const state = { offset: HEADER_SIZE }

	return {
		timeInfo: {
			usecSinceStart: Primitives.U64.decode(buffer, state),
			secPerDay: Primitives.U32.decode(buffer, state),
			secPerYear: Primitives.U32.decode(buffer, state),
			sunDirection: Primitives.Vector3.decode(buffer, state),
			sunPhase: Primitives.F32.decode(buffer, state),
			sunAngVelocity: Primitives.Vector3.decode(buffer, state),
		},
	}
}
