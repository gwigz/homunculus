/**
 * SystemMessage Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface SystemMessageData {
	methodData: {
		method: Buffer
		invoice: Types.UUID
		digest: Buffer
	}
	paramList: {
		parameter: Buffer
	}[]
}

export const id = 404
export const name = "SystemMessage"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "methodData" entry (fixed-length parameters only)
const METHOD_DATA_BASE_SIZE =
	Primitives.UUID.size() + // invoice
	Primitives.Fixed32.size() // digest

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + METHOD_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<SystemMessageData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.methodData.method)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	for (const item of data.paramList ?? []) {
		size += Primitives.Variable1.size(item.parameter)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// MethodData
	offset = Primitives.Variable1.encode(data.methodData.method, buffer, offset)
	offset = Primitives.UUID.encode(data.methodData.invoice, buffer, offset)
	offset = Primitives.Fixed32.encode(data.methodData.digest, buffer, offset)

	// ParamList
	offset = Primitives.U8.encode(data.paramList?.length ?? 0, buffer, offset)

	for (const item of data.paramList ?? []) {
		offset = Primitives.Variable1.encode(item.parameter, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): SystemMessageData {
	const state = { offset: HEADER_SIZE }

	return {
		methodData: {
			method: Primitives.Variable1.decode(buffer, state),
			invoice: Primitives.UUID.decode(buffer, state),
			digest: Primitives.Fixed32.decode(buffer, state),
		},
		paramList: (() => {
			const items: SystemMessageData["paramList"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					parameter: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
