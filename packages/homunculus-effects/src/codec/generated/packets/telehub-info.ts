/**
 * TelehubInfo Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface TelehubInfoData {
	telehubBlock: {
		objectId: Types.UUID
		objectName: Buffer
		telehubPos: Types.Vector3
		telehubRot: Types.Quaternion
	}
	spawnPointBlock: {
		spawnPointPos: Types.Vector3
	}[]
}

export const id = 10
export const name = "TelehubInfo"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "telehubBlock" entry (fixed-length parameters only)
const TELEHUB_BLOCK_BASE_SIZE =
	Primitives.UUID.size() + // objectId
	Primitives.Vector3.size() + // telehubPos
	Primitives.Quaternion.size() // telehubRot

// base byte size for one "spawnPointBlock" entry (fixed-length parameters only)
const SPAWN_POINT_BLOCK_BASE_SIZE = Primitives.Vector3.size() // spawnPointPos

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TELEHUB_BLOCK_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<TelehubInfoData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.telehubBlock.objectName)

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += SPAWN_POINT_BLOCK_BASE_SIZE * (data.spawnPointBlock?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TelehubBlock
	offset = Primitives.UUID.encode(data.telehubBlock.objectId, buffer, offset)
	offset = Primitives.Variable1.encode(data.telehubBlock.objectName, buffer, offset)
	offset = Primitives.Vector3.encode(data.telehubBlock.telehubPos, buffer, offset)
	offset = Primitives.Quaternion.encode(data.telehubBlock.telehubRot, buffer, offset)

	// SpawnPointBlock
	offset = Primitives.U8.encode(data.spawnPointBlock?.length ?? 0, buffer, offset)

	for (const item of data.spawnPointBlock ?? []) {
		offset = Primitives.Vector3.encode(item.spawnPointPos, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): TelehubInfoData {
	const state = { offset: HEADER_SIZE }

	return {
		telehubBlock: {
			objectId: Primitives.UUID.decode(buffer, state),
			objectName: Primitives.Variable1.decode(buffer, state),
			telehubPos: Primitives.Vector3.decode(buffer, state),
			telehubRot: Primitives.Quaternion.decode(buffer, state),
		},
		spawnPointBlock: (() => {
			const items: TelehubInfoData["spawnPointBlock"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					spawnPointPos: Primitives.Vector3.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
