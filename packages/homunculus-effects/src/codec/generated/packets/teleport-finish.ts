/**
 * TeleportFinish Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface TeleportFinishData {
	info: {
		agentId: Types.UUID
		locationId: number
		simIp: Types.IP
		simPort: Types.Port
		regionHandle: number | bigint
		seedCapability: Buffer
		simAccess: number
		teleportFlags: number
	}
}

export const id = 69
export const name = "TeleportFinish"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "info" entry (fixed-length parameters only)
const INFO_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.U32.size() + // locationId
	Primitives.IP.size() + // simIp
	Primitives.Port.size() + // simPort
	Primitives.U64.size() + // regionHandle
	Primitives.U8.size() + // simAccess
	Primitives.U32.size() // teleportFlags

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<TeleportFinishData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.info.seedCapability)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// Info
	offset = Primitives.UUID.encode(data.info.agentId, buffer, offset)
	offset = Primitives.U32.encode(data.info.locationId, buffer, offset)
	offset = Primitives.IP.encode(data.info.simIp, buffer, offset)
	offset = Primitives.Port.encode(data.info.simPort, buffer, offset)
	offset = Primitives.U64.encode(data.info.regionHandle, buffer, offset)
	offset = Primitives.Variable2.encode(data.info.seedCapability, buffer, offset)
	offset = Primitives.U8.encode(data.info.simAccess, buffer, offset)
	offset = Primitives.U32.encode(data.info.teleportFlags, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): TeleportFinishData {
	const state = { offset: HEADER_SIZE }

	return {
		info: {
			agentId: Primitives.UUID.decode(buffer, state),
			locationId: Primitives.U32.decode(buffer, state),
			simIp: Primitives.IP.decode(buffer, state),
			simPort: Primitives.Port.decode(buffer, state),
			regionHandle: Primitives.U64.decode(buffer, state),
			seedCapability: Primitives.Variable2.decode(buffer, state),
			simAccess: Primitives.U8.decode(buffer, state),
			teleportFlags: Primitives.U32.decode(buffer, state),
		},
	}
}
