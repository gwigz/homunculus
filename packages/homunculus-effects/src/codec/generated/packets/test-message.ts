/**
 * TestMessage Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"

export interface TestMessageData {
	testBlock1: {
		test1: number
	}
	neighborBlock: {
		test0: number
		test1: number
		test2: number
	}[]
}

export const id = 1
export const name = "TestMessage"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "testBlock1" entry (fixed-length parameters only)
const TEST_BLOCK1_BASE_SIZE = Primitives.U32.size() // test1

// base byte size for one "neighborBlock" entry (fixed-length parameters only)
const NEIGHBOR_BLOCK_BASE_SIZE =
	Primitives.U32.size() + // test0
	Primitives.U32.size() + // test1
	Primitives.U32.size() // test2

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TEST_BLOCK1_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<TestMessageData>) {
	let size = BASE_SIZE

	size += NEIGHBOR_BLOCK_BASE_SIZE * 4

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TestBlock1
	offset = Primitives.U32.encode(data.testBlock1.test1, buffer, offset)

	// NeighborBlock
	for (const item of data.neighborBlock ?? []) {
		offset = Primitives.U32.encode(item.test0, buffer, offset)
		offset = Primitives.U32.encode(item.test1, buffer, offset)
		offset = Primitives.U32.encode(item.test2, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): TestMessageData {
	const state = { offset: HEADER_SIZE }

	return {
		testBlock1: {
			test1: Primitives.U32.decode(buffer, state),
		},
		neighborBlock: (() => {
			const items: TestMessageData["neighborBlock"] = []

			for (let i = 0; i < 4; i++) {
				items.push({
					test0: Primitives.U32.decode(buffer, state),
					test1: Primitives.U32.decode(buffer, state),
					test2: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
