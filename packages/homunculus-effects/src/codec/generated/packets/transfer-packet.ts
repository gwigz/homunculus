/**
 * TransferPacket Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface TransferPacketData {
	transferData: {
		transferId: Types.UUID
		channelType: number
		packet: number
		status: number
		data: Buffer
	}
}

export const id = 17
export const name = "TransferPacket"
export const frequency = 0

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "transferData" entry (fixed-length parameters only)
const TRANSFER_DATA_BASE_SIZE =
	Primitives.UUID.size() + // transferId
	Primitives.S32.size() + // channelType
	Primitives.S32.size() + // packet
	Primitives.S32.size() // status

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TRANSFER_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<TransferPacketData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.transferData.data)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TransferData
	offset = Primitives.UUID.encode(data.transferData.transferId, buffer, offset)
	offset = Primitives.S32.encode(data.transferData.channelType, buffer, offset)
	offset = Primitives.S32.encode(data.transferData.packet, buffer, offset)
	offset = Primitives.S32.encode(data.transferData.status, buffer, offset)
	offset = Primitives.Variable2.encode(data.transferData.data, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): TransferPacketData {
	const state = { offset: HEADER_SIZE }

	return {
		transferData: {
			transferId: Primitives.UUID.decode(buffer, state),
			channelType: Primitives.S32.decode(buffer, state),
			packet: Primitives.S32.decode(buffer, state),
			status: Primitives.S32.decode(buffer, state),
			data: Primitives.Variable2.decode(buffer, state),
		},
	}
}
