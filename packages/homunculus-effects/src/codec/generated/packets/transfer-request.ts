/**
 * TransferRequest Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface TransferRequestData {
	transferInfo: {
		transferId: Types.UUID
		channelType: number
		sourceType: number
		priority: number
		params: Buffer
	}
}

export const id = 153
export const name = "TransferRequest"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "transferInfo" entry (fixed-length parameters only)
const TRANSFER_INFO_BASE_SIZE =
	Primitives.UUID.size() + // transferId
	Primitives.S32.size() + // channelType
	Primitives.S32.size() + // sourceType
	Primitives.F32.size() // priority

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + TRANSFER_INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<TransferRequestData>) {
	let size = BASE_SIZE

	size += Primitives.Variable2.size(data.transferInfo.params)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// TransferInfo
	offset = Primitives.UUID.encode(data.transferInfo.transferId, buffer, offset)
	offset = Primitives.S32.encode(data.transferInfo.channelType, buffer, offset)
	offset = Primitives.S32.encode(data.transferInfo.sourceType, buffer, offset)
	offset = Primitives.F32.encode(data.transferInfo.priority, buffer, offset)
	offset = Primitives.Variable2.encode(data.transferInfo.params, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): TransferRequestData {
	const state = { offset: HEADER_SIZE }

	return {
		transferInfo: {
			transferId: Primitives.UUID.decode(buffer, state),
			channelType: Primitives.S32.decode(buffer, state),
			sourceType: Primitives.S32.decode(buffer, state),
			priority: Primitives.F32.decode(buffer, state),
			params: Primitives.Variable2.decode(buffer, state),
		},
	}
}
