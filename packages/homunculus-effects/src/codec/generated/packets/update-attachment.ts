/**
 * UpdateAttachment Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface UpdateAttachmentData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	attachmentBlock: {
		attachmentPoint: number
	}
	operationData: {
		addItem: boolean
		useExistingAsset: boolean
	}
	inventoryData: {
		itemId: Types.UUID
		folderId: Types.UUID
		creatorId: Types.UUID
		ownerId: Types.UUID
		groupId: Types.UUID
		baseMask: number
		ownerMask: number
		groupMask: number
		everyoneMask: number
		nextOwnerMask: number
		groupOwned: boolean
		assetId: Types.UUID
		type: number
		invType: number
		flags: number
		saleType: number
		salePrice: number
		name: Buffer
		description: Buffer
		creationDate: number
		crc: number
	}
}

export const id = 331
export const name = "UpdateAttachment"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "attachmentBlock" entry (fixed-length parameters only)
const ATTACHMENT_BLOCK_BASE_SIZE = Primitives.U8.size() // attachmentPoint

// base byte size for one "operationData" entry (fixed-length parameters only)
const OPERATION_DATA_BASE_SIZE =
	Primitives.Boolean.size() + // addItem
	Primitives.Boolean.size() // useExistingAsset

// base byte size for one "inventoryData" entry (fixed-length parameters only)
const INVENTORY_DATA_BASE_SIZE =
	Primitives.UUID.size() + // itemId
	Primitives.UUID.size() + // folderId
	Primitives.UUID.size() + // creatorId
	Primitives.UUID.size() + // ownerId
	Primitives.UUID.size() + // groupId
	Primitives.U32.size() + // baseMask
	Primitives.U32.size() + // ownerMask
	Primitives.U32.size() + // groupMask
	Primitives.U32.size() + // everyoneMask
	Primitives.U32.size() + // nextOwnerMask
	Primitives.Boolean.size() + // groupOwned
	Primitives.UUID.size() + // assetId
	Primitives.S8.size() + // type
	Primitives.S8.size() + // invType
	Primitives.U32.size() + // flags
	Primitives.U8.size() + // saleType
	Primitives.S32.size() + // salePrice
	Primitives.S32.size() + // creationDate
	Primitives.U32.size() // crc

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + ATTACHMENT_BLOCK_BASE_SIZE + OPERATION_DATA_BASE_SIZE + INVENTORY_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<UpdateAttachmentData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.inventoryData.name)
	size += Primitives.Variable1.size(data.inventoryData.description)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// AttachmentBlock
	offset = Primitives.U8.encode(data.attachmentBlock.attachmentPoint, buffer, offset)

	// OperationData
	offset = Primitives.Boolean.encode(data.operationData.addItem, buffer, offset)
	offset = Primitives.Boolean.encode(data.operationData.useExistingAsset, buffer, offset)

	// InventoryData
	offset = Primitives.UUID.encode(data.inventoryData.itemId, buffer, offset)
	offset = Primitives.UUID.encode(data.inventoryData.folderId, buffer, offset)
	offset = Primitives.UUID.encode(data.inventoryData.creatorId, buffer, offset)
	offset = Primitives.UUID.encode(data.inventoryData.ownerId, buffer, offset)
	offset = Primitives.UUID.encode(data.inventoryData.groupId, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.baseMask, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.ownerMask, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.groupMask, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.everyoneMask, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.nextOwnerMask, buffer, offset)
	offset = Primitives.Boolean.encode(data.inventoryData.groupOwned, buffer, offset)
	offset = Primitives.UUID.encode(data.inventoryData.assetId, buffer, offset)
	offset = Primitives.S8.encode(data.inventoryData.type, buffer, offset)
	offset = Primitives.S8.encode(data.inventoryData.invType, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.flags, buffer, offset)
	offset = Primitives.U8.encode(data.inventoryData.saleType, buffer, offset)
	offset = Primitives.S32.encode(data.inventoryData.salePrice, buffer, offset)
	offset = Primitives.Variable1.encode(data.inventoryData.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.inventoryData.description, buffer, offset)
	offset = Primitives.S32.encode(data.inventoryData.creationDate, buffer, offset)
	offset = Primitives.U32.encode(data.inventoryData.crc, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): UpdateAttachmentData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		attachmentBlock: {
			attachmentPoint: Primitives.U8.decode(buffer, state),
		},
		operationData: {
			addItem: Primitives.Boolean.decode(buffer, state),
			useExistingAsset: Primitives.Boolean.decode(buffer, state),
		},
		inventoryData: {
			itemId: Primitives.UUID.decode(buffer, state),
			folderId: Primitives.UUID.decode(buffer, state),
			creatorId: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			groupId: Primitives.UUID.decode(buffer, state),
			baseMask: Primitives.U32.decode(buffer, state),
			ownerMask: Primitives.U32.decode(buffer, state),
			groupMask: Primitives.U32.decode(buffer, state),
			everyoneMask: Primitives.U32.decode(buffer, state),
			nextOwnerMask: Primitives.U32.decode(buffer, state),
			groupOwned: Primitives.Boolean.decode(buffer, state),
			assetId: Primitives.UUID.decode(buffer, state),
			type: Primitives.S8.decode(buffer, state),
			invType: Primitives.S8.decode(buffer, state),
			flags: Primitives.U32.decode(buffer, state),
			saleType: Primitives.U8.decode(buffer, state),
			salePrice: Primitives.S32.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			description: Primitives.Variable1.decode(buffer, state),
			creationDate: Primitives.S32.decode(buffer, state),
			crc: Primitives.U32.decode(buffer, state),
		},
	}
}
