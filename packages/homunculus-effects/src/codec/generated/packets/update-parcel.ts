/**
 * UpdateParcel Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface UpdateParcelData {
	parcelData: {
		parcelId: Types.UUID
		regionHandle: number | bigint
		ownerId: Types.UUID
		groupOwned: boolean
		status: number
		name: Buffer
		description: Buffer
		musicUrl: Buffer
		regionX: number
		regionY: number
		actualArea: number
		billableArea: number
		showDir: boolean
		isForSale: boolean
		category: number
		snapshotId: Types.UUID
		userLocation: Types.Vector3
		salePrice: number
		authorizedBuyerId: Types.UUID
		allowPublish: boolean
		maturePublish: boolean
	}
}

export const id = 221
export const name = "UpdateParcel"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "parcelData" entry (fixed-length parameters only)
const PARCEL_DATA_BASE_SIZE =
	Primitives.UUID.size() + // parcelId
	Primitives.U64.size() + // regionHandle
	Primitives.UUID.size() + // ownerId
	Primitives.Boolean.size() + // groupOwned
	Primitives.U8.size() + // status
	Primitives.F32.size() + // regionX
	Primitives.F32.size() + // regionY
	Primitives.S32.size() + // actualArea
	Primitives.S32.size() + // billableArea
	Primitives.Boolean.size() + // showDir
	Primitives.Boolean.size() + // isForSale
	Primitives.U8.size() + // category
	Primitives.UUID.size() + // snapshotId
	Primitives.Vector3.size() + // userLocation
	Primitives.S32.size() + // salePrice
	Primitives.UUID.size() + // authorizedBuyerId
	Primitives.Boolean.size() + // allowPublish
	Primitives.Boolean.size() // maturePublish

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + PARCEL_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<UpdateParcelData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.parcelData.name)
	size += Primitives.Variable1.size(data.parcelData.description)
	size += Primitives.Variable1.size(data.parcelData.musicUrl)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ParcelData
	offset = Primitives.UUID.encode(data.parcelData.parcelId, buffer, offset)
	offset = Primitives.U64.encode(data.parcelData.regionHandle, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.ownerId, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.groupOwned, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.status, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.name, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.description, buffer, offset)
	offset = Primitives.Variable1.encode(data.parcelData.musicUrl, buffer, offset)
	offset = Primitives.F32.encode(data.parcelData.regionX, buffer, offset)
	offset = Primitives.F32.encode(data.parcelData.regionY, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.actualArea, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.billableArea, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.showDir, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.isForSale, buffer, offset)
	offset = Primitives.U8.encode(data.parcelData.category, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.snapshotId, buffer, offset)
	offset = Primitives.Vector3.encode(data.parcelData.userLocation, buffer, offset)
	offset = Primitives.S32.encode(data.parcelData.salePrice, buffer, offset)
	offset = Primitives.UUID.encode(data.parcelData.authorizedBuyerId, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.allowPublish, buffer, offset)
	offset = Primitives.Boolean.encode(data.parcelData.maturePublish, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): UpdateParcelData {
	const state = { offset: HEADER_SIZE }

	return {
		parcelData: {
			parcelId: Primitives.UUID.decode(buffer, state),
			regionHandle: Primitives.U64.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			groupOwned: Primitives.Boolean.decode(buffer, state),
			status: Primitives.U8.decode(buffer, state),
			name: Primitives.Variable1.decode(buffer, state),
			description: Primitives.Variable1.decode(buffer, state),
			musicUrl: Primitives.Variable1.decode(buffer, state),
			regionX: Primitives.F32.decode(buffer, state),
			regionY: Primitives.F32.decode(buffer, state),
			actualArea: Primitives.S32.decode(buffer, state),
			billableArea: Primitives.S32.decode(buffer, state),
			showDir: Primitives.Boolean.decode(buffer, state),
			isForSale: Primitives.Boolean.decode(buffer, state),
			category: Primitives.U8.decode(buffer, state),
			snapshotId: Primitives.UUID.decode(buffer, state),
			userLocation: Primitives.Vector3.decode(buffer, state),
			salePrice: Primitives.S32.decode(buffer, state),
			authorizedBuyerId: Primitives.UUID.decode(buffer, state),
			allowPublish: Primitives.Boolean.decode(buffer, state),
			maturePublish: Primitives.Boolean.decode(buffer, state),
		},
	}
}
