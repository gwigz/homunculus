/**
 * UpdateSimulator Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface UpdateSimulatorData {
	simulatorInfo: {
		regionId: Types.UUID
		simName: Buffer
		estateId: number
		simAccess: number
	}
}

export const id = 17
export const name = "UpdateSimulator"
export const frequency = 2

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "simulatorInfo" entry (fixed-length parameters only)
const SIMULATOR_INFO_BASE_SIZE =
	Primitives.UUID.size() + // regionId
	Primitives.U32.size() + // estateId
	Primitives.U8.size() // simAccess

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + SIMULATOR_INFO_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<UpdateSimulatorData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.simulatorInfo.simName)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// SimulatorInfo
	offset = Primitives.UUID.encode(data.simulatorInfo.regionId, buffer, offset)
	offset = Primitives.Variable1.encode(data.simulatorInfo.simName, buffer, offset)
	offset = Primitives.U32.encode(data.simulatorInfo.estateId, buffer, offset)
	offset = Primitives.U8.encode(data.simulatorInfo.simAccess, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): UpdateSimulatorData {
	const state = { offset: HEADER_SIZE }

	return {
		simulatorInfo: {
			regionId: Primitives.UUID.decode(buffer, state),
			simName: Primitives.Variable1.decode(buffer, state),
			estateId: Primitives.U32.decode(buffer, state),
			simAccess: Primitives.U8.decode(buffer, state),
		},
	}
}
