/**
 * UserReportInternal Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface UserReportInternalData {
	reportData: {
		reportType: number
		category: number
		reporterId: Types.UUID
		viewerPosition: Types.Vector3
		agentPosition: Types.Vector3
		screenshotId: Types.UUID
		objectId: Types.UUID
		ownerId: Types.UUID
		lastOwnerId: Types.UUID
		creatorId: Types.UUID
		regionId: Types.UUID
		abuserId: Types.UUID
		abuseRegionName: Buffer
		abuseRegionId: Types.UUID
		summary: Buffer
		details: Buffer
		versionString: Buffer
	}
}

export const id = 21
export const name = "UserReportInternal"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "reportData" entry (fixed-length parameters only)
const REPORT_DATA_BASE_SIZE =
	Primitives.U8.size() + // reportType
	Primitives.U8.size() + // category
	Primitives.UUID.size() + // reporterId
	Primitives.Vector3.size() + // viewerPosition
	Primitives.Vector3.size() + // agentPosition
	Primitives.UUID.size() + // screenshotId
	Primitives.UUID.size() + // objectId
	Primitives.UUID.size() + // ownerId
	Primitives.UUID.size() + // lastOwnerId
	Primitives.UUID.size() + // creatorId
	Primitives.UUID.size() + // regionId
	Primitives.UUID.size() + // abuserId
	Primitives.UUID.size() // abuseRegionId

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + REPORT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<UserReportInternalData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.reportData.abuseRegionName)
	size += Primitives.Variable1.size(data.reportData.summary)
	size += Primitives.Variable2.size(data.reportData.details)
	size += Primitives.Variable1.size(data.reportData.versionString)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// ReportData
	offset = Primitives.U8.encode(data.reportData.reportType, buffer, offset)
	offset = Primitives.U8.encode(data.reportData.category, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.reporterId, buffer, offset)
	offset = Primitives.Vector3.encode(data.reportData.viewerPosition, buffer, offset)
	offset = Primitives.Vector3.encode(data.reportData.agentPosition, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.screenshotId, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.objectId, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.ownerId, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.lastOwnerId, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.creatorId, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.regionId, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.abuserId, buffer, offset)
	offset = Primitives.Variable1.encode(data.reportData.abuseRegionName, buffer, offset)
	offset = Primitives.UUID.encode(data.reportData.abuseRegionId, buffer, offset)
	offset = Primitives.Variable1.encode(data.reportData.summary, buffer, offset)
	offset = Primitives.Variable2.encode(data.reportData.details, buffer, offset)
	offset = Primitives.Variable1.encode(data.reportData.versionString, buffer, offset)

	return buffer
}

export function decode(buffer: Buffer): UserReportInternalData {
	const state = { offset: HEADER_SIZE }

	return {
		reportData: {
			reportType: Primitives.U8.decode(buffer, state),
			category: Primitives.U8.decode(buffer, state),
			reporterId: Primitives.UUID.decode(buffer, state),
			viewerPosition: Primitives.Vector3.decode(buffer, state),
			agentPosition: Primitives.Vector3.decode(buffer, state),
			screenshotId: Primitives.UUID.decode(buffer, state),
			objectId: Primitives.UUID.decode(buffer, state),
			ownerId: Primitives.UUID.decode(buffer, state),
			lastOwnerId: Primitives.UUID.decode(buffer, state),
			creatorId: Primitives.UUID.decode(buffer, state),
			regionId: Primitives.UUID.decode(buffer, state),
			abuserId: Primitives.UUID.decode(buffer, state),
			abuseRegionName: Primitives.Variable1.decode(buffer, state),
			abuseRegionId: Primitives.UUID.decode(buffer, state),
			summary: Primitives.Variable1.decode(buffer, state),
			details: Primitives.Variable2.decode(buffer, state),
			versionString: Primitives.Variable1.decode(buffer, state),
		},
	}
}
