/**
 * ViewerEffect Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ViewerEffectData {
	agentData?: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
	}
	effect: {
		id: Types.UUID
		agentId: Types.UUID
		type: number
		duration: number
		color: Types.Color4
		typeData: Buffer
	}[]
}

export const id = 17
export const name = "ViewerEffect"
export const frequency = 1
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() // sessionId

// base byte size for one "effect" entry (fixed-length parameters only)
const EFFECT_BASE_SIZE =
	Primitives.UUID.size() + // id
	Primitives.UUID.size() + // agentId
	Primitives.U8.size() + // type
	Primitives.F32.size() + // duration
	Primitives.Color4.size() // color

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ViewerEffectData>) {
	let size = BASE_SIZE

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += EFFECT_BASE_SIZE * (data.effect?.length ?? 0)

	for (const item of data.effect ?? []) {
		size += Primitives.Variable1.size(item.typeData)
	}

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)

	// Effect
	offset = Primitives.U8.encode(data.effect?.length ?? 0, buffer, offset)

	for (const item of data.effect ?? []) {
		offset = Primitives.UUID.encode(item.id, buffer, offset)
		offset = Primitives.UUID.encode(item.agentId, buffer, offset)
		offset = Primitives.U8.encode(item.type, buffer, offset)
		offset = Primitives.F32.encode(item.duration, buffer, offset)
		offset = Primitives.Color4.encode(item.color, buffer, offset)
		offset = Primitives.Variable1.encode(item.typeData, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ViewerEffectData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
		},
		effect: (() => {
			const items: ViewerEffectData["effect"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					id: Primitives.UUID.decode(buffer, state),
					agentId: Primitives.UUID.decode(buffer, state),
					type: Primitives.U8.decode(buffer, state),
					duration: Primitives.F32.decode(buffer, state),
					color: Primitives.Color4.decode(buffer, state),
					typeData: Primitives.Variable1.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
