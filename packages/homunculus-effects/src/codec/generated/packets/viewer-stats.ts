/**
 * ViewerStats Packet
 *
 * This file is used to help our packet serialization and deserialization
 * process, and to create new packets on the fly.
 *
 * ⚠️ Do not edit this file manually, it is generated by the `codegen` script!
 *
 * @see {@link http://wiki.secondlife.com/wiki/Message_Layout}
 */

import type { DeepRequired } from "ts-essentials"
import * as PacketEncoder from "~/codec/lludp/packet-encoder"
import * as Primitives from "~/codec/primitives"
import type * as Types from "~/model/types"

export interface ViewerStatsData {
	agentData: {
		agentId?: Types.UUID
		sessionId?: Types.UUID
		ip: Types.IP
		startTime: number
		runTime: number
		simFps: number
		fps: number
		agentsInView: number
		ping: number
		metersTraveled: number
		regionsVisited: number
		sysRam: number
		sysOs: Buffer
		sysCpu: Buffer
		sysGpu: Buffer
	}
	downloadTotals: {
		world: number
		objects: number
		textures: number
	}
	netStats: {
		bytes: number
		packets: number
		compressed: number
		savings: number
	}[]
	failStats: {
		sendPacket: number
		dropped: number
		resent: number
		failedResends: number
		offCircuit: number
		invalid: number
	}
	miscStats: {
		type: number
		value: number
	}[]
}

export const id = 131
export const name = "ViewerStats"
export const frequency = 2
export const compression = true

const HEADER_SIZE = PacketEncoder.FREQUENCY_OFFSETS[frequency]!

// base byte size for one "agentData" entry (fixed-length parameters only)
const AGENT_DATA_BASE_SIZE =
	Primitives.UUID.size() + // agentId
	Primitives.UUID.size() + // sessionId
	Primitives.IP.size() + // ip
	Primitives.U32.size() + // startTime
	Primitives.F32.size() + // runTime
	Primitives.F32.size() + // simFps
	Primitives.F32.size() + // fps
	Primitives.U8.size() + // agentsInView
	Primitives.F32.size() + // ping
	Primitives.F64.size() + // metersTraveled
	Primitives.S32.size() + // regionsVisited
	Primitives.U32.size() // sysRam

// base byte size for one "downloadTotals" entry (fixed-length parameters only)
const DOWNLOAD_TOTALS_BASE_SIZE =
	Primitives.U32.size() + // world
	Primitives.U32.size() + // objects
	Primitives.U32.size() // textures

// base byte size for one "netStats" entry (fixed-length parameters only)
const NET_STATS_BASE_SIZE =
	Primitives.U32.size() + // bytes
	Primitives.U32.size() + // packets
	Primitives.U32.size() + // compressed
	Primitives.U32.size() // savings

// base byte size for one "failStats" entry (fixed-length parameters only)
const FAIL_STATS_BASE_SIZE =
	Primitives.U32.size() + // sendPacket
	Primitives.U32.size() + // dropped
	Primitives.U32.size() + // resent
	Primitives.U32.size() + // failedResends
	Primitives.U32.size() + // offCircuit
	Primitives.U32.size() // invalid

// base byte size for one "miscStats" entry (fixed-length parameters only)
const MISC_STATS_BASE_SIZE =
	Primitives.U32.size() + // type
	Primitives.F64.size() // value

// size contributed by the packet header and all FIXED-LENGTH fields
const BASE_SIZE =
	// Header
	HEADER_SIZE + AGENT_DATA_BASE_SIZE + DOWNLOAD_TOTALS_BASE_SIZE + FAIL_STATS_BASE_SIZE

export function encode(sequence: number, reliable: boolean, data: DeepRequired<ViewerStatsData>) {
	let size = BASE_SIZE

	size += Primitives.Variable1.size(data.agentData.sysOs)
	size += Primitives.Variable1.size(data.agentData.sysCpu)
	size += Primitives.Variable1.size(data.agentData.sysGpu)

	size += NET_STATS_BASE_SIZE * 2

	// add 1 byte for the block count
	size += Primitives.U8.size()

	size += MISC_STATS_BASE_SIZE * (data.miscStats?.length ?? 0)

	const buffer = Buffer.allocUnsafe(size)

	PacketEncoder.encodeHeader(buffer, id, frequency, sequence, reliable)

	let offset = HEADER_SIZE

	// AgentData
	offset = Primitives.UUID.encode(data.agentData.agentId, buffer, offset)
	offset = Primitives.UUID.encode(data.agentData.sessionId, buffer, offset)
	offset = Primitives.IP.encode(data.agentData.ip, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.startTime, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.runTime, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.simFps, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.fps, buffer, offset)
	offset = Primitives.U8.encode(data.agentData.agentsInView, buffer, offset)
	offset = Primitives.F32.encode(data.agentData.ping, buffer, offset)
	offset = Primitives.F64.encode(data.agentData.metersTraveled, buffer, offset)
	offset = Primitives.S32.encode(data.agentData.regionsVisited, buffer, offset)
	offset = Primitives.U32.encode(data.agentData.sysRam, buffer, offset)
	offset = Primitives.Variable1.encode(data.agentData.sysOs, buffer, offset)
	offset = Primitives.Variable1.encode(data.agentData.sysCpu, buffer, offset)
	offset = Primitives.Variable1.encode(data.agentData.sysGpu, buffer, offset)

	// DownloadTotals
	offset = Primitives.U32.encode(data.downloadTotals.world, buffer, offset)
	offset = Primitives.U32.encode(data.downloadTotals.objects, buffer, offset)
	offset = Primitives.U32.encode(data.downloadTotals.textures, buffer, offset)

	// NetStats
	for (const item of data.netStats ?? []) {
		offset = Primitives.U32.encode(item.bytes, buffer, offset)
		offset = Primitives.U32.encode(item.packets, buffer, offset)
		offset = Primitives.U32.encode(item.compressed, buffer, offset)
		offset = Primitives.U32.encode(item.savings, buffer, offset)
	}

	// FailStats
	offset = Primitives.U32.encode(data.failStats.sendPacket, buffer, offset)
	offset = Primitives.U32.encode(data.failStats.dropped, buffer, offset)
	offset = Primitives.U32.encode(data.failStats.resent, buffer, offset)
	offset = Primitives.U32.encode(data.failStats.failedResends, buffer, offset)
	offset = Primitives.U32.encode(data.failStats.offCircuit, buffer, offset)
	offset = Primitives.U32.encode(data.failStats.invalid, buffer, offset)

	// MiscStats
	offset = Primitives.U8.encode(data.miscStats?.length ?? 0, buffer, offset)

	for (const item of data.miscStats ?? []) {
		offset = Primitives.U32.encode(item.type, buffer, offset)
		offset = Primitives.F64.encode(item.value, buffer, offset)
	}

	return buffer
}

export function decode(buffer: Buffer): ViewerStatsData {
	const state = { offset: HEADER_SIZE }

	return {
		agentData: {
			agentId: Primitives.UUID.decode(buffer, state),
			sessionId: Primitives.UUID.decode(buffer, state),
			ip: Primitives.IP.decode(buffer, state),
			startTime: Primitives.U32.decode(buffer, state),
			runTime: Primitives.F32.decode(buffer, state),
			simFps: Primitives.F32.decode(buffer, state),
			fps: Primitives.F32.decode(buffer, state),
			agentsInView: Primitives.U8.decode(buffer, state),
			ping: Primitives.F32.decode(buffer, state),
			metersTraveled: Primitives.F64.decode(buffer, state),
			regionsVisited: Primitives.S32.decode(buffer, state),
			sysRam: Primitives.U32.decode(buffer, state),
			sysOs: Primitives.Variable1.decode(buffer, state),
			sysCpu: Primitives.Variable1.decode(buffer, state),
			sysGpu: Primitives.Variable1.decode(buffer, state),
		},
		downloadTotals: {
			world: Primitives.U32.decode(buffer, state),
			objects: Primitives.U32.decode(buffer, state),
			textures: Primitives.U32.decode(buffer, state),
		},
		netStats: (() => {
			const items: ViewerStatsData["netStats"] = []

			for (let i = 0; i < 2; i++) {
				items.push({
					bytes: Primitives.U32.decode(buffer, state),
					packets: Primitives.U32.decode(buffer, state),
					compressed: Primitives.U32.decode(buffer, state),
					savings: Primitives.U32.decode(buffer, state),
				})
			}

			return items
		})(),
		failStats: {
			sendPacket: Primitives.U32.decode(buffer, state),
			dropped: Primitives.U32.decode(buffer, state),
			resent: Primitives.U32.decode(buffer, state),
			failedResends: Primitives.U32.decode(buffer, state),
			offCircuit: Primitives.U32.decode(buffer, state),
			invalid: Primitives.U32.decode(buffer, state),
		},
		miscStats: (() => {
			const items: ViewerStatsData["miscStats"] = []
			const size = Primitives.U8.decode(buffer, state)

			for (let i = 0; i < size; i++) {
				items.push({
					type: Primitives.U32.decode(buffer, state),
					value: Primitives.F64.decode(buffer, state),
				})
			}

			return items
		})(),
	}
}
